// soc_system_v5_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module soc_system_v5_mm_interconnect_1 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [127:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [15:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [127:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire         clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire         gp_pll_outclk0_clk,                                               //                                             gp_pll_outclk0.clk
		input  wire         adc_fifo_mem_reset_in_reset_bridge_in_reset_reset,                //                adc_fifo_mem_reset_in_reset_bridge_in_reset.reset
		input  wire         alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset,    //    alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire         dma_fifo_reset_reset_bridge_in_reset_reset,                       //                       dma_fifo_reset_reset_bridge_in_reset.reset
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         master_non_sec_clk_reset_reset_bridge_in_reset_reset,             //             master_non_sec_clk_reset_reset_bridge_in_reset.reset
		input  wire [10:0]  dma_dconvi_read_master_address,                                   //                                     dma_dconvi_read_master.address
		output wire         dma_dconvi_read_master_waitrequest,                               //                                                           .waitrequest
		input  wire         dma_dconvi_read_master_chipselect,                                //                                                           .chipselect
		input  wire         dma_dconvi_read_master_read,                                      //                                                           .read
		output wire [31:0]  dma_dconvi_read_master_readdata,                                  //                                                           .readdata
		output wire         dma_dconvi_read_master_readdatavalid,                             //                                                           .readdatavalid
		input  wire [25:0]  dma_dconvi_write_master_address,                                  //                                    dma_dconvi_write_master.address
		output wire         dma_dconvi_write_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]   dma_dconvi_write_master_byteenable,                               //                                                           .byteenable
		input  wire         dma_dconvi_write_master_chipselect,                               //                                                           .chipselect
		input  wire         dma_dconvi_write_master_write,                                    //                                                           .write
		input  wire [31:0]  dma_dconvi_write_master_writedata,                                //                                                           .writedata
		input  wire [10:0]  dma_dconvq_read_master_address,                                   //                                     dma_dconvq_read_master.address
		output wire         dma_dconvq_read_master_waitrequest,                               //                                                           .waitrequest
		input  wire         dma_dconvq_read_master_chipselect,                                //                                                           .chipselect
		input  wire         dma_dconvq_read_master_read,                                      //                                                           .read
		output wire [31:0]  dma_dconvq_read_master_readdata,                                  //                                                           .readdata
		output wire         dma_dconvq_read_master_readdatavalid,                             //                                                           .readdatavalid
		input  wire [25:0]  dma_dconvq_write_master_address,                                  //                                    dma_dconvq_write_master.address
		output wire         dma_dconvq_write_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]   dma_dconvq_write_master_byteenable,                               //                                                           .byteenable
		input  wire         dma_dconvq_write_master_chipselect,                               //                                                           .chipselect
		input  wire         dma_dconvq_write_master_write,                                    //                                                           .write
		input  wire [31:0]  dma_dconvq_write_master_writedata,                                //                                                           .writedata
		input  wire [26:0]  dma_dummy_read_master_address,                                    //                                      dma_dummy_read_master.address
		output wire         dma_dummy_read_master_waitrequest,                                //                                                           .waitrequest
		input  wire         dma_dummy_read_master_chipselect,                                 //                                                           .chipselect
		input  wire         dma_dummy_read_master_read,                                       //                                                           .read
		output wire [31:0]  dma_dummy_read_master_readdata,                                   //                                                           .readdata
		output wire         dma_dummy_read_master_readdatavalid,                              //                                                           .readdatavalid
		input  wire [25:0]  dma_dummy_write_master_address,                                   //                                     dma_dummy_write_master.address
		output wire         dma_dummy_write_master_waitrequest,                               //                                                           .waitrequest
		input  wire [3:0]   dma_dummy_write_master_byteenable,                                //                                                           .byteenable
		input  wire         dma_dummy_write_master_chipselect,                                //                                                           .chipselect
		input  wire         dma_dummy_write_master_write,                                     //                                                           .write
		input  wire [31:0]  dma_dummy_write_master_writedata,                                 //                                                           .writedata
		input  wire [26:0]  dma_fifo_read_master_address,                                     //                                       dma_fifo_read_master.address
		output wire         dma_fifo_read_master_waitrequest,                                 //                                                           .waitrequest
		input  wire         dma_fifo_read_master_chipselect,                                  //                                                           .chipselect
		input  wire         dma_fifo_read_master_read,                                        //                                                           .read
		output wire [31:0]  dma_fifo_read_master_readdata,                                    //                                                           .readdata
		output wire         dma_fifo_read_master_readdatavalid,                               //                                                           .readdatavalid
		input  wire [25:0]  dma_fifo_write_master_address,                                    //                                      dma_fifo_write_master.address
		output wire         dma_fifo_write_master_waitrequest,                                //                                                           .waitrequest
		input  wire [3:0]   dma_fifo_write_master_byteenable,                                 //                                                           .byteenable
		input  wire         dma_fifo_write_master_chipselect,                                 //                                                           .chipselect
		input  wire         dma_fifo_write_master_write,                                      //                                                           .write
		input  wire [31:0]  dma_fifo_write_master_writedata,                                  //                                                           .writedata
		input  wire [31:0]  master_non_sec_master_address,                                    //                                      master_non_sec_master.address
		output wire         master_non_sec_master_waitrequest,                                //                                                           .waitrequest
		input  wire [3:0]   master_non_sec_master_byteenable,                                 //                                                           .byteenable
		input  wire         master_non_sec_master_read,                                       //                                                           .read
		output wire [31:0]  master_non_sec_master_readdata,                                   //                                                           .readdata
		output wire         master_non_sec_master_readdatavalid,                              //                                                           .readdatavalid
		input  wire         master_non_sec_master_write,                                      //                                                           .write
		input  wire [31:0]  master_non_sec_master_writedata,                                  //                                                           .writedata
		output wire [2:0]   adc_fifo_mem_in_csr_address,                                      //                                        adc_fifo_mem_in_csr.address
		output wire         adc_fifo_mem_in_csr_write,                                        //                                                           .write
		output wire         adc_fifo_mem_in_csr_read,                                         //                                                           .read
		input  wire [31:0]  adc_fifo_mem_in_csr_readdata,                                     //                                                           .readdata
		output wire [31:0]  adc_fifo_mem_in_csr_writedata,                                    //                                                           .writedata
		output wire [0:0]   adc_fifo_mem_out_address,                                         //                                           adc_fifo_mem_out.address
		output wire         adc_fifo_mem_out_read,                                            //                                                           .read
		input  wire [31:0]  adc_fifo_mem_out_readdata,                                        //                                                           .readdata
		input  wire         adc_fifo_mem_out_waitrequest,                                     //                                                           .waitrequest
		output wire [4:0]   alt_vip_vfr_vga_avalon_slave_address,                             //                               alt_vip_vfr_vga_avalon_slave.address
		output wire         alt_vip_vfr_vga_avalon_slave_write,                               //                                                           .write
		output wire         alt_vip_vfr_vga_avalon_slave_read,                                //                                                           .read
		input  wire [31:0]  alt_vip_vfr_vga_avalon_slave_readdata,                            //                                                           .readdata
		output wire [31:0]  alt_vip_vfr_vga_avalon_slave_writedata,                           //                                                           .writedata
		output wire [5:0]   analyzer_pll_reconfig_mgmt_avalon_slave_address,                  //                    analyzer_pll_reconfig_mgmt_avalon_slave.address
		output wire         analyzer_pll_reconfig_mgmt_avalon_slave_write,                    //                                                           .write
		output wire         analyzer_pll_reconfig_mgmt_avalon_slave_read,                     //                                                           .read
		input  wire [31:0]  analyzer_pll_reconfig_mgmt_avalon_slave_readdata,                 //                                                           .readdata
		output wire [31:0]  analyzer_pll_reconfig_mgmt_avalon_slave_writedata,                //                                                           .writedata
		input  wire         analyzer_pll_reconfig_mgmt_avalon_slave_waitrequest,              //                                                           .waitrequest
		output wire [1:0]   aux_cnt_out_s1_address,                                           //                                             aux_cnt_out_s1.address
		output wire         aux_cnt_out_s1_write,                                             //                                                           .write
		input  wire [31:0]  aux_cnt_out_s1_readdata,                                          //                                                           .readdata
		output wire [31:0]  aux_cnt_out_s1_writedata,                                         //                                                           .writedata
		output wire         aux_cnt_out_s1_chipselect,                                        //                                                           .chipselect
		output wire [1:0]   ctrl_in_s1_address,                                               //                                                 ctrl_in_s1.address
		input  wire [31:0]  ctrl_in_s1_readdata,                                              //                                                           .readdata
		output wire [1:0]   ctrl_out_s1_address,                                              //                                                ctrl_out_s1.address
		output wire         ctrl_out_s1_write,                                                //                                                           .write
		input  wire [31:0]  ctrl_out_s1_readdata,                                             //                                                           .readdata
		output wire [31:0]  ctrl_out_s1_writedata,                                            //                                                           .writedata
		output wire         ctrl_out_s1_chipselect,                                           //                                                           .chipselect
		output wire [2:0]   dac_grad_spi_control_port_address,                                //                                  dac_grad_spi_control_port.address
		output wire         dac_grad_spi_control_port_write,                                  //                                                           .write
		output wire         dac_grad_spi_control_port_read,                                   //                                                           .read
		input  wire [31:0]  dac_grad_spi_control_port_readdata,                               //                                                           .readdata
		output wire [31:0]  dac_grad_spi_control_port_writedata,                              //                                                           .writedata
		output wire         dac_grad_spi_control_port_chipselect,                             //                                                           .chipselect
		output wire [2:0]   dconv_fifo_mem_in_csr_address,                                    //                                      dconv_fifo_mem_in_csr.address
		output wire         dconv_fifo_mem_in_csr_write,                                      //                                                           .write
		output wire         dconv_fifo_mem_in_csr_read,                                       //                                                           .read
		input  wire [31:0]  dconv_fifo_mem_in_csr_readdata,                                   //                                                           .readdata
		output wire [31:0]  dconv_fifo_mem_in_csr_writedata,                                  //                                                           .writedata
		output wire [0:0]   dconv_fifo_mem_out_address,                                       //                                         dconv_fifo_mem_out.address
		output wire         dconv_fifo_mem_out_read,                                          //                                                           .read
		input  wire [31:0]  dconv_fifo_mem_out_readdata,                                      //                                                           .readdata
		input  wire         dconv_fifo_mem_out_waitrequest,                                   //                                                           .waitrequest
		output wire [2:0]   dconv_fifo_mem_q_in_csr_address,                                  //                                    dconv_fifo_mem_q_in_csr.address
		output wire         dconv_fifo_mem_q_in_csr_write,                                    //                                                           .write
		output wire         dconv_fifo_mem_q_in_csr_read,                                     //                                                           .read
		input  wire [31:0]  dconv_fifo_mem_q_in_csr_readdata,                                 //                                                           .readdata
		output wire [31:0]  dconv_fifo_mem_q_in_csr_writedata,                                //                                                           .writedata
		output wire [0:0]   dconv_fifo_mem_q_out_address,                                     //                                       dconv_fifo_mem_q_out.address
		output wire         dconv_fifo_mem_q_out_read,                                        //                                                           .read
		input  wire [31:0]  dconv_fifo_mem_q_out_readdata,                                    //                                                           .readdata
		input  wire         dconv_fifo_mem_q_out_waitrequest,                                 //                                                           .waitrequest
		output wire [5:0]   dconv_fir_avalon_mm_slave_address,                                //                                  dconv_fir_avalon_mm_slave.address
		output wire         dconv_fir_avalon_mm_slave_write,                                  //                                                           .write
		output wire         dconv_fir_avalon_mm_slave_read,                                   //                                                           .read
		input  wire [15:0]  dconv_fir_avalon_mm_slave_readdata,                               //                                                           .readdata
		output wire [15:0]  dconv_fir_avalon_mm_slave_writedata,                              //                                                           .writedata
		input  wire         dconv_fir_avalon_mm_slave_readdatavalid,                          //                                                           .readdatavalid
		output wire [5:0]   dconv_fir_q_avalon_mm_slave_address,                              //                                dconv_fir_q_avalon_mm_slave.address
		output wire         dconv_fir_q_avalon_mm_slave_write,                                //                                                           .write
		output wire         dconv_fir_q_avalon_mm_slave_read,                                 //                                                           .read
		input  wire [15:0]  dconv_fir_q_avalon_mm_slave_readdata,                             //                                                           .readdata
		output wire [15:0]  dconv_fir_q_avalon_mm_slave_writedata,                            //                                                           .writedata
		input  wire         dconv_fir_q_avalon_mm_slave_readdatavalid,                        //                                                           .readdatavalid
		output wire [2:0]   dma_dconvi_control_port_slave_address,                            //                              dma_dconvi_control_port_slave.address
		output wire         dma_dconvi_control_port_slave_write,                              //                                                           .write
		input  wire [31:0]  dma_dconvi_control_port_slave_readdata,                           //                                                           .readdata
		output wire [31:0]  dma_dconvi_control_port_slave_writedata,                          //                                                           .writedata
		output wire         dma_dconvi_control_port_slave_chipselect,                         //                                                           .chipselect
		output wire [2:0]   dma_dconvq_control_port_slave_address,                            //                              dma_dconvq_control_port_slave.address
		output wire         dma_dconvq_control_port_slave_write,                              //                                                           .write
		input  wire [31:0]  dma_dconvq_control_port_slave_readdata,                           //                                                           .readdata
		output wire [31:0]  dma_dconvq_control_port_slave_writedata,                          //                                                           .writedata
		output wire         dma_dconvq_control_port_slave_chipselect,                         //                                                           .chipselect
		output wire [2:0]   dma_dummy_control_port_slave_address,                             //                               dma_dummy_control_port_slave.address
		output wire         dma_dummy_control_port_slave_write,                               //                                                           .write
		input  wire [31:0]  dma_dummy_control_port_slave_readdata,                            //                                                           .readdata
		output wire [31:0]  dma_dummy_control_port_slave_writedata,                           //                                                           .writedata
		output wire         dma_dummy_control_port_slave_chipselect,                          //                                                           .chipselect
		output wire [2:0]   dma_fifo_control_port_slave_address,                              //                                dma_fifo_control_port_slave.address
		output wire         dma_fifo_control_port_slave_write,                                //                                                           .write
		input  wire [31:0]  dma_fifo_control_port_slave_readdata,                             //                                                           .readdata
		output wire [31:0]  dma_fifo_control_port_slave_writedata,                            //                                                           .writedata
		output wire         dma_fifo_control_port_slave_chipselect,                           //                                                           .chipselect
		output wire         fifo_dummy_in_write,                                              //                                              fifo_dummy_in.write
		output wire [31:0]  fifo_dummy_in_writedata,                                          //                                                           .writedata
		input  wire         fifo_dummy_in_waitrequest,                                        //                                                           .waitrequest
		output wire [2:0]   fifo_dummy_in_csr_address,                                        //                                          fifo_dummy_in_csr.address
		output wire         fifo_dummy_in_csr_write,                                          //                                                           .write
		output wire         fifo_dummy_in_csr_read,                                           //                                                           .read
		input  wire [31:0]  fifo_dummy_in_csr_readdata,                                       //                                                           .readdata
		output wire [31:0]  fifo_dummy_in_csr_writedata,                                      //                                                           .writedata
		output wire         fifo_dummy_out_read,                                              //                                             fifo_dummy_out.read
		input  wire [31:0]  fifo_dummy_out_readdata,                                          //                                                           .readdata
		input  wire         fifo_dummy_out_waitrequest,                                       //                                                           .waitrequest
		output wire [0:0]   fifo_dummy64_in_in_address,                                       //                                         fifo_dummy64_in_in.address
		output wire         fifo_dummy64_in_in_write,                                         //                                                           .write
		output wire [31:0]  fifo_dummy64_in_in_writedata,                                     //                                                           .writedata
		input  wire         fifo_dummy64_in_in_waitrequest,                                   //                                                           .waitrequest
		output wire [2:0]   fifo_dummy64_in_in_csr_address,                                   //                                     fifo_dummy64_in_in_csr.address
		output wire         fifo_dummy64_in_in_csr_write,                                     //                                                           .write
		output wire         fifo_dummy64_in_in_csr_read,                                      //                                                           .read
		input  wire [31:0]  fifo_dummy64_in_in_csr_readdata,                                  //                                                           .readdata
		output wire [31:0]  fifo_dummy64_in_in_csr_writedata,                                 //                                                           .writedata
		output wire [2:0]   fifo_dummy64_out_in_csr_address,                                  //                                    fifo_dummy64_out_in_csr.address
		output wire         fifo_dummy64_out_in_csr_write,                                    //                                                           .write
		output wire         fifo_dummy64_out_in_csr_read,                                     //                                                           .read
		input  wire [31:0]  fifo_dummy64_out_in_csr_readdata,                                 //                                                           .readdata
		output wire [31:0]  fifo_dummy64_out_in_csr_writedata,                                //                                                           .writedata
		output wire [0:0]   fifo_dummy64_out_out_address,                                     //                                       fifo_dummy64_out_out.address
		output wire         fifo_dummy64_out_out_read,                                        //                                                           .read
		input  wire [31:0]  fifo_dummy64_out_out_readdata,                                    //                                                           .readdata
		input  wire         fifo_dummy64_out_out_waitrequest,                                 //                                                           .waitrequest
		output wire [3:0]   i2c_ext_csr_address,                                              //                                                i2c_ext_csr.address
		output wire         i2c_ext_csr_write,                                                //                                                           .write
		output wire         i2c_ext_csr_read,                                                 //                                                           .read
		input  wire [31:0]  i2c_ext_csr_readdata,                                             //                                                           .readdata
		output wire [31:0]  i2c_ext_csr_writedata,                                            //                                                           .writedata
		output wire [3:0]   i2c_int_csr_address,                                              //                                                i2c_int_csr.address
		output wire         i2c_int_csr_write,                                                //                                                           .write
		output wire         i2c_int_csr_read,                                                 //                                                           .read
		input  wire [31:0]  i2c_int_csr_readdata,                                             //                                                           .readdata
		output wire [31:0]  i2c_int_csr_writedata,                                            //                                                           .writedata
		output wire [0:0]   jtag_uart_avalon_jtag_slave_address,                              //                                jtag_uart_avalon_jtag_slave.address
		output wire         jtag_uart_avalon_jtag_slave_write,                                //                                                           .write
		output wire         jtag_uart_avalon_jtag_slave_read,                                 //                                                           .read
		input  wire [31:0]  jtag_uart_avalon_jtag_slave_readdata,                             //                                                           .readdata
		output wire [31:0]  jtag_uart_avalon_jtag_slave_writedata,                            //                                                           .writedata
		input  wire         jtag_uart_avalon_jtag_slave_waitrequest,                          //                                                           .waitrequest
		output wire         jtag_uart_avalon_jtag_slave_chipselect,                           //                                                           .chipselect
		output wire [1:0]   nmr_parameters_adc_val_sub_s1_address,                            //                              nmr_parameters_adc_val_sub_s1.address
		output wire         nmr_parameters_adc_val_sub_s1_write,                              //                                                           .write
		input  wire [31:0]  nmr_parameters_adc_val_sub_s1_readdata,                           //                                                           .readdata
		output wire [31:0]  nmr_parameters_adc_val_sub_s1_writedata,                          //                                                           .writedata
		output wire         nmr_parameters_adc_val_sub_s1_chipselect,                         //                                                           .chipselect
		output wire [1:0]   nmr_parameters_delay_nosig_s1_address,                            //                              nmr_parameters_delay_nosig_s1.address
		output wire         nmr_parameters_delay_nosig_s1_write,                              //                                                           .write
		input  wire [31:0]  nmr_parameters_delay_nosig_s1_readdata,                           //                                                           .readdata
		output wire [31:0]  nmr_parameters_delay_nosig_s1_writedata,                          //                                                           .writedata
		output wire         nmr_parameters_delay_nosig_s1_chipselect,                         //                                                           .chipselect
		output wire [1:0]   nmr_parameters_delay_sig_s1_address,                              //                                nmr_parameters_delay_sig_s1.address
		output wire         nmr_parameters_delay_sig_s1_write,                                //                                                           .write
		input  wire [31:0]  nmr_parameters_delay_sig_s1_readdata,                             //                                                           .readdata
		output wire [31:0]  nmr_parameters_delay_sig_s1_writedata,                            //                                                           .writedata
		output wire         nmr_parameters_delay_sig_s1_chipselect,                           //                                                           .chipselect
		output wire [1:0]   nmr_parameters_delay_t1_s1_address,                               //                                 nmr_parameters_delay_t1_s1.address
		output wire         nmr_parameters_delay_t1_s1_write,                                 //                                                           .write
		input  wire [31:0]  nmr_parameters_delay_t1_s1_readdata,                              //                                                           .readdata
		output wire [31:0]  nmr_parameters_delay_t1_s1_writedata,                             //                                                           .writedata
		output wire         nmr_parameters_delay_t1_s1_chipselect,                            //                                                           .chipselect
		output wire [1:0]   nmr_parameters_echoes_per_scan_s1_address,                        //                          nmr_parameters_echoes_per_scan_s1.address
		output wire         nmr_parameters_echoes_per_scan_s1_write,                          //                                                           .write
		input  wire [31:0]  nmr_parameters_echoes_per_scan_s1_readdata,                       //                                                           .readdata
		output wire [31:0]  nmr_parameters_echoes_per_scan_s1_writedata,                      //                                                           .writedata
		output wire         nmr_parameters_echoes_per_scan_s1_chipselect,                     //                                                           .chipselect
		output wire [1:0]   nmr_parameters_init_delay_s1_address,                             //                               nmr_parameters_init_delay_s1.address
		output wire         nmr_parameters_init_delay_s1_write,                               //                                                           .write
		input  wire [31:0]  nmr_parameters_init_delay_s1_readdata,                            //                                                           .readdata
		output wire [31:0]  nmr_parameters_init_delay_s1_writedata,                           //                                                           .writedata
		output wire         nmr_parameters_init_delay_s1_chipselect,                          //                                                           .chipselect
		output wire [1:0]   nmr_parameters_pulse_180deg_s1_address,                           //                             nmr_parameters_pulse_180deg_s1.address
		output wire         nmr_parameters_pulse_180deg_s1_write,                             //                                                           .write
		input  wire [31:0]  nmr_parameters_pulse_180deg_s1_readdata,                          //                                                           .readdata
		output wire [31:0]  nmr_parameters_pulse_180deg_s1_writedata,                         //                                                           .writedata
		output wire         nmr_parameters_pulse_180deg_s1_chipselect,                        //                                                           .chipselect
		output wire [1:0]   nmr_parameters_pulse_90deg_s1_address,                            //                              nmr_parameters_pulse_90deg_s1.address
		output wire         nmr_parameters_pulse_90deg_s1_write,                              //                                                           .write
		input  wire [31:0]  nmr_parameters_pulse_90deg_s1_readdata,                           //                                                           .readdata
		output wire [31:0]  nmr_parameters_pulse_90deg_s1_writedata,                          //                                                           .writedata
		output wire         nmr_parameters_pulse_90deg_s1_chipselect,                         //                                                           .chipselect
		output wire [1:0]   nmr_parameters_pulse_t1_s1_address,                               //                                 nmr_parameters_pulse_t1_s1.address
		output wire         nmr_parameters_pulse_t1_s1_write,                                 //                                                           .write
		input  wire [31:0]  nmr_parameters_pulse_t1_s1_readdata,                              //                                                           .readdata
		output wire [31:0]  nmr_parameters_pulse_t1_s1_writedata,                             //                                                           .writedata
		output wire         nmr_parameters_pulse_t1_s1_chipselect,                            //                                                           .chipselect
		output wire [1:0]   nmr_parameters_rx_delay_s1_address,                               //                                 nmr_parameters_rx_delay_s1.address
		output wire         nmr_parameters_rx_delay_s1_write,                                 //                                                           .write
		input  wire [31:0]  nmr_parameters_rx_delay_s1_readdata,                              //                                                           .readdata
		output wire [31:0]  nmr_parameters_rx_delay_s1_writedata,                             //                                                           .writedata
		output wire         nmr_parameters_rx_delay_s1_chipselect,                            //                                                           .chipselect
		output wire [1:0]   nmr_parameters_samples_per_echo_s1_address,                       //                         nmr_parameters_samples_per_echo_s1.address
		output wire         nmr_parameters_samples_per_echo_s1_write,                         //                                                           .write
		input  wire [31:0]  nmr_parameters_samples_per_echo_s1_readdata,                      //                                                           .readdata
		output wire [31:0]  nmr_parameters_samples_per_echo_s1_writedata,                     //                                                           .writedata
		output wire         nmr_parameters_samples_per_echo_s1_chipselect,                    //                                                           .chipselect
		output wire [5:0]   nmr_sys_pll_reconfig_mgmt_avalon_slave_address,                   //                     nmr_sys_pll_reconfig_mgmt_avalon_slave.address
		output wire         nmr_sys_pll_reconfig_mgmt_avalon_slave_write,                     //                                                           .write
		output wire         nmr_sys_pll_reconfig_mgmt_avalon_slave_read,                      //                                                           .read
		input  wire [31:0]  nmr_sys_pll_reconfig_mgmt_avalon_slave_readdata,                  //                                                           .readdata
		output wire [31:0]  nmr_sys_pll_reconfig_mgmt_avalon_slave_writedata,                 //                                                           .writedata
		input  wire         nmr_sys_pll_reconfig_mgmt_avalon_slave_waitrequest,               //                                                           .waitrequest
		output wire [24:0]  sdram_s1_address,                                                 //                                                   sdram_s1.address
		output wire         sdram_s1_write,                                                   //                                                           .write
		output wire         sdram_s1_read,                                                    //                                                           .read
		input  wire [15:0]  sdram_s1_readdata,                                                //                                                           .readdata
		output wire [15:0]  sdram_s1_writedata,                                               //                                                           .writedata
		output wire [1:0]   sdram_s1_byteenable,                                              //                                                           .byteenable
		input  wire         sdram_s1_readdatavalid,                                           //                                                           .readdatavalid
		input  wire         sdram_s1_waitrequest,                                             //                                                           .waitrequest
		output wire         sdram_s1_chipselect,                                              //                                                           .chipselect
		output wire [2:0]   spi_afe_relays_spi_control_port_address,                          //                            spi_afe_relays_spi_control_port.address
		output wire         spi_afe_relays_spi_control_port_write,                            //                                                           .write
		output wire         spi_afe_relays_spi_control_port_read,                             //                                                           .read
		input  wire [31:0]  spi_afe_relays_spi_control_port_readdata,                         //                                                           .readdata
		output wire [31:0]  spi_afe_relays_spi_control_port_writedata,                        //                                                           .writedata
		output wire         spi_afe_relays_spi_control_port_chipselect,                       //                                                           .chipselect
		output wire [2:0]   spi_mtch_ntwrk_spi_control_port_address,                          //                            spi_mtch_ntwrk_spi_control_port.address
		output wire         spi_mtch_ntwrk_spi_control_port_write,                            //                                                           .write
		output wire         spi_mtch_ntwrk_spi_control_port_read,                             //                                                           .read
		input  wire [31:0]  spi_mtch_ntwrk_spi_control_port_readdata,                         //                                                           .readdata
		output wire [31:0]  spi_mtch_ntwrk_spi_control_port_writedata,                        //                                                           .writedata
		output wire         spi_mtch_ntwrk_spi_control_port_chipselect,                       //                                                           .chipselect
		output wire [1:0]   switches_s1_address,                                              //                                                switches_s1.address
		input  wire [31:0]  switches_s1_readdata,                                             //                                                           .readdata
		output wire [0:0]   sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata                                 //                                                           .readdata
	);

	wire          dma_fifo_write_master_translator_avalon_universal_master_0_waitrequest;                        // dma_fifo_write_master_agent:av_waitrequest -> dma_fifo_write_master_translator:uav_waitrequest
	wire   [31:0] dma_fifo_write_master_translator_avalon_universal_master_0_readdata;                           // dma_fifo_write_master_agent:av_readdata -> dma_fifo_write_master_translator:uav_readdata
	wire          dma_fifo_write_master_translator_avalon_universal_master_0_debugaccess;                        // dma_fifo_write_master_translator:uav_debugaccess -> dma_fifo_write_master_agent:av_debugaccess
	wire   [31:0] dma_fifo_write_master_translator_avalon_universal_master_0_address;                            // dma_fifo_write_master_translator:uav_address -> dma_fifo_write_master_agent:av_address
	wire          dma_fifo_write_master_translator_avalon_universal_master_0_read;                               // dma_fifo_write_master_translator:uav_read -> dma_fifo_write_master_agent:av_read
	wire    [3:0] dma_fifo_write_master_translator_avalon_universal_master_0_byteenable;                         // dma_fifo_write_master_translator:uav_byteenable -> dma_fifo_write_master_agent:av_byteenable
	wire          dma_fifo_write_master_translator_avalon_universal_master_0_readdatavalid;                      // dma_fifo_write_master_agent:av_readdatavalid -> dma_fifo_write_master_translator:uav_readdatavalid
	wire          dma_fifo_write_master_translator_avalon_universal_master_0_lock;                               // dma_fifo_write_master_translator:uav_lock -> dma_fifo_write_master_agent:av_lock
	wire          dma_fifo_write_master_translator_avalon_universal_master_0_write;                              // dma_fifo_write_master_translator:uav_write -> dma_fifo_write_master_agent:av_write
	wire   [31:0] dma_fifo_write_master_translator_avalon_universal_master_0_writedata;                          // dma_fifo_write_master_translator:uav_writedata -> dma_fifo_write_master_agent:av_writedata
	wire    [2:0] dma_fifo_write_master_translator_avalon_universal_master_0_burstcount;                         // dma_fifo_write_master_translator:uav_burstcount -> dma_fifo_write_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                         // rsp_mux_002:src_valid -> dma_fifo_write_master_agent:rp_valid
	wire  [136:0] rsp_mux_002_src_data;                                                                          // rsp_mux_002:src_data -> dma_fifo_write_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                         // dma_fifo_write_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [44:0] rsp_mux_002_src_channel;                                                                       // rsp_mux_002:src_channel -> dma_fifo_write_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                 // rsp_mux_002:src_startofpacket -> dma_fifo_write_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                   // rsp_mux_002:src_endofpacket -> dma_fifo_write_master_agent:rp_endofpacket
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_waitrequest;                      // dma_dconvi_write_master_agent:av_waitrequest -> dma_dconvi_write_master_translator:uav_waitrequest
	wire   [31:0] dma_dconvi_write_master_translator_avalon_universal_master_0_readdata;                         // dma_dconvi_write_master_agent:av_readdata -> dma_dconvi_write_master_translator:uav_readdata
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_debugaccess;                      // dma_dconvi_write_master_translator:uav_debugaccess -> dma_dconvi_write_master_agent:av_debugaccess
	wire   [31:0] dma_dconvi_write_master_translator_avalon_universal_master_0_address;                          // dma_dconvi_write_master_translator:uav_address -> dma_dconvi_write_master_agent:av_address
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_read;                             // dma_dconvi_write_master_translator:uav_read -> dma_dconvi_write_master_agent:av_read
	wire    [3:0] dma_dconvi_write_master_translator_avalon_universal_master_0_byteenable;                       // dma_dconvi_write_master_translator:uav_byteenable -> dma_dconvi_write_master_agent:av_byteenable
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_readdatavalid;                    // dma_dconvi_write_master_agent:av_readdatavalid -> dma_dconvi_write_master_translator:uav_readdatavalid
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_lock;                             // dma_dconvi_write_master_translator:uav_lock -> dma_dconvi_write_master_agent:av_lock
	wire          dma_dconvi_write_master_translator_avalon_universal_master_0_write;                            // dma_dconvi_write_master_translator:uav_write -> dma_dconvi_write_master_agent:av_write
	wire   [31:0] dma_dconvi_write_master_translator_avalon_universal_master_0_writedata;                        // dma_dconvi_write_master_translator:uav_writedata -> dma_dconvi_write_master_agent:av_writedata
	wire    [2:0] dma_dconvi_write_master_translator_avalon_universal_master_0_burstcount;                       // dma_dconvi_write_master_translator:uav_burstcount -> dma_dconvi_write_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                         // rsp_mux_003:src_valid -> dma_dconvi_write_master_agent:rp_valid
	wire  [136:0] rsp_mux_003_src_data;                                                                          // rsp_mux_003:src_data -> dma_dconvi_write_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                         // dma_dconvi_write_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [44:0] rsp_mux_003_src_channel;                                                                       // rsp_mux_003:src_channel -> dma_dconvi_write_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                                 // rsp_mux_003:src_startofpacket -> dma_dconvi_write_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                   // rsp_mux_003:src_endofpacket -> dma_dconvi_write_master_agent:rp_endofpacket
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_waitrequest;                      // dma_dconvq_write_master_agent:av_waitrequest -> dma_dconvq_write_master_translator:uav_waitrequest
	wire   [31:0] dma_dconvq_write_master_translator_avalon_universal_master_0_readdata;                         // dma_dconvq_write_master_agent:av_readdata -> dma_dconvq_write_master_translator:uav_readdata
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_debugaccess;                      // dma_dconvq_write_master_translator:uav_debugaccess -> dma_dconvq_write_master_agent:av_debugaccess
	wire   [31:0] dma_dconvq_write_master_translator_avalon_universal_master_0_address;                          // dma_dconvq_write_master_translator:uav_address -> dma_dconvq_write_master_agent:av_address
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_read;                             // dma_dconvq_write_master_translator:uav_read -> dma_dconvq_write_master_agent:av_read
	wire    [3:0] dma_dconvq_write_master_translator_avalon_universal_master_0_byteenable;                       // dma_dconvq_write_master_translator:uav_byteenable -> dma_dconvq_write_master_agent:av_byteenable
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_readdatavalid;                    // dma_dconvq_write_master_agent:av_readdatavalid -> dma_dconvq_write_master_translator:uav_readdatavalid
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_lock;                             // dma_dconvq_write_master_translator:uav_lock -> dma_dconvq_write_master_agent:av_lock
	wire          dma_dconvq_write_master_translator_avalon_universal_master_0_write;                            // dma_dconvq_write_master_translator:uav_write -> dma_dconvq_write_master_agent:av_write
	wire   [31:0] dma_dconvq_write_master_translator_avalon_universal_master_0_writedata;                        // dma_dconvq_write_master_translator:uav_writedata -> dma_dconvq_write_master_agent:av_writedata
	wire    [2:0] dma_dconvq_write_master_translator_avalon_universal_master_0_burstcount;                       // dma_dconvq_write_master_translator:uav_burstcount -> dma_dconvq_write_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                         // rsp_mux_004:src_valid -> dma_dconvq_write_master_agent:rp_valid
	wire  [136:0] rsp_mux_004_src_data;                                                                          // rsp_mux_004:src_data -> dma_dconvq_write_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                         // dma_dconvq_write_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [44:0] rsp_mux_004_src_channel;                                                                       // rsp_mux_004:src_channel -> dma_dconvq_write_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                 // rsp_mux_004:src_startofpacket -> dma_dconvq_write_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                   // rsp_mux_004:src_endofpacket -> dma_dconvq_write_master_agent:rp_endofpacket
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_waitrequest;                       // dma_dummy_write_master_agent:av_waitrequest -> dma_dummy_write_master_translator:uav_waitrequest
	wire   [31:0] dma_dummy_write_master_translator_avalon_universal_master_0_readdata;                          // dma_dummy_write_master_agent:av_readdata -> dma_dummy_write_master_translator:uav_readdata
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_debugaccess;                       // dma_dummy_write_master_translator:uav_debugaccess -> dma_dummy_write_master_agent:av_debugaccess
	wire   [31:0] dma_dummy_write_master_translator_avalon_universal_master_0_address;                           // dma_dummy_write_master_translator:uav_address -> dma_dummy_write_master_agent:av_address
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_read;                              // dma_dummy_write_master_translator:uav_read -> dma_dummy_write_master_agent:av_read
	wire    [3:0] dma_dummy_write_master_translator_avalon_universal_master_0_byteenable;                        // dma_dummy_write_master_translator:uav_byteenable -> dma_dummy_write_master_agent:av_byteenable
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_readdatavalid;                     // dma_dummy_write_master_agent:av_readdatavalid -> dma_dummy_write_master_translator:uav_readdatavalid
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_lock;                              // dma_dummy_write_master_translator:uav_lock -> dma_dummy_write_master_agent:av_lock
	wire          dma_dummy_write_master_translator_avalon_universal_master_0_write;                             // dma_dummy_write_master_translator:uav_write -> dma_dummy_write_master_agent:av_write
	wire   [31:0] dma_dummy_write_master_translator_avalon_universal_master_0_writedata;                         // dma_dummy_write_master_translator:uav_writedata -> dma_dummy_write_master_agent:av_writedata
	wire    [2:0] dma_dummy_write_master_translator_avalon_universal_master_0_burstcount;                        // dma_dummy_write_master_translator:uav_burstcount -> dma_dummy_write_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                         // rsp_mux_005:src_valid -> dma_dummy_write_master_agent:rp_valid
	wire  [136:0] rsp_mux_005_src_data;                                                                          // rsp_mux_005:src_data -> dma_dummy_write_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                         // dma_dummy_write_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [44:0] rsp_mux_005_src_channel;                                                                       // rsp_mux_005:src_channel -> dma_dummy_write_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                                 // rsp_mux_005:src_startofpacket -> dma_dummy_write_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                   // rsp_mux_005:src_endofpacket -> dma_dummy_write_master_agent:rp_endofpacket
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_waitrequest;                         // dma_fifo_read_master_agent:av_waitrequest -> dma_fifo_read_master_translator:uav_waitrequest
	wire   [31:0] dma_fifo_read_master_translator_avalon_universal_master_0_readdata;                            // dma_fifo_read_master_agent:av_readdata -> dma_fifo_read_master_translator:uav_readdata
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_debugaccess;                         // dma_fifo_read_master_translator:uav_debugaccess -> dma_fifo_read_master_agent:av_debugaccess
	wire   [31:0] dma_fifo_read_master_translator_avalon_universal_master_0_address;                             // dma_fifo_read_master_translator:uav_address -> dma_fifo_read_master_agent:av_address
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_read;                                // dma_fifo_read_master_translator:uav_read -> dma_fifo_read_master_agent:av_read
	wire    [3:0] dma_fifo_read_master_translator_avalon_universal_master_0_byteenable;                          // dma_fifo_read_master_translator:uav_byteenable -> dma_fifo_read_master_agent:av_byteenable
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_readdatavalid;                       // dma_fifo_read_master_agent:av_readdatavalid -> dma_fifo_read_master_translator:uav_readdatavalid
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_lock;                                // dma_fifo_read_master_translator:uav_lock -> dma_fifo_read_master_agent:av_lock
	wire          dma_fifo_read_master_translator_avalon_universal_master_0_write;                               // dma_fifo_read_master_translator:uav_write -> dma_fifo_read_master_agent:av_write
	wire   [31:0] dma_fifo_read_master_translator_avalon_universal_master_0_writedata;                           // dma_fifo_read_master_translator:uav_writedata -> dma_fifo_read_master_agent:av_writedata
	wire    [2:0] dma_fifo_read_master_translator_avalon_universal_master_0_burstcount;                          // dma_fifo_read_master_translator:uav_burstcount -> dma_fifo_read_master_agent:av_burstcount
	wire          master_non_sec_master_translator_avalon_universal_master_0_waitrequest;                        // master_non_sec_master_agent:av_waitrequest -> master_non_sec_master_translator:uav_waitrequest
	wire   [31:0] master_non_sec_master_translator_avalon_universal_master_0_readdata;                           // master_non_sec_master_agent:av_readdata -> master_non_sec_master_translator:uav_readdata
	wire          master_non_sec_master_translator_avalon_universal_master_0_debugaccess;                        // master_non_sec_master_translator:uav_debugaccess -> master_non_sec_master_agent:av_debugaccess
	wire   [31:0] master_non_sec_master_translator_avalon_universal_master_0_address;                            // master_non_sec_master_translator:uav_address -> master_non_sec_master_agent:av_address
	wire          master_non_sec_master_translator_avalon_universal_master_0_read;                               // master_non_sec_master_translator:uav_read -> master_non_sec_master_agent:av_read
	wire    [3:0] master_non_sec_master_translator_avalon_universal_master_0_byteenable;                         // master_non_sec_master_translator:uav_byteenable -> master_non_sec_master_agent:av_byteenable
	wire          master_non_sec_master_translator_avalon_universal_master_0_readdatavalid;                      // master_non_sec_master_agent:av_readdatavalid -> master_non_sec_master_translator:uav_readdatavalid
	wire          master_non_sec_master_translator_avalon_universal_master_0_lock;                               // master_non_sec_master_translator:uav_lock -> master_non_sec_master_agent:av_lock
	wire          master_non_sec_master_translator_avalon_universal_master_0_write;                              // master_non_sec_master_translator:uav_write -> master_non_sec_master_agent:av_write
	wire   [31:0] master_non_sec_master_translator_avalon_universal_master_0_writedata;                          // master_non_sec_master_translator:uav_writedata -> master_non_sec_master_agent:av_writedata
	wire    [2:0] master_non_sec_master_translator_avalon_universal_master_0_burstcount;                         // master_non_sec_master_translator:uav_burstcount -> master_non_sec_master_agent:av_burstcount
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_waitrequest;                       // dma_dconvq_read_master_agent:av_waitrequest -> dma_dconvq_read_master_translator:uav_waitrequest
	wire   [31:0] dma_dconvq_read_master_translator_avalon_universal_master_0_readdata;                          // dma_dconvq_read_master_agent:av_readdata -> dma_dconvq_read_master_translator:uav_readdata
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_debugaccess;                       // dma_dconvq_read_master_translator:uav_debugaccess -> dma_dconvq_read_master_agent:av_debugaccess
	wire   [31:0] dma_dconvq_read_master_translator_avalon_universal_master_0_address;                           // dma_dconvq_read_master_translator:uav_address -> dma_dconvq_read_master_agent:av_address
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_read;                              // dma_dconvq_read_master_translator:uav_read -> dma_dconvq_read_master_agent:av_read
	wire    [3:0] dma_dconvq_read_master_translator_avalon_universal_master_0_byteenable;                        // dma_dconvq_read_master_translator:uav_byteenable -> dma_dconvq_read_master_agent:av_byteenable
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_readdatavalid;                     // dma_dconvq_read_master_agent:av_readdatavalid -> dma_dconvq_read_master_translator:uav_readdatavalid
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_lock;                              // dma_dconvq_read_master_translator:uav_lock -> dma_dconvq_read_master_agent:av_lock
	wire          dma_dconvq_read_master_translator_avalon_universal_master_0_write;                             // dma_dconvq_read_master_translator:uav_write -> dma_dconvq_read_master_agent:av_write
	wire   [31:0] dma_dconvq_read_master_translator_avalon_universal_master_0_writedata;                         // dma_dconvq_read_master_translator:uav_writedata -> dma_dconvq_read_master_agent:av_writedata
	wire    [2:0] dma_dconvq_read_master_translator_avalon_universal_master_0_burstcount;                        // dma_dconvq_read_master_translator:uav_burstcount -> dma_dconvq_read_master_agent:av_burstcount
	wire          rsp_mux_010_src_valid;                                                                         // rsp_mux_010:src_valid -> dma_dconvq_read_master_agent:rp_valid
	wire  [136:0] rsp_mux_010_src_data;                                                                          // rsp_mux_010:src_data -> dma_dconvq_read_master_agent:rp_data
	wire          rsp_mux_010_src_ready;                                                                         // dma_dconvq_read_master_agent:rp_ready -> rsp_mux_010:src_ready
	wire   [44:0] rsp_mux_010_src_channel;                                                                       // rsp_mux_010:src_channel -> dma_dconvq_read_master_agent:rp_channel
	wire          rsp_mux_010_src_startofpacket;                                                                 // rsp_mux_010:src_startofpacket -> dma_dconvq_read_master_agent:rp_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                                   // rsp_mux_010:src_endofpacket -> dma_dconvq_read_master_agent:rp_endofpacket
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_waitrequest;                       // dma_dconvi_read_master_agent:av_waitrequest -> dma_dconvi_read_master_translator:uav_waitrequest
	wire   [31:0] dma_dconvi_read_master_translator_avalon_universal_master_0_readdata;                          // dma_dconvi_read_master_agent:av_readdata -> dma_dconvi_read_master_translator:uav_readdata
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_debugaccess;                       // dma_dconvi_read_master_translator:uav_debugaccess -> dma_dconvi_read_master_agent:av_debugaccess
	wire   [31:0] dma_dconvi_read_master_translator_avalon_universal_master_0_address;                           // dma_dconvi_read_master_translator:uav_address -> dma_dconvi_read_master_agent:av_address
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_read;                              // dma_dconvi_read_master_translator:uav_read -> dma_dconvi_read_master_agent:av_read
	wire    [3:0] dma_dconvi_read_master_translator_avalon_universal_master_0_byteenable;                        // dma_dconvi_read_master_translator:uav_byteenable -> dma_dconvi_read_master_agent:av_byteenable
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_readdatavalid;                     // dma_dconvi_read_master_agent:av_readdatavalid -> dma_dconvi_read_master_translator:uav_readdatavalid
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_lock;                              // dma_dconvi_read_master_translator:uav_lock -> dma_dconvi_read_master_agent:av_lock
	wire          dma_dconvi_read_master_translator_avalon_universal_master_0_write;                             // dma_dconvi_read_master_translator:uav_write -> dma_dconvi_read_master_agent:av_write
	wire   [31:0] dma_dconvi_read_master_translator_avalon_universal_master_0_writedata;                         // dma_dconvi_read_master_translator:uav_writedata -> dma_dconvi_read_master_agent:av_writedata
	wire    [2:0] dma_dconvi_read_master_translator_avalon_universal_master_0_burstcount;                        // dma_dconvi_read_master_translator:uav_burstcount -> dma_dconvi_read_master_agent:av_burstcount
	wire          rsp_mux_011_src_valid;                                                                         // rsp_mux_011:src_valid -> dma_dconvi_read_master_agent:rp_valid
	wire  [136:0] rsp_mux_011_src_data;                                                                          // rsp_mux_011:src_data -> dma_dconvi_read_master_agent:rp_data
	wire          rsp_mux_011_src_ready;                                                                         // dma_dconvi_read_master_agent:rp_ready -> rsp_mux_011:src_ready
	wire   [44:0] rsp_mux_011_src_channel;                                                                       // rsp_mux_011:src_channel -> dma_dconvi_read_master_agent:rp_channel
	wire          rsp_mux_011_src_startofpacket;                                                                 // rsp_mux_011:src_startofpacket -> dma_dconvi_read_master_agent:rp_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                                   // rsp_mux_011:src_endofpacket -> dma_dconvi_read_master_agent:rp_endofpacket
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_waitrequest;                        // dma_dummy_read_master_agent:av_waitrequest -> dma_dummy_read_master_translator:uav_waitrequest
	wire   [31:0] dma_dummy_read_master_translator_avalon_universal_master_0_readdata;                           // dma_dummy_read_master_agent:av_readdata -> dma_dummy_read_master_translator:uav_readdata
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_debugaccess;                        // dma_dummy_read_master_translator:uav_debugaccess -> dma_dummy_read_master_agent:av_debugaccess
	wire   [31:0] dma_dummy_read_master_translator_avalon_universal_master_0_address;                            // dma_dummy_read_master_translator:uav_address -> dma_dummy_read_master_agent:av_address
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_read;                               // dma_dummy_read_master_translator:uav_read -> dma_dummy_read_master_agent:av_read
	wire    [3:0] dma_dummy_read_master_translator_avalon_universal_master_0_byteenable;                         // dma_dummy_read_master_translator:uav_byteenable -> dma_dummy_read_master_agent:av_byteenable
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_readdatavalid;                      // dma_dummy_read_master_agent:av_readdatavalid -> dma_dummy_read_master_translator:uav_readdatavalid
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_lock;                               // dma_dummy_read_master_translator:uav_lock -> dma_dummy_read_master_agent:av_lock
	wire          dma_dummy_read_master_translator_avalon_universal_master_0_write;                              // dma_dummy_read_master_translator:uav_write -> dma_dummy_read_master_agent:av_write
	wire   [31:0] dma_dummy_read_master_translator_avalon_universal_master_0_writedata;                          // dma_dummy_read_master_translator:uav_writedata -> dma_dummy_read_master_agent:av_writedata
	wire    [2:0] dma_dummy_read_master_translator_avalon_universal_master_0_burstcount;                         // dma_dummy_read_master_translator:uav_burstcount -> dma_dummy_read_master_agent:av_burstcount
	wire          rsp_mux_012_src_valid;                                                                         // rsp_mux_012:src_valid -> dma_dummy_read_master_agent:rp_valid
	wire  [136:0] rsp_mux_012_src_data;                                                                          // rsp_mux_012:src_data -> dma_dummy_read_master_agent:rp_data
	wire          rsp_mux_012_src_ready;                                                                         // dma_dummy_read_master_agent:rp_ready -> rsp_mux_012:src_ready
	wire   [44:0] rsp_mux_012_src_channel;                                                                       // rsp_mux_012:src_channel -> dma_dummy_read_master_agent:rp_channel
	wire          rsp_mux_012_src_startofpacket;                                                                 // rsp_mux_012:src_startofpacket -> dma_dummy_read_master_agent:rp_startofpacket
	wire          rsp_mux_012_src_endofpacket;                                                                   // rsp_mux_012:src_endofpacket -> dma_dummy_read_master_agent:rp_endofpacket
	wire   [31:0] fifo_dummy64_in_in_agent_m0_readdata;                                                          // fifo_dummy64_in_in_translator:uav_readdata -> fifo_dummy64_in_in_agent:m0_readdata
	wire          fifo_dummy64_in_in_agent_m0_waitrequest;                                                       // fifo_dummy64_in_in_translator:uav_waitrequest -> fifo_dummy64_in_in_agent:m0_waitrequest
	wire          fifo_dummy64_in_in_agent_m0_debugaccess;                                                       // fifo_dummy64_in_in_agent:m0_debugaccess -> fifo_dummy64_in_in_translator:uav_debugaccess
	wire   [31:0] fifo_dummy64_in_in_agent_m0_address;                                                           // fifo_dummy64_in_in_agent:m0_address -> fifo_dummy64_in_in_translator:uav_address
	wire    [3:0] fifo_dummy64_in_in_agent_m0_byteenable;                                                        // fifo_dummy64_in_in_agent:m0_byteenable -> fifo_dummy64_in_in_translator:uav_byteenable
	wire          fifo_dummy64_in_in_agent_m0_read;                                                              // fifo_dummy64_in_in_agent:m0_read -> fifo_dummy64_in_in_translator:uav_read
	wire          fifo_dummy64_in_in_agent_m0_readdatavalid;                                                     // fifo_dummy64_in_in_translator:uav_readdatavalid -> fifo_dummy64_in_in_agent:m0_readdatavalid
	wire          fifo_dummy64_in_in_agent_m0_lock;                                                              // fifo_dummy64_in_in_agent:m0_lock -> fifo_dummy64_in_in_translator:uav_lock
	wire   [31:0] fifo_dummy64_in_in_agent_m0_writedata;                                                         // fifo_dummy64_in_in_agent:m0_writedata -> fifo_dummy64_in_in_translator:uav_writedata
	wire          fifo_dummy64_in_in_agent_m0_write;                                                             // fifo_dummy64_in_in_agent:m0_write -> fifo_dummy64_in_in_translator:uav_write
	wire    [2:0] fifo_dummy64_in_in_agent_m0_burstcount;                                                        // fifo_dummy64_in_in_agent:m0_burstcount -> fifo_dummy64_in_in_translator:uav_burstcount
	wire          fifo_dummy64_in_in_agent_rf_source_valid;                                                      // fifo_dummy64_in_in_agent:rf_source_valid -> fifo_dummy64_in_in_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy64_in_in_agent_rf_source_data;                                                       // fifo_dummy64_in_in_agent:rf_source_data -> fifo_dummy64_in_in_agent_rsp_fifo:in_data
	wire          fifo_dummy64_in_in_agent_rf_source_ready;                                                      // fifo_dummy64_in_in_agent_rsp_fifo:in_ready -> fifo_dummy64_in_in_agent:rf_source_ready
	wire          fifo_dummy64_in_in_agent_rf_source_startofpacket;                                              // fifo_dummy64_in_in_agent:rf_source_startofpacket -> fifo_dummy64_in_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy64_in_in_agent_rf_source_endofpacket;                                                // fifo_dummy64_in_in_agent:rf_source_endofpacket -> fifo_dummy64_in_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy64_in_in_agent_rsp_fifo_out_valid;                                                   // fifo_dummy64_in_in_agent_rsp_fifo:out_valid -> fifo_dummy64_in_in_agent:rf_sink_valid
	wire  [137:0] fifo_dummy64_in_in_agent_rsp_fifo_out_data;                                                    // fifo_dummy64_in_in_agent_rsp_fifo:out_data -> fifo_dummy64_in_in_agent:rf_sink_data
	wire          fifo_dummy64_in_in_agent_rsp_fifo_out_ready;                                                   // fifo_dummy64_in_in_agent:rf_sink_ready -> fifo_dummy64_in_in_agent_rsp_fifo:out_ready
	wire          fifo_dummy64_in_in_agent_rsp_fifo_out_startofpacket;                                           // fifo_dummy64_in_in_agent_rsp_fifo:out_startofpacket -> fifo_dummy64_in_in_agent:rf_sink_startofpacket
	wire          fifo_dummy64_in_in_agent_rsp_fifo_out_endofpacket;                                             // fifo_dummy64_in_in_agent_rsp_fifo:out_endofpacket -> fifo_dummy64_in_in_agent:rf_sink_endofpacket
	wire          fifo_dummy64_in_in_agent_rdata_fifo_src_valid;                                                 // fifo_dummy64_in_in_agent:rdata_fifo_src_valid -> fifo_dummy64_in_in_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy64_in_in_agent_rdata_fifo_src_data;                                                  // fifo_dummy64_in_in_agent:rdata_fifo_src_data -> fifo_dummy64_in_in_agent_rdata_fifo:in_data
	wire          fifo_dummy64_in_in_agent_rdata_fifo_src_ready;                                                 // fifo_dummy64_in_in_agent_rdata_fifo:in_ready -> fifo_dummy64_in_in_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy_in_agent_m0_readdata;                                                               // fifo_dummy_in_translator:uav_readdata -> fifo_dummy_in_agent:m0_readdata
	wire          fifo_dummy_in_agent_m0_waitrequest;                                                            // fifo_dummy_in_translator:uav_waitrequest -> fifo_dummy_in_agent:m0_waitrequest
	wire          fifo_dummy_in_agent_m0_debugaccess;                                                            // fifo_dummy_in_agent:m0_debugaccess -> fifo_dummy_in_translator:uav_debugaccess
	wire   [31:0] fifo_dummy_in_agent_m0_address;                                                                // fifo_dummy_in_agent:m0_address -> fifo_dummy_in_translator:uav_address
	wire    [3:0] fifo_dummy_in_agent_m0_byteenable;                                                             // fifo_dummy_in_agent:m0_byteenable -> fifo_dummy_in_translator:uav_byteenable
	wire          fifo_dummy_in_agent_m0_read;                                                                   // fifo_dummy_in_agent:m0_read -> fifo_dummy_in_translator:uav_read
	wire          fifo_dummy_in_agent_m0_readdatavalid;                                                          // fifo_dummy_in_translator:uav_readdatavalid -> fifo_dummy_in_agent:m0_readdatavalid
	wire          fifo_dummy_in_agent_m0_lock;                                                                   // fifo_dummy_in_agent:m0_lock -> fifo_dummy_in_translator:uav_lock
	wire   [31:0] fifo_dummy_in_agent_m0_writedata;                                                              // fifo_dummy_in_agent:m0_writedata -> fifo_dummy_in_translator:uav_writedata
	wire          fifo_dummy_in_agent_m0_write;                                                                  // fifo_dummy_in_agent:m0_write -> fifo_dummy_in_translator:uav_write
	wire    [2:0] fifo_dummy_in_agent_m0_burstcount;                                                             // fifo_dummy_in_agent:m0_burstcount -> fifo_dummy_in_translator:uav_burstcount
	wire          fifo_dummy_in_agent_rf_source_valid;                                                           // fifo_dummy_in_agent:rf_source_valid -> fifo_dummy_in_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy_in_agent_rf_source_data;                                                            // fifo_dummy_in_agent:rf_source_data -> fifo_dummy_in_agent_rsp_fifo:in_data
	wire          fifo_dummy_in_agent_rf_source_ready;                                                           // fifo_dummy_in_agent_rsp_fifo:in_ready -> fifo_dummy_in_agent:rf_source_ready
	wire          fifo_dummy_in_agent_rf_source_startofpacket;                                                   // fifo_dummy_in_agent:rf_source_startofpacket -> fifo_dummy_in_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy_in_agent_rf_source_endofpacket;                                                     // fifo_dummy_in_agent:rf_source_endofpacket -> fifo_dummy_in_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy_in_agent_rsp_fifo_out_valid;                                                        // fifo_dummy_in_agent_rsp_fifo:out_valid -> fifo_dummy_in_agent:rf_sink_valid
	wire  [137:0] fifo_dummy_in_agent_rsp_fifo_out_data;                                                         // fifo_dummy_in_agent_rsp_fifo:out_data -> fifo_dummy_in_agent:rf_sink_data
	wire          fifo_dummy_in_agent_rsp_fifo_out_ready;                                                        // fifo_dummy_in_agent:rf_sink_ready -> fifo_dummy_in_agent_rsp_fifo:out_ready
	wire          fifo_dummy_in_agent_rsp_fifo_out_startofpacket;                                                // fifo_dummy_in_agent_rsp_fifo:out_startofpacket -> fifo_dummy_in_agent:rf_sink_startofpacket
	wire          fifo_dummy_in_agent_rsp_fifo_out_endofpacket;                                                  // fifo_dummy_in_agent_rsp_fifo:out_endofpacket -> fifo_dummy_in_agent:rf_sink_endofpacket
	wire          fifo_dummy_in_agent_rdata_fifo_src_valid;                                                      // fifo_dummy_in_agent:rdata_fifo_src_valid -> fifo_dummy_in_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy_in_agent_rdata_fifo_src_data;                                                       // fifo_dummy_in_agent:rdata_fifo_src_data -> fifo_dummy_in_agent_rdata_fifo:in_data
	wire          fifo_dummy_in_agent_rdata_fifo_src_ready;                                                      // fifo_dummy_in_agent_rdata_fifo:in_ready -> fifo_dummy_in_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy64_in_in_csr_agent_m0_readdata;                                                      // fifo_dummy64_in_in_csr_translator:uav_readdata -> fifo_dummy64_in_in_csr_agent:m0_readdata
	wire          fifo_dummy64_in_in_csr_agent_m0_waitrequest;                                                   // fifo_dummy64_in_in_csr_translator:uav_waitrequest -> fifo_dummy64_in_in_csr_agent:m0_waitrequest
	wire          fifo_dummy64_in_in_csr_agent_m0_debugaccess;                                                   // fifo_dummy64_in_in_csr_agent:m0_debugaccess -> fifo_dummy64_in_in_csr_translator:uav_debugaccess
	wire   [31:0] fifo_dummy64_in_in_csr_agent_m0_address;                                                       // fifo_dummy64_in_in_csr_agent:m0_address -> fifo_dummy64_in_in_csr_translator:uav_address
	wire    [3:0] fifo_dummy64_in_in_csr_agent_m0_byteenable;                                                    // fifo_dummy64_in_in_csr_agent:m0_byteenable -> fifo_dummy64_in_in_csr_translator:uav_byteenable
	wire          fifo_dummy64_in_in_csr_agent_m0_read;                                                          // fifo_dummy64_in_in_csr_agent:m0_read -> fifo_dummy64_in_in_csr_translator:uav_read
	wire          fifo_dummy64_in_in_csr_agent_m0_readdatavalid;                                                 // fifo_dummy64_in_in_csr_translator:uav_readdatavalid -> fifo_dummy64_in_in_csr_agent:m0_readdatavalid
	wire          fifo_dummy64_in_in_csr_agent_m0_lock;                                                          // fifo_dummy64_in_in_csr_agent:m0_lock -> fifo_dummy64_in_in_csr_translator:uav_lock
	wire   [31:0] fifo_dummy64_in_in_csr_agent_m0_writedata;                                                     // fifo_dummy64_in_in_csr_agent:m0_writedata -> fifo_dummy64_in_in_csr_translator:uav_writedata
	wire          fifo_dummy64_in_in_csr_agent_m0_write;                                                         // fifo_dummy64_in_in_csr_agent:m0_write -> fifo_dummy64_in_in_csr_translator:uav_write
	wire    [2:0] fifo_dummy64_in_in_csr_agent_m0_burstcount;                                                    // fifo_dummy64_in_in_csr_agent:m0_burstcount -> fifo_dummy64_in_in_csr_translator:uav_burstcount
	wire          fifo_dummy64_in_in_csr_agent_rf_source_valid;                                                  // fifo_dummy64_in_in_csr_agent:rf_source_valid -> fifo_dummy64_in_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy64_in_in_csr_agent_rf_source_data;                                                   // fifo_dummy64_in_in_csr_agent:rf_source_data -> fifo_dummy64_in_in_csr_agent_rsp_fifo:in_data
	wire          fifo_dummy64_in_in_csr_agent_rf_source_ready;                                                  // fifo_dummy64_in_in_csr_agent_rsp_fifo:in_ready -> fifo_dummy64_in_in_csr_agent:rf_source_ready
	wire          fifo_dummy64_in_in_csr_agent_rf_source_startofpacket;                                          // fifo_dummy64_in_in_csr_agent:rf_source_startofpacket -> fifo_dummy64_in_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy64_in_in_csr_agent_rf_source_endofpacket;                                            // fifo_dummy64_in_in_csr_agent:rf_source_endofpacket -> fifo_dummy64_in_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy64_in_in_csr_agent_rsp_fifo_out_valid;                                               // fifo_dummy64_in_in_csr_agent_rsp_fifo:out_valid -> fifo_dummy64_in_in_csr_agent:rf_sink_valid
	wire  [137:0] fifo_dummy64_in_in_csr_agent_rsp_fifo_out_data;                                                // fifo_dummy64_in_in_csr_agent_rsp_fifo:out_data -> fifo_dummy64_in_in_csr_agent:rf_sink_data
	wire          fifo_dummy64_in_in_csr_agent_rsp_fifo_out_ready;                                               // fifo_dummy64_in_in_csr_agent:rf_sink_ready -> fifo_dummy64_in_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_dummy64_in_in_csr_agent_rsp_fifo_out_startofpacket;                                       // fifo_dummy64_in_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_dummy64_in_in_csr_agent:rf_sink_startofpacket
	wire          fifo_dummy64_in_in_csr_agent_rsp_fifo_out_endofpacket;                                         // fifo_dummy64_in_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_dummy64_in_in_csr_agent:rf_sink_endofpacket
	wire          fifo_dummy64_in_in_csr_agent_rdata_fifo_src_valid;                                             // fifo_dummy64_in_in_csr_agent:rdata_fifo_src_valid -> fifo_dummy64_in_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy64_in_in_csr_agent_rdata_fifo_src_data;                                              // fifo_dummy64_in_in_csr_agent:rdata_fifo_src_data -> fifo_dummy64_in_in_csr_agent_rdata_fifo:in_data
	wire          fifo_dummy64_in_in_csr_agent_rdata_fifo_src_ready;                                             // fifo_dummy64_in_in_csr_agent_rdata_fifo:in_ready -> fifo_dummy64_in_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy64_out_in_csr_agent_m0_readdata;                                                     // fifo_dummy64_out_in_csr_translator:uav_readdata -> fifo_dummy64_out_in_csr_agent:m0_readdata
	wire          fifo_dummy64_out_in_csr_agent_m0_waitrequest;                                                  // fifo_dummy64_out_in_csr_translator:uav_waitrequest -> fifo_dummy64_out_in_csr_agent:m0_waitrequest
	wire          fifo_dummy64_out_in_csr_agent_m0_debugaccess;                                                  // fifo_dummy64_out_in_csr_agent:m0_debugaccess -> fifo_dummy64_out_in_csr_translator:uav_debugaccess
	wire   [31:0] fifo_dummy64_out_in_csr_agent_m0_address;                                                      // fifo_dummy64_out_in_csr_agent:m0_address -> fifo_dummy64_out_in_csr_translator:uav_address
	wire    [3:0] fifo_dummy64_out_in_csr_agent_m0_byteenable;                                                   // fifo_dummy64_out_in_csr_agent:m0_byteenable -> fifo_dummy64_out_in_csr_translator:uav_byteenable
	wire          fifo_dummy64_out_in_csr_agent_m0_read;                                                         // fifo_dummy64_out_in_csr_agent:m0_read -> fifo_dummy64_out_in_csr_translator:uav_read
	wire          fifo_dummy64_out_in_csr_agent_m0_readdatavalid;                                                // fifo_dummy64_out_in_csr_translator:uav_readdatavalid -> fifo_dummy64_out_in_csr_agent:m0_readdatavalid
	wire          fifo_dummy64_out_in_csr_agent_m0_lock;                                                         // fifo_dummy64_out_in_csr_agent:m0_lock -> fifo_dummy64_out_in_csr_translator:uav_lock
	wire   [31:0] fifo_dummy64_out_in_csr_agent_m0_writedata;                                                    // fifo_dummy64_out_in_csr_agent:m0_writedata -> fifo_dummy64_out_in_csr_translator:uav_writedata
	wire          fifo_dummy64_out_in_csr_agent_m0_write;                                                        // fifo_dummy64_out_in_csr_agent:m0_write -> fifo_dummy64_out_in_csr_translator:uav_write
	wire    [2:0] fifo_dummy64_out_in_csr_agent_m0_burstcount;                                                   // fifo_dummy64_out_in_csr_agent:m0_burstcount -> fifo_dummy64_out_in_csr_translator:uav_burstcount
	wire          fifo_dummy64_out_in_csr_agent_rf_source_valid;                                                 // fifo_dummy64_out_in_csr_agent:rf_source_valid -> fifo_dummy64_out_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy64_out_in_csr_agent_rf_source_data;                                                  // fifo_dummy64_out_in_csr_agent:rf_source_data -> fifo_dummy64_out_in_csr_agent_rsp_fifo:in_data
	wire          fifo_dummy64_out_in_csr_agent_rf_source_ready;                                                 // fifo_dummy64_out_in_csr_agent_rsp_fifo:in_ready -> fifo_dummy64_out_in_csr_agent:rf_source_ready
	wire          fifo_dummy64_out_in_csr_agent_rf_source_startofpacket;                                         // fifo_dummy64_out_in_csr_agent:rf_source_startofpacket -> fifo_dummy64_out_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy64_out_in_csr_agent_rf_source_endofpacket;                                           // fifo_dummy64_out_in_csr_agent:rf_source_endofpacket -> fifo_dummy64_out_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy64_out_in_csr_agent_rsp_fifo_out_valid;                                              // fifo_dummy64_out_in_csr_agent_rsp_fifo:out_valid -> fifo_dummy64_out_in_csr_agent:rf_sink_valid
	wire  [137:0] fifo_dummy64_out_in_csr_agent_rsp_fifo_out_data;                                               // fifo_dummy64_out_in_csr_agent_rsp_fifo:out_data -> fifo_dummy64_out_in_csr_agent:rf_sink_data
	wire          fifo_dummy64_out_in_csr_agent_rsp_fifo_out_ready;                                              // fifo_dummy64_out_in_csr_agent:rf_sink_ready -> fifo_dummy64_out_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_dummy64_out_in_csr_agent_rsp_fifo_out_startofpacket;                                      // fifo_dummy64_out_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_dummy64_out_in_csr_agent:rf_sink_startofpacket
	wire          fifo_dummy64_out_in_csr_agent_rsp_fifo_out_endofpacket;                                        // fifo_dummy64_out_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_dummy64_out_in_csr_agent:rf_sink_endofpacket
	wire          fifo_dummy64_out_in_csr_agent_rdata_fifo_src_valid;                                            // fifo_dummy64_out_in_csr_agent:rdata_fifo_src_valid -> fifo_dummy64_out_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy64_out_in_csr_agent_rdata_fifo_src_data;                                             // fifo_dummy64_out_in_csr_agent:rdata_fifo_src_data -> fifo_dummy64_out_in_csr_agent_rdata_fifo:in_data
	wire          fifo_dummy64_out_in_csr_agent_rdata_fifo_src_ready;                                            // fifo_dummy64_out_in_csr_agent_rdata_fifo:in_ready -> fifo_dummy64_out_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy_in_csr_agent_m0_readdata;                                                           // fifo_dummy_in_csr_translator:uav_readdata -> fifo_dummy_in_csr_agent:m0_readdata
	wire          fifo_dummy_in_csr_agent_m0_waitrequest;                                                        // fifo_dummy_in_csr_translator:uav_waitrequest -> fifo_dummy_in_csr_agent:m0_waitrequest
	wire          fifo_dummy_in_csr_agent_m0_debugaccess;                                                        // fifo_dummy_in_csr_agent:m0_debugaccess -> fifo_dummy_in_csr_translator:uav_debugaccess
	wire   [31:0] fifo_dummy_in_csr_agent_m0_address;                                                            // fifo_dummy_in_csr_agent:m0_address -> fifo_dummy_in_csr_translator:uav_address
	wire    [3:0] fifo_dummy_in_csr_agent_m0_byteenable;                                                         // fifo_dummy_in_csr_agent:m0_byteenable -> fifo_dummy_in_csr_translator:uav_byteenable
	wire          fifo_dummy_in_csr_agent_m0_read;                                                               // fifo_dummy_in_csr_agent:m0_read -> fifo_dummy_in_csr_translator:uav_read
	wire          fifo_dummy_in_csr_agent_m0_readdatavalid;                                                      // fifo_dummy_in_csr_translator:uav_readdatavalid -> fifo_dummy_in_csr_agent:m0_readdatavalid
	wire          fifo_dummy_in_csr_agent_m0_lock;                                                               // fifo_dummy_in_csr_agent:m0_lock -> fifo_dummy_in_csr_translator:uav_lock
	wire   [31:0] fifo_dummy_in_csr_agent_m0_writedata;                                                          // fifo_dummy_in_csr_agent:m0_writedata -> fifo_dummy_in_csr_translator:uav_writedata
	wire          fifo_dummy_in_csr_agent_m0_write;                                                              // fifo_dummy_in_csr_agent:m0_write -> fifo_dummy_in_csr_translator:uav_write
	wire    [2:0] fifo_dummy_in_csr_agent_m0_burstcount;                                                         // fifo_dummy_in_csr_agent:m0_burstcount -> fifo_dummy_in_csr_translator:uav_burstcount
	wire          fifo_dummy_in_csr_agent_rf_source_valid;                                                       // fifo_dummy_in_csr_agent:rf_source_valid -> fifo_dummy_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy_in_csr_agent_rf_source_data;                                                        // fifo_dummy_in_csr_agent:rf_source_data -> fifo_dummy_in_csr_agent_rsp_fifo:in_data
	wire          fifo_dummy_in_csr_agent_rf_source_ready;                                                       // fifo_dummy_in_csr_agent_rsp_fifo:in_ready -> fifo_dummy_in_csr_agent:rf_source_ready
	wire          fifo_dummy_in_csr_agent_rf_source_startofpacket;                                               // fifo_dummy_in_csr_agent:rf_source_startofpacket -> fifo_dummy_in_csr_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy_in_csr_agent_rf_source_endofpacket;                                                 // fifo_dummy_in_csr_agent:rf_source_endofpacket -> fifo_dummy_in_csr_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy_in_csr_agent_rsp_fifo_out_valid;                                                    // fifo_dummy_in_csr_agent_rsp_fifo:out_valid -> fifo_dummy_in_csr_agent:rf_sink_valid
	wire  [137:0] fifo_dummy_in_csr_agent_rsp_fifo_out_data;                                                     // fifo_dummy_in_csr_agent_rsp_fifo:out_data -> fifo_dummy_in_csr_agent:rf_sink_data
	wire          fifo_dummy_in_csr_agent_rsp_fifo_out_ready;                                                    // fifo_dummy_in_csr_agent:rf_sink_ready -> fifo_dummy_in_csr_agent_rsp_fifo:out_ready
	wire          fifo_dummy_in_csr_agent_rsp_fifo_out_startofpacket;                                            // fifo_dummy_in_csr_agent_rsp_fifo:out_startofpacket -> fifo_dummy_in_csr_agent:rf_sink_startofpacket
	wire          fifo_dummy_in_csr_agent_rsp_fifo_out_endofpacket;                                              // fifo_dummy_in_csr_agent_rsp_fifo:out_endofpacket -> fifo_dummy_in_csr_agent:rf_sink_endofpacket
	wire          fifo_dummy_in_csr_agent_rdata_fifo_src_valid;                                                  // fifo_dummy_in_csr_agent:rdata_fifo_src_valid -> fifo_dummy_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy_in_csr_agent_rdata_fifo_src_data;                                                   // fifo_dummy_in_csr_agent:rdata_fifo_src_data -> fifo_dummy_in_csr_agent_rdata_fifo:in_data
	wire          fifo_dummy_in_csr_agent_rdata_fifo_src_ready;                                                  // fifo_dummy_in_csr_agent_rdata_fifo:in_ready -> fifo_dummy_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy64_out_out_agent_m0_readdata;                                                        // fifo_dummy64_out_out_translator:uav_readdata -> fifo_dummy64_out_out_agent:m0_readdata
	wire          fifo_dummy64_out_out_agent_m0_waitrequest;                                                     // fifo_dummy64_out_out_translator:uav_waitrequest -> fifo_dummy64_out_out_agent:m0_waitrequest
	wire          fifo_dummy64_out_out_agent_m0_debugaccess;                                                     // fifo_dummy64_out_out_agent:m0_debugaccess -> fifo_dummy64_out_out_translator:uav_debugaccess
	wire   [31:0] fifo_dummy64_out_out_agent_m0_address;                                                         // fifo_dummy64_out_out_agent:m0_address -> fifo_dummy64_out_out_translator:uav_address
	wire    [3:0] fifo_dummy64_out_out_agent_m0_byteenable;                                                      // fifo_dummy64_out_out_agent:m0_byteenable -> fifo_dummy64_out_out_translator:uav_byteenable
	wire          fifo_dummy64_out_out_agent_m0_read;                                                            // fifo_dummy64_out_out_agent:m0_read -> fifo_dummy64_out_out_translator:uav_read
	wire          fifo_dummy64_out_out_agent_m0_readdatavalid;                                                   // fifo_dummy64_out_out_translator:uav_readdatavalid -> fifo_dummy64_out_out_agent:m0_readdatavalid
	wire          fifo_dummy64_out_out_agent_m0_lock;                                                            // fifo_dummy64_out_out_agent:m0_lock -> fifo_dummy64_out_out_translator:uav_lock
	wire   [31:0] fifo_dummy64_out_out_agent_m0_writedata;                                                       // fifo_dummy64_out_out_agent:m0_writedata -> fifo_dummy64_out_out_translator:uav_writedata
	wire          fifo_dummy64_out_out_agent_m0_write;                                                           // fifo_dummy64_out_out_agent:m0_write -> fifo_dummy64_out_out_translator:uav_write
	wire    [2:0] fifo_dummy64_out_out_agent_m0_burstcount;                                                      // fifo_dummy64_out_out_agent:m0_burstcount -> fifo_dummy64_out_out_translator:uav_burstcount
	wire          fifo_dummy64_out_out_agent_rf_source_valid;                                                    // fifo_dummy64_out_out_agent:rf_source_valid -> fifo_dummy64_out_out_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy64_out_out_agent_rf_source_data;                                                     // fifo_dummy64_out_out_agent:rf_source_data -> fifo_dummy64_out_out_agent_rsp_fifo:in_data
	wire          fifo_dummy64_out_out_agent_rf_source_ready;                                                    // fifo_dummy64_out_out_agent_rsp_fifo:in_ready -> fifo_dummy64_out_out_agent:rf_source_ready
	wire          fifo_dummy64_out_out_agent_rf_source_startofpacket;                                            // fifo_dummy64_out_out_agent:rf_source_startofpacket -> fifo_dummy64_out_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy64_out_out_agent_rf_source_endofpacket;                                              // fifo_dummy64_out_out_agent:rf_source_endofpacket -> fifo_dummy64_out_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy64_out_out_agent_rsp_fifo_out_valid;                                                 // fifo_dummy64_out_out_agent_rsp_fifo:out_valid -> fifo_dummy64_out_out_agent:rf_sink_valid
	wire  [137:0] fifo_dummy64_out_out_agent_rsp_fifo_out_data;                                                  // fifo_dummy64_out_out_agent_rsp_fifo:out_data -> fifo_dummy64_out_out_agent:rf_sink_data
	wire          fifo_dummy64_out_out_agent_rsp_fifo_out_ready;                                                 // fifo_dummy64_out_out_agent:rf_sink_ready -> fifo_dummy64_out_out_agent_rsp_fifo:out_ready
	wire          fifo_dummy64_out_out_agent_rsp_fifo_out_startofpacket;                                         // fifo_dummy64_out_out_agent_rsp_fifo:out_startofpacket -> fifo_dummy64_out_out_agent:rf_sink_startofpacket
	wire          fifo_dummy64_out_out_agent_rsp_fifo_out_endofpacket;                                           // fifo_dummy64_out_out_agent_rsp_fifo:out_endofpacket -> fifo_dummy64_out_out_agent:rf_sink_endofpacket
	wire          fifo_dummy64_out_out_agent_rdata_fifo_src_valid;                                               // fifo_dummy64_out_out_agent:rdata_fifo_src_valid -> fifo_dummy64_out_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy64_out_out_agent_rdata_fifo_src_data;                                                // fifo_dummy64_out_out_agent:rdata_fifo_src_data -> fifo_dummy64_out_out_agent_rdata_fifo:in_data
	wire          fifo_dummy64_out_out_agent_rdata_fifo_src_ready;                                               // fifo_dummy64_out_out_agent_rdata_fifo:in_ready -> fifo_dummy64_out_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_dummy_out_agent_m0_readdata;                                                              // fifo_dummy_out_translator:uav_readdata -> fifo_dummy_out_agent:m0_readdata
	wire          fifo_dummy_out_agent_m0_waitrequest;                                                           // fifo_dummy_out_translator:uav_waitrequest -> fifo_dummy_out_agent:m0_waitrequest
	wire          fifo_dummy_out_agent_m0_debugaccess;                                                           // fifo_dummy_out_agent:m0_debugaccess -> fifo_dummy_out_translator:uav_debugaccess
	wire   [31:0] fifo_dummy_out_agent_m0_address;                                                               // fifo_dummy_out_agent:m0_address -> fifo_dummy_out_translator:uav_address
	wire    [3:0] fifo_dummy_out_agent_m0_byteenable;                                                            // fifo_dummy_out_agent:m0_byteenable -> fifo_dummy_out_translator:uav_byteenable
	wire          fifo_dummy_out_agent_m0_read;                                                                  // fifo_dummy_out_agent:m0_read -> fifo_dummy_out_translator:uav_read
	wire          fifo_dummy_out_agent_m0_readdatavalid;                                                         // fifo_dummy_out_translator:uav_readdatavalid -> fifo_dummy_out_agent:m0_readdatavalid
	wire          fifo_dummy_out_agent_m0_lock;                                                                  // fifo_dummy_out_agent:m0_lock -> fifo_dummy_out_translator:uav_lock
	wire   [31:0] fifo_dummy_out_agent_m0_writedata;                                                             // fifo_dummy_out_agent:m0_writedata -> fifo_dummy_out_translator:uav_writedata
	wire          fifo_dummy_out_agent_m0_write;                                                                 // fifo_dummy_out_agent:m0_write -> fifo_dummy_out_translator:uav_write
	wire    [2:0] fifo_dummy_out_agent_m0_burstcount;                                                            // fifo_dummy_out_agent:m0_burstcount -> fifo_dummy_out_translator:uav_burstcount
	wire          fifo_dummy_out_agent_rf_source_valid;                                                          // fifo_dummy_out_agent:rf_source_valid -> fifo_dummy_out_agent_rsp_fifo:in_valid
	wire  [137:0] fifo_dummy_out_agent_rf_source_data;                                                           // fifo_dummy_out_agent:rf_source_data -> fifo_dummy_out_agent_rsp_fifo:in_data
	wire          fifo_dummy_out_agent_rf_source_ready;                                                          // fifo_dummy_out_agent_rsp_fifo:in_ready -> fifo_dummy_out_agent:rf_source_ready
	wire          fifo_dummy_out_agent_rf_source_startofpacket;                                                  // fifo_dummy_out_agent:rf_source_startofpacket -> fifo_dummy_out_agent_rsp_fifo:in_startofpacket
	wire          fifo_dummy_out_agent_rf_source_endofpacket;                                                    // fifo_dummy_out_agent:rf_source_endofpacket -> fifo_dummy_out_agent_rsp_fifo:in_endofpacket
	wire          fifo_dummy_out_agent_rsp_fifo_out_valid;                                                       // fifo_dummy_out_agent_rsp_fifo:out_valid -> fifo_dummy_out_agent:rf_sink_valid
	wire  [137:0] fifo_dummy_out_agent_rsp_fifo_out_data;                                                        // fifo_dummy_out_agent_rsp_fifo:out_data -> fifo_dummy_out_agent:rf_sink_data
	wire          fifo_dummy_out_agent_rsp_fifo_out_ready;                                                       // fifo_dummy_out_agent:rf_sink_ready -> fifo_dummy_out_agent_rsp_fifo:out_ready
	wire          fifo_dummy_out_agent_rsp_fifo_out_startofpacket;                                               // fifo_dummy_out_agent_rsp_fifo:out_startofpacket -> fifo_dummy_out_agent:rf_sink_startofpacket
	wire          fifo_dummy_out_agent_rsp_fifo_out_endofpacket;                                                 // fifo_dummy_out_agent_rsp_fifo:out_endofpacket -> fifo_dummy_out_agent:rf_sink_endofpacket
	wire          fifo_dummy_out_agent_rdata_fifo_src_valid;                                                     // fifo_dummy_out_agent:rdata_fifo_src_valid -> fifo_dummy_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_dummy_out_agent_rdata_fifo_src_data;                                                      // fifo_dummy_out_agent:rdata_fifo_src_data -> fifo_dummy_out_agent_rdata_fifo:in_data
	wire          fifo_dummy_out_agent_rdata_fifo_src_ready;                                                     // fifo_dummy_out_agent_rdata_fifo:in_ready -> fifo_dummy_out_agent:rdata_fifo_src_ready
	wire   [31:0] switches_s1_agent_m0_readdata;                                                                 // switches_s1_translator:uav_readdata -> switches_s1_agent:m0_readdata
	wire          switches_s1_agent_m0_waitrequest;                                                              // switches_s1_translator:uav_waitrequest -> switches_s1_agent:m0_waitrequest
	wire          switches_s1_agent_m0_debugaccess;                                                              // switches_s1_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire   [31:0] switches_s1_agent_m0_address;                                                                  // switches_s1_agent:m0_address -> switches_s1_translator:uav_address
	wire    [3:0] switches_s1_agent_m0_byteenable;                                                               // switches_s1_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire          switches_s1_agent_m0_read;                                                                     // switches_s1_agent:m0_read -> switches_s1_translator:uav_read
	wire          switches_s1_agent_m0_readdatavalid;                                                            // switches_s1_translator:uav_readdatavalid -> switches_s1_agent:m0_readdatavalid
	wire          switches_s1_agent_m0_lock;                                                                     // switches_s1_agent:m0_lock -> switches_s1_translator:uav_lock
	wire   [31:0] switches_s1_agent_m0_writedata;                                                                // switches_s1_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire          switches_s1_agent_m0_write;                                                                    // switches_s1_agent:m0_write -> switches_s1_translator:uav_write
	wire    [2:0] switches_s1_agent_m0_burstcount;                                                               // switches_s1_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire          switches_s1_agent_rf_source_valid;                                                             // switches_s1_agent:rf_source_valid -> switches_s1_agent_rsp_fifo:in_valid
	wire  [137:0] switches_s1_agent_rf_source_data;                                                              // switches_s1_agent:rf_source_data -> switches_s1_agent_rsp_fifo:in_data
	wire          switches_s1_agent_rf_source_ready;                                                             // switches_s1_agent_rsp_fifo:in_ready -> switches_s1_agent:rf_source_ready
	wire          switches_s1_agent_rf_source_startofpacket;                                                     // switches_s1_agent:rf_source_startofpacket -> switches_s1_agent_rsp_fifo:in_startofpacket
	wire          switches_s1_agent_rf_source_endofpacket;                                                       // switches_s1_agent:rf_source_endofpacket -> switches_s1_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_agent_rsp_fifo_out_valid;                                                          // switches_s1_agent_rsp_fifo:out_valid -> switches_s1_agent:rf_sink_valid
	wire  [137:0] switches_s1_agent_rsp_fifo_out_data;                                                           // switches_s1_agent_rsp_fifo:out_data -> switches_s1_agent:rf_sink_data
	wire          switches_s1_agent_rsp_fifo_out_ready;                                                          // switches_s1_agent:rf_sink_ready -> switches_s1_agent_rsp_fifo:out_ready
	wire          switches_s1_agent_rsp_fifo_out_startofpacket;                                                  // switches_s1_agent_rsp_fifo:out_startofpacket -> switches_s1_agent:rf_sink_startofpacket
	wire          switches_s1_agent_rsp_fifo_out_endofpacket;                                                    // switches_s1_agent_rsp_fifo:out_endofpacket -> switches_s1_agent:rf_sink_endofpacket
	wire          switches_s1_agent_rdata_fifo_src_valid;                                                        // switches_s1_agent:rdata_fifo_src_valid -> switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_src_data;                                                         // switches_s1_agent:rdata_fifo_src_data -> switches_s1_agent_rdata_fifo:in_data
	wire          switches_s1_agent_rdata_fifo_src_ready;                                                        // switches_s1_agent_rdata_fifo:in_ready -> switches_s1_agent:rdata_fifo_src_ready
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                    // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                 // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                 // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                     // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                  // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                        // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                               // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                        // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                   // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                       // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                  // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [119:0] sdram_s1_agent_rf_source_data;                                                                 // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                        // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                          // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                             // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [119:0] sdram_s1_agent_rsp_fifo_out_data;                                                              // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                             // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                     // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                       // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                           // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                            // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                           // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] adc_fifo_mem_out_agent_m0_readdata;                                                            // adc_fifo_mem_out_translator:uav_readdata -> adc_fifo_mem_out_agent:m0_readdata
	wire          adc_fifo_mem_out_agent_m0_waitrequest;                                                         // adc_fifo_mem_out_translator:uav_waitrequest -> adc_fifo_mem_out_agent:m0_waitrequest
	wire          adc_fifo_mem_out_agent_m0_debugaccess;                                                         // adc_fifo_mem_out_agent:m0_debugaccess -> adc_fifo_mem_out_translator:uav_debugaccess
	wire   [31:0] adc_fifo_mem_out_agent_m0_address;                                                             // adc_fifo_mem_out_agent:m0_address -> adc_fifo_mem_out_translator:uav_address
	wire    [3:0] adc_fifo_mem_out_agent_m0_byteenable;                                                          // adc_fifo_mem_out_agent:m0_byteenable -> adc_fifo_mem_out_translator:uav_byteenable
	wire          adc_fifo_mem_out_agent_m0_read;                                                                // adc_fifo_mem_out_agent:m0_read -> adc_fifo_mem_out_translator:uav_read
	wire          adc_fifo_mem_out_agent_m0_readdatavalid;                                                       // adc_fifo_mem_out_translator:uav_readdatavalid -> adc_fifo_mem_out_agent:m0_readdatavalid
	wire          adc_fifo_mem_out_agent_m0_lock;                                                                // adc_fifo_mem_out_agent:m0_lock -> adc_fifo_mem_out_translator:uav_lock
	wire   [31:0] adc_fifo_mem_out_agent_m0_writedata;                                                           // adc_fifo_mem_out_agent:m0_writedata -> adc_fifo_mem_out_translator:uav_writedata
	wire          adc_fifo_mem_out_agent_m0_write;                                                               // adc_fifo_mem_out_agent:m0_write -> adc_fifo_mem_out_translator:uav_write
	wire    [2:0] adc_fifo_mem_out_agent_m0_burstcount;                                                          // adc_fifo_mem_out_agent:m0_burstcount -> adc_fifo_mem_out_translator:uav_burstcount
	wire          adc_fifo_mem_out_agent_rf_source_valid;                                                        // adc_fifo_mem_out_agent:rf_source_valid -> adc_fifo_mem_out_agent_rsp_fifo:in_valid
	wire  [137:0] adc_fifo_mem_out_agent_rf_source_data;                                                         // adc_fifo_mem_out_agent:rf_source_data -> adc_fifo_mem_out_agent_rsp_fifo:in_data
	wire          adc_fifo_mem_out_agent_rf_source_ready;                                                        // adc_fifo_mem_out_agent_rsp_fifo:in_ready -> adc_fifo_mem_out_agent:rf_source_ready
	wire          adc_fifo_mem_out_agent_rf_source_startofpacket;                                                // adc_fifo_mem_out_agent:rf_source_startofpacket -> adc_fifo_mem_out_agent_rsp_fifo:in_startofpacket
	wire          adc_fifo_mem_out_agent_rf_source_endofpacket;                                                  // adc_fifo_mem_out_agent:rf_source_endofpacket -> adc_fifo_mem_out_agent_rsp_fifo:in_endofpacket
	wire          adc_fifo_mem_out_agent_rsp_fifo_out_valid;                                                     // adc_fifo_mem_out_agent_rsp_fifo:out_valid -> adc_fifo_mem_out_agent:rf_sink_valid
	wire  [137:0] adc_fifo_mem_out_agent_rsp_fifo_out_data;                                                      // adc_fifo_mem_out_agent_rsp_fifo:out_data -> adc_fifo_mem_out_agent:rf_sink_data
	wire          adc_fifo_mem_out_agent_rsp_fifo_out_ready;                                                     // adc_fifo_mem_out_agent:rf_sink_ready -> adc_fifo_mem_out_agent_rsp_fifo:out_ready
	wire          adc_fifo_mem_out_agent_rsp_fifo_out_startofpacket;                                             // adc_fifo_mem_out_agent_rsp_fifo:out_startofpacket -> adc_fifo_mem_out_agent:rf_sink_startofpacket
	wire          adc_fifo_mem_out_agent_rsp_fifo_out_endofpacket;                                               // adc_fifo_mem_out_agent_rsp_fifo:out_endofpacket -> adc_fifo_mem_out_agent:rf_sink_endofpacket
	wire          adc_fifo_mem_out_agent_rdata_fifo_src_valid;                                                   // adc_fifo_mem_out_agent:rdata_fifo_src_valid -> adc_fifo_mem_out_agent_rdata_fifo:in_valid
	wire   [33:0] adc_fifo_mem_out_agent_rdata_fifo_src_data;                                                    // adc_fifo_mem_out_agent:rdata_fifo_src_data -> adc_fifo_mem_out_agent_rdata_fifo:in_data
	wire          adc_fifo_mem_out_agent_rdata_fifo_src_ready;                                                   // adc_fifo_mem_out_agent_rdata_fifo:in_ready -> adc_fifo_mem_out_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_adc_val_sub_s1_agent_m0_readdata;                                               // nmr_parameters_adc_val_sub_s1_translator:uav_readdata -> nmr_parameters_adc_val_sub_s1_agent:m0_readdata
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_waitrequest;                                            // nmr_parameters_adc_val_sub_s1_translator:uav_waitrequest -> nmr_parameters_adc_val_sub_s1_agent:m0_waitrequest
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_debugaccess;                                            // nmr_parameters_adc_val_sub_s1_agent:m0_debugaccess -> nmr_parameters_adc_val_sub_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_adc_val_sub_s1_agent_m0_address;                                                // nmr_parameters_adc_val_sub_s1_agent:m0_address -> nmr_parameters_adc_val_sub_s1_translator:uav_address
	wire    [3:0] nmr_parameters_adc_val_sub_s1_agent_m0_byteenable;                                             // nmr_parameters_adc_val_sub_s1_agent:m0_byteenable -> nmr_parameters_adc_val_sub_s1_translator:uav_byteenable
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_read;                                                   // nmr_parameters_adc_val_sub_s1_agent:m0_read -> nmr_parameters_adc_val_sub_s1_translator:uav_read
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_readdatavalid;                                          // nmr_parameters_adc_val_sub_s1_translator:uav_readdatavalid -> nmr_parameters_adc_val_sub_s1_agent:m0_readdatavalid
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_lock;                                                   // nmr_parameters_adc_val_sub_s1_agent:m0_lock -> nmr_parameters_adc_val_sub_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_adc_val_sub_s1_agent_m0_writedata;                                              // nmr_parameters_adc_val_sub_s1_agent:m0_writedata -> nmr_parameters_adc_val_sub_s1_translator:uav_writedata
	wire          nmr_parameters_adc_val_sub_s1_agent_m0_write;                                                  // nmr_parameters_adc_val_sub_s1_agent:m0_write -> nmr_parameters_adc_val_sub_s1_translator:uav_write
	wire    [2:0] nmr_parameters_adc_val_sub_s1_agent_m0_burstcount;                                             // nmr_parameters_adc_val_sub_s1_agent:m0_burstcount -> nmr_parameters_adc_val_sub_s1_translator:uav_burstcount
	wire          nmr_parameters_adc_val_sub_s1_agent_rf_source_valid;                                           // nmr_parameters_adc_val_sub_s1_agent:rf_source_valid -> nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_adc_val_sub_s1_agent_rf_source_data;                                            // nmr_parameters_adc_val_sub_s1_agent:rf_source_data -> nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_adc_val_sub_s1_agent_rf_source_ready;                                           // nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:in_ready -> nmr_parameters_adc_val_sub_s1_agent:rf_source_ready
	wire          nmr_parameters_adc_val_sub_s1_agent_rf_source_startofpacket;                                   // nmr_parameters_adc_val_sub_s1_agent:rf_source_startofpacket -> nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rf_source_endofpacket;                                     // nmr_parameters_adc_val_sub_s1_agent:rf_source_endofpacket -> nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_valid;                                        // nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:out_valid -> nmr_parameters_adc_val_sub_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_data;                                         // nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:out_data -> nmr_parameters_adc_val_sub_s1_agent:rf_sink_data
	wire          nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_ready;                                        // nmr_parameters_adc_val_sub_s1_agent:rf_sink_ready -> nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_startofpacket;                                // nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_adc_val_sub_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_endofpacket;                                  // nmr_parameters_adc_val_sub_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_adc_val_sub_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_valid;                                      // nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_src_valid -> nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_data;                                       // nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_src_data -> nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_ready;                                      // nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:in_ready -> nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                 // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                              // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                              // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                  // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                               // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                     // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                            // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                     // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                    // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                               // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                             // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [137:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                              // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                     // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                       // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                          // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [137:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                           // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                          // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                    // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                        // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                        // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [15:0] dconv_fir_avalon_mm_slave_agent_m0_readdata;                                                   // dconv_fir_avalon_mm_slave_translator:uav_readdata -> dconv_fir_avalon_mm_slave_agent:m0_readdata
	wire          dconv_fir_avalon_mm_slave_agent_m0_waitrequest;                                                // dconv_fir_avalon_mm_slave_translator:uav_waitrequest -> dconv_fir_avalon_mm_slave_agent:m0_waitrequest
	wire          dconv_fir_avalon_mm_slave_agent_m0_debugaccess;                                                // dconv_fir_avalon_mm_slave_agent:m0_debugaccess -> dconv_fir_avalon_mm_slave_translator:uav_debugaccess
	wire   [31:0] dconv_fir_avalon_mm_slave_agent_m0_address;                                                    // dconv_fir_avalon_mm_slave_agent:m0_address -> dconv_fir_avalon_mm_slave_translator:uav_address
	wire    [1:0] dconv_fir_avalon_mm_slave_agent_m0_byteenable;                                                 // dconv_fir_avalon_mm_slave_agent:m0_byteenable -> dconv_fir_avalon_mm_slave_translator:uav_byteenable
	wire          dconv_fir_avalon_mm_slave_agent_m0_read;                                                       // dconv_fir_avalon_mm_slave_agent:m0_read -> dconv_fir_avalon_mm_slave_translator:uav_read
	wire          dconv_fir_avalon_mm_slave_agent_m0_readdatavalid;                                              // dconv_fir_avalon_mm_slave_translator:uav_readdatavalid -> dconv_fir_avalon_mm_slave_agent:m0_readdatavalid
	wire          dconv_fir_avalon_mm_slave_agent_m0_lock;                                                       // dconv_fir_avalon_mm_slave_agent:m0_lock -> dconv_fir_avalon_mm_slave_translator:uav_lock
	wire   [15:0] dconv_fir_avalon_mm_slave_agent_m0_writedata;                                                  // dconv_fir_avalon_mm_slave_agent:m0_writedata -> dconv_fir_avalon_mm_slave_translator:uav_writedata
	wire          dconv_fir_avalon_mm_slave_agent_m0_write;                                                      // dconv_fir_avalon_mm_slave_agent:m0_write -> dconv_fir_avalon_mm_slave_translator:uav_write
	wire    [1:0] dconv_fir_avalon_mm_slave_agent_m0_burstcount;                                                 // dconv_fir_avalon_mm_slave_agent:m0_burstcount -> dconv_fir_avalon_mm_slave_translator:uav_burstcount
	wire          dconv_fir_avalon_mm_slave_agent_rf_source_valid;                                               // dconv_fir_avalon_mm_slave_agent:rf_source_valid -> dconv_fir_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [119:0] dconv_fir_avalon_mm_slave_agent_rf_source_data;                                                // dconv_fir_avalon_mm_slave_agent:rf_source_data -> dconv_fir_avalon_mm_slave_agent_rsp_fifo:in_data
	wire          dconv_fir_avalon_mm_slave_agent_rf_source_ready;                                               // dconv_fir_avalon_mm_slave_agent_rsp_fifo:in_ready -> dconv_fir_avalon_mm_slave_agent:rf_source_ready
	wire          dconv_fir_avalon_mm_slave_agent_rf_source_startofpacket;                                       // dconv_fir_avalon_mm_slave_agent:rf_source_startofpacket -> dconv_fir_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rf_source_endofpacket;                                         // dconv_fir_avalon_mm_slave_agent:rf_source_endofpacket -> dconv_fir_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_valid;                                            // dconv_fir_avalon_mm_slave_agent_rsp_fifo:out_valid -> dconv_fir_avalon_mm_slave_agent:rf_sink_valid
	wire  [119:0] dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_data;                                             // dconv_fir_avalon_mm_slave_agent_rsp_fifo:out_data -> dconv_fir_avalon_mm_slave_agent:rf_sink_data
	wire          dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_ready;                                            // dconv_fir_avalon_mm_slave_agent:rf_sink_ready -> dconv_fir_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire          dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                                    // dconv_fir_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> dconv_fir_avalon_mm_slave_agent:rf_sink_startofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                                      // dconv_fir_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> dconv_fir_avalon_mm_slave_agent:rf_sink_endofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_valid;                                          // dconv_fir_avalon_mm_slave_agent:rdata_fifo_src_valid -> dconv_fir_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire   [17:0] dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_data;                                           // dconv_fir_avalon_mm_slave_agent:rdata_fifo_src_data -> dconv_fir_avalon_mm_slave_agent_rdata_fifo:in_data
	wire          dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_ready;                                          // dconv_fir_avalon_mm_slave_agent_rdata_fifo:in_ready -> dconv_fir_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire   [15:0] dconv_fir_q_avalon_mm_slave_agent_m0_readdata;                                                 // dconv_fir_q_avalon_mm_slave_translator:uav_readdata -> dconv_fir_q_avalon_mm_slave_agent:m0_readdata
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_waitrequest;                                              // dconv_fir_q_avalon_mm_slave_translator:uav_waitrequest -> dconv_fir_q_avalon_mm_slave_agent:m0_waitrequest
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_debugaccess;                                              // dconv_fir_q_avalon_mm_slave_agent:m0_debugaccess -> dconv_fir_q_avalon_mm_slave_translator:uav_debugaccess
	wire   [31:0] dconv_fir_q_avalon_mm_slave_agent_m0_address;                                                  // dconv_fir_q_avalon_mm_slave_agent:m0_address -> dconv_fir_q_avalon_mm_slave_translator:uav_address
	wire    [1:0] dconv_fir_q_avalon_mm_slave_agent_m0_byteenable;                                               // dconv_fir_q_avalon_mm_slave_agent:m0_byteenable -> dconv_fir_q_avalon_mm_slave_translator:uav_byteenable
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_read;                                                     // dconv_fir_q_avalon_mm_slave_agent:m0_read -> dconv_fir_q_avalon_mm_slave_translator:uav_read
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_readdatavalid;                                            // dconv_fir_q_avalon_mm_slave_translator:uav_readdatavalid -> dconv_fir_q_avalon_mm_slave_agent:m0_readdatavalid
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_lock;                                                     // dconv_fir_q_avalon_mm_slave_agent:m0_lock -> dconv_fir_q_avalon_mm_slave_translator:uav_lock
	wire   [15:0] dconv_fir_q_avalon_mm_slave_agent_m0_writedata;                                                // dconv_fir_q_avalon_mm_slave_agent:m0_writedata -> dconv_fir_q_avalon_mm_slave_translator:uav_writedata
	wire          dconv_fir_q_avalon_mm_slave_agent_m0_write;                                                    // dconv_fir_q_avalon_mm_slave_agent:m0_write -> dconv_fir_q_avalon_mm_slave_translator:uav_write
	wire    [1:0] dconv_fir_q_avalon_mm_slave_agent_m0_burstcount;                                               // dconv_fir_q_avalon_mm_slave_agent:m0_burstcount -> dconv_fir_q_avalon_mm_slave_translator:uav_burstcount
	wire          dconv_fir_q_avalon_mm_slave_agent_rf_source_valid;                                             // dconv_fir_q_avalon_mm_slave_agent:rf_source_valid -> dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [119:0] dconv_fir_q_avalon_mm_slave_agent_rf_source_data;                                              // dconv_fir_q_avalon_mm_slave_agent:rf_source_data -> dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:in_data
	wire          dconv_fir_q_avalon_mm_slave_agent_rf_source_ready;                                             // dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:in_ready -> dconv_fir_q_avalon_mm_slave_agent:rf_source_ready
	wire          dconv_fir_q_avalon_mm_slave_agent_rf_source_startofpacket;                                     // dconv_fir_q_avalon_mm_slave_agent:rf_source_startofpacket -> dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rf_source_endofpacket;                                       // dconv_fir_q_avalon_mm_slave_agent:rf_source_endofpacket -> dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_valid;                                          // dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:out_valid -> dconv_fir_q_avalon_mm_slave_agent:rf_sink_valid
	wire  [119:0] dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_data;                                           // dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:out_data -> dconv_fir_q_avalon_mm_slave_agent:rf_sink_data
	wire          dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_ready;                                          // dconv_fir_q_avalon_mm_slave_agent:rf_sink_ready -> dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire          dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                                  // dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> dconv_fir_q_avalon_mm_slave_agent:rf_sink_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                                    // dconv_fir_q_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> dconv_fir_q_avalon_mm_slave_agent:rf_sink_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_valid;                                        // dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_src_valid -> dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire   [17:0] dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_data;                                         // dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_src_data -> dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:in_data
	wire          dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_ready;                                        // dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:in_ready -> dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire   [31:0] alt_vip_vfr_vga_avalon_slave_agent_m0_readdata;                                                // alt_vip_vfr_vga_avalon_slave_translator:uav_readdata -> alt_vip_vfr_vga_avalon_slave_agent:m0_readdata
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest;                                             // alt_vip_vfr_vga_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_vga_avalon_slave_agent:m0_waitrequest
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess;                                             // alt_vip_vfr_vga_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_vga_avalon_slave_translator:uav_debugaccess
	wire   [31:0] alt_vip_vfr_vga_avalon_slave_agent_m0_address;                                                 // alt_vip_vfr_vga_avalon_slave_agent:m0_address -> alt_vip_vfr_vga_avalon_slave_translator:uav_address
	wire    [3:0] alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable;                                              // alt_vip_vfr_vga_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_vga_avalon_slave_translator:uav_byteenable
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_read;                                                    // alt_vip_vfr_vga_avalon_slave_agent:m0_read -> alt_vip_vfr_vga_avalon_slave_translator:uav_read
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid;                                           // alt_vip_vfr_vga_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_vga_avalon_slave_agent:m0_readdatavalid
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_lock;                                                    // alt_vip_vfr_vga_avalon_slave_agent:m0_lock -> alt_vip_vfr_vga_avalon_slave_translator:uav_lock
	wire   [31:0] alt_vip_vfr_vga_avalon_slave_agent_m0_writedata;                                               // alt_vip_vfr_vga_avalon_slave_agent:m0_writedata -> alt_vip_vfr_vga_avalon_slave_translator:uav_writedata
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_write;                                                   // alt_vip_vfr_vga_avalon_slave_agent:m0_write -> alt_vip_vfr_vga_avalon_slave_translator:uav_write
	wire    [2:0] alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount;                                              // alt_vip_vfr_vga_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_vga_avalon_slave_translator:uav_burstcount
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid;                                            // alt_vip_vfr_vga_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_valid
	wire  [137:0] alt_vip_vfr_vga_avalon_slave_agent_rf_source_data;                                             // alt_vip_vfr_vga_avalon_slave_agent:rf_source_data -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready;                                            // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_vga_avalon_slave_agent:rf_source_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket;                                    // alt_vip_vfr_vga_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket;                                      // alt_vip_vfr_vga_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid;                                         // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_valid
	wire  [137:0] alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data;                                          // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready;                                         // alt_vip_vfr_vga_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket;                                 // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket;                                   // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid;                                       // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_valid -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data;                                        // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_data -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready;                                       // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_ready -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                                    // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                                 // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                                 // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                                     // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                                  // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                                        // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                               // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                                        // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                                   // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                                       // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                                  // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                                // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] sysid_qsys_control_slave_agent_rf_source_data;                                                 // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                                // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                                        // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                                          // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                             // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [137:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                              // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                             // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                                     // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                                       // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                           // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                            // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                           // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_int_csr_agent_m0_readdata;                                                                 // i2c_int_csr_translator:uav_readdata -> i2c_int_csr_agent:m0_readdata
	wire          i2c_int_csr_agent_m0_waitrequest;                                                              // i2c_int_csr_translator:uav_waitrequest -> i2c_int_csr_agent:m0_waitrequest
	wire          i2c_int_csr_agent_m0_debugaccess;                                                              // i2c_int_csr_agent:m0_debugaccess -> i2c_int_csr_translator:uav_debugaccess
	wire   [31:0] i2c_int_csr_agent_m0_address;                                                                  // i2c_int_csr_agent:m0_address -> i2c_int_csr_translator:uav_address
	wire    [3:0] i2c_int_csr_agent_m0_byteenable;                                                               // i2c_int_csr_agent:m0_byteenable -> i2c_int_csr_translator:uav_byteenable
	wire          i2c_int_csr_agent_m0_read;                                                                     // i2c_int_csr_agent:m0_read -> i2c_int_csr_translator:uav_read
	wire          i2c_int_csr_agent_m0_readdatavalid;                                                            // i2c_int_csr_translator:uav_readdatavalid -> i2c_int_csr_agent:m0_readdatavalid
	wire          i2c_int_csr_agent_m0_lock;                                                                     // i2c_int_csr_agent:m0_lock -> i2c_int_csr_translator:uav_lock
	wire   [31:0] i2c_int_csr_agent_m0_writedata;                                                                // i2c_int_csr_agent:m0_writedata -> i2c_int_csr_translator:uav_writedata
	wire          i2c_int_csr_agent_m0_write;                                                                    // i2c_int_csr_agent:m0_write -> i2c_int_csr_translator:uav_write
	wire    [2:0] i2c_int_csr_agent_m0_burstcount;                                                               // i2c_int_csr_agent:m0_burstcount -> i2c_int_csr_translator:uav_burstcount
	wire          i2c_int_csr_agent_rf_source_valid;                                                             // i2c_int_csr_agent:rf_source_valid -> i2c_int_csr_agent_rsp_fifo:in_valid
	wire  [137:0] i2c_int_csr_agent_rf_source_data;                                                              // i2c_int_csr_agent:rf_source_data -> i2c_int_csr_agent_rsp_fifo:in_data
	wire          i2c_int_csr_agent_rf_source_ready;                                                             // i2c_int_csr_agent_rsp_fifo:in_ready -> i2c_int_csr_agent:rf_source_ready
	wire          i2c_int_csr_agent_rf_source_startofpacket;                                                     // i2c_int_csr_agent:rf_source_startofpacket -> i2c_int_csr_agent_rsp_fifo:in_startofpacket
	wire          i2c_int_csr_agent_rf_source_endofpacket;                                                       // i2c_int_csr_agent:rf_source_endofpacket -> i2c_int_csr_agent_rsp_fifo:in_endofpacket
	wire          i2c_int_csr_agent_rsp_fifo_out_valid;                                                          // i2c_int_csr_agent_rsp_fifo:out_valid -> i2c_int_csr_agent:rf_sink_valid
	wire  [137:0] i2c_int_csr_agent_rsp_fifo_out_data;                                                           // i2c_int_csr_agent_rsp_fifo:out_data -> i2c_int_csr_agent:rf_sink_data
	wire          i2c_int_csr_agent_rsp_fifo_out_ready;                                                          // i2c_int_csr_agent:rf_sink_ready -> i2c_int_csr_agent_rsp_fifo:out_ready
	wire          i2c_int_csr_agent_rsp_fifo_out_startofpacket;                                                  // i2c_int_csr_agent_rsp_fifo:out_startofpacket -> i2c_int_csr_agent:rf_sink_startofpacket
	wire          i2c_int_csr_agent_rsp_fifo_out_endofpacket;                                                    // i2c_int_csr_agent_rsp_fifo:out_endofpacket -> i2c_int_csr_agent:rf_sink_endofpacket
	wire          i2c_int_csr_agent_rdata_fifo_src_valid;                                                        // i2c_int_csr_agent:rdata_fifo_src_valid -> i2c_int_csr_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_int_csr_agent_rdata_fifo_src_data;                                                         // i2c_int_csr_agent:rdata_fifo_src_data -> i2c_int_csr_agent_rdata_fifo:in_data
	wire          i2c_int_csr_agent_rdata_fifo_src_ready;                                                        // i2c_int_csr_agent_rdata_fifo:in_ready -> i2c_int_csr_agent:rdata_fifo_src_ready
	wire   [31:0] i2c_ext_csr_agent_m0_readdata;                                                                 // i2c_ext_csr_translator:uav_readdata -> i2c_ext_csr_agent:m0_readdata
	wire          i2c_ext_csr_agent_m0_waitrequest;                                                              // i2c_ext_csr_translator:uav_waitrequest -> i2c_ext_csr_agent:m0_waitrequest
	wire          i2c_ext_csr_agent_m0_debugaccess;                                                              // i2c_ext_csr_agent:m0_debugaccess -> i2c_ext_csr_translator:uav_debugaccess
	wire   [31:0] i2c_ext_csr_agent_m0_address;                                                                  // i2c_ext_csr_agent:m0_address -> i2c_ext_csr_translator:uav_address
	wire    [3:0] i2c_ext_csr_agent_m0_byteenable;                                                               // i2c_ext_csr_agent:m0_byteenable -> i2c_ext_csr_translator:uav_byteenable
	wire          i2c_ext_csr_agent_m0_read;                                                                     // i2c_ext_csr_agent:m0_read -> i2c_ext_csr_translator:uav_read
	wire          i2c_ext_csr_agent_m0_readdatavalid;                                                            // i2c_ext_csr_translator:uav_readdatavalid -> i2c_ext_csr_agent:m0_readdatavalid
	wire          i2c_ext_csr_agent_m0_lock;                                                                     // i2c_ext_csr_agent:m0_lock -> i2c_ext_csr_translator:uav_lock
	wire   [31:0] i2c_ext_csr_agent_m0_writedata;                                                                // i2c_ext_csr_agent:m0_writedata -> i2c_ext_csr_translator:uav_writedata
	wire          i2c_ext_csr_agent_m0_write;                                                                    // i2c_ext_csr_agent:m0_write -> i2c_ext_csr_translator:uav_write
	wire    [2:0] i2c_ext_csr_agent_m0_burstcount;                                                               // i2c_ext_csr_agent:m0_burstcount -> i2c_ext_csr_translator:uav_burstcount
	wire          i2c_ext_csr_agent_rf_source_valid;                                                             // i2c_ext_csr_agent:rf_source_valid -> i2c_ext_csr_agent_rsp_fifo:in_valid
	wire  [137:0] i2c_ext_csr_agent_rf_source_data;                                                              // i2c_ext_csr_agent:rf_source_data -> i2c_ext_csr_agent_rsp_fifo:in_data
	wire          i2c_ext_csr_agent_rf_source_ready;                                                             // i2c_ext_csr_agent_rsp_fifo:in_ready -> i2c_ext_csr_agent:rf_source_ready
	wire          i2c_ext_csr_agent_rf_source_startofpacket;                                                     // i2c_ext_csr_agent:rf_source_startofpacket -> i2c_ext_csr_agent_rsp_fifo:in_startofpacket
	wire          i2c_ext_csr_agent_rf_source_endofpacket;                                                       // i2c_ext_csr_agent:rf_source_endofpacket -> i2c_ext_csr_agent_rsp_fifo:in_endofpacket
	wire          i2c_ext_csr_agent_rsp_fifo_out_valid;                                                          // i2c_ext_csr_agent_rsp_fifo:out_valid -> i2c_ext_csr_agent:rf_sink_valid
	wire  [137:0] i2c_ext_csr_agent_rsp_fifo_out_data;                                                           // i2c_ext_csr_agent_rsp_fifo:out_data -> i2c_ext_csr_agent:rf_sink_data
	wire          i2c_ext_csr_agent_rsp_fifo_out_ready;                                                          // i2c_ext_csr_agent:rf_sink_ready -> i2c_ext_csr_agent_rsp_fifo:out_ready
	wire          i2c_ext_csr_agent_rsp_fifo_out_startofpacket;                                                  // i2c_ext_csr_agent_rsp_fifo:out_startofpacket -> i2c_ext_csr_agent:rf_sink_startofpacket
	wire          i2c_ext_csr_agent_rsp_fifo_out_endofpacket;                                                    // i2c_ext_csr_agent_rsp_fifo:out_endofpacket -> i2c_ext_csr_agent:rf_sink_endofpacket
	wire          i2c_ext_csr_agent_rdata_fifo_src_valid;                                                        // i2c_ext_csr_agent:rdata_fifo_src_valid -> i2c_ext_csr_agent_rdata_fifo:in_valid
	wire   [33:0] i2c_ext_csr_agent_rdata_fifo_src_data;                                                         // i2c_ext_csr_agent:rdata_fifo_src_data -> i2c_ext_csr_agent_rdata_fifo:in_data
	wire          i2c_ext_csr_agent_rdata_fifo_src_ready;                                                        // i2c_ext_csr_agent_rdata_fifo:in_ready -> i2c_ext_csr_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_delay_nosig_s1_agent_m0_readdata;                                               // nmr_parameters_delay_nosig_s1_translator:uav_readdata -> nmr_parameters_delay_nosig_s1_agent:m0_readdata
	wire          nmr_parameters_delay_nosig_s1_agent_m0_waitrequest;                                            // nmr_parameters_delay_nosig_s1_translator:uav_waitrequest -> nmr_parameters_delay_nosig_s1_agent:m0_waitrequest
	wire          nmr_parameters_delay_nosig_s1_agent_m0_debugaccess;                                            // nmr_parameters_delay_nosig_s1_agent:m0_debugaccess -> nmr_parameters_delay_nosig_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_delay_nosig_s1_agent_m0_address;                                                // nmr_parameters_delay_nosig_s1_agent:m0_address -> nmr_parameters_delay_nosig_s1_translator:uav_address
	wire    [3:0] nmr_parameters_delay_nosig_s1_agent_m0_byteenable;                                             // nmr_parameters_delay_nosig_s1_agent:m0_byteenable -> nmr_parameters_delay_nosig_s1_translator:uav_byteenable
	wire          nmr_parameters_delay_nosig_s1_agent_m0_read;                                                   // nmr_parameters_delay_nosig_s1_agent:m0_read -> nmr_parameters_delay_nosig_s1_translator:uav_read
	wire          nmr_parameters_delay_nosig_s1_agent_m0_readdatavalid;                                          // nmr_parameters_delay_nosig_s1_translator:uav_readdatavalid -> nmr_parameters_delay_nosig_s1_agent:m0_readdatavalid
	wire          nmr_parameters_delay_nosig_s1_agent_m0_lock;                                                   // nmr_parameters_delay_nosig_s1_agent:m0_lock -> nmr_parameters_delay_nosig_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_delay_nosig_s1_agent_m0_writedata;                                              // nmr_parameters_delay_nosig_s1_agent:m0_writedata -> nmr_parameters_delay_nosig_s1_translator:uav_writedata
	wire          nmr_parameters_delay_nosig_s1_agent_m0_write;                                                  // nmr_parameters_delay_nosig_s1_agent:m0_write -> nmr_parameters_delay_nosig_s1_translator:uav_write
	wire    [2:0] nmr_parameters_delay_nosig_s1_agent_m0_burstcount;                                             // nmr_parameters_delay_nosig_s1_agent:m0_burstcount -> nmr_parameters_delay_nosig_s1_translator:uav_burstcount
	wire          nmr_parameters_delay_nosig_s1_agent_rf_source_valid;                                           // nmr_parameters_delay_nosig_s1_agent:rf_source_valid -> nmr_parameters_delay_nosig_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_delay_nosig_s1_agent_rf_source_data;                                            // nmr_parameters_delay_nosig_s1_agent:rf_source_data -> nmr_parameters_delay_nosig_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_delay_nosig_s1_agent_rf_source_ready;                                           // nmr_parameters_delay_nosig_s1_agent_rsp_fifo:in_ready -> nmr_parameters_delay_nosig_s1_agent:rf_source_ready
	wire          nmr_parameters_delay_nosig_s1_agent_rf_source_startofpacket;                                   // nmr_parameters_delay_nosig_s1_agent:rf_source_startofpacket -> nmr_parameters_delay_nosig_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rf_source_endofpacket;                                     // nmr_parameters_delay_nosig_s1_agent:rf_source_endofpacket -> nmr_parameters_delay_nosig_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_valid;                                        // nmr_parameters_delay_nosig_s1_agent_rsp_fifo:out_valid -> nmr_parameters_delay_nosig_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_data;                                         // nmr_parameters_delay_nosig_s1_agent_rsp_fifo:out_data -> nmr_parameters_delay_nosig_s1_agent:rf_sink_data
	wire          nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_ready;                                        // nmr_parameters_delay_nosig_s1_agent:rf_sink_ready -> nmr_parameters_delay_nosig_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_startofpacket;                                // nmr_parameters_delay_nosig_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_delay_nosig_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_endofpacket;                                  // nmr_parameters_delay_nosig_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_delay_nosig_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_valid;                                      // nmr_parameters_delay_nosig_s1_agent:rdata_fifo_src_valid -> nmr_parameters_delay_nosig_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_data;                                       // nmr_parameters_delay_nosig_s1_agent:rdata_fifo_src_data -> nmr_parameters_delay_nosig_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_ready;                                      // nmr_parameters_delay_nosig_s1_agent_rdata_fifo:in_ready -> nmr_parameters_delay_nosig_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_delay_sig_s1_agent_m0_readdata;                                                 // nmr_parameters_delay_sig_s1_translator:uav_readdata -> nmr_parameters_delay_sig_s1_agent:m0_readdata
	wire          nmr_parameters_delay_sig_s1_agent_m0_waitrequest;                                              // nmr_parameters_delay_sig_s1_translator:uav_waitrequest -> nmr_parameters_delay_sig_s1_agent:m0_waitrequest
	wire          nmr_parameters_delay_sig_s1_agent_m0_debugaccess;                                              // nmr_parameters_delay_sig_s1_agent:m0_debugaccess -> nmr_parameters_delay_sig_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_delay_sig_s1_agent_m0_address;                                                  // nmr_parameters_delay_sig_s1_agent:m0_address -> nmr_parameters_delay_sig_s1_translator:uav_address
	wire    [3:0] nmr_parameters_delay_sig_s1_agent_m0_byteenable;                                               // nmr_parameters_delay_sig_s1_agent:m0_byteenable -> nmr_parameters_delay_sig_s1_translator:uav_byteenable
	wire          nmr_parameters_delay_sig_s1_agent_m0_read;                                                     // nmr_parameters_delay_sig_s1_agent:m0_read -> nmr_parameters_delay_sig_s1_translator:uav_read
	wire          nmr_parameters_delay_sig_s1_agent_m0_readdatavalid;                                            // nmr_parameters_delay_sig_s1_translator:uav_readdatavalid -> nmr_parameters_delay_sig_s1_agent:m0_readdatavalid
	wire          nmr_parameters_delay_sig_s1_agent_m0_lock;                                                     // nmr_parameters_delay_sig_s1_agent:m0_lock -> nmr_parameters_delay_sig_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_delay_sig_s1_agent_m0_writedata;                                                // nmr_parameters_delay_sig_s1_agent:m0_writedata -> nmr_parameters_delay_sig_s1_translator:uav_writedata
	wire          nmr_parameters_delay_sig_s1_agent_m0_write;                                                    // nmr_parameters_delay_sig_s1_agent:m0_write -> nmr_parameters_delay_sig_s1_translator:uav_write
	wire    [2:0] nmr_parameters_delay_sig_s1_agent_m0_burstcount;                                               // nmr_parameters_delay_sig_s1_agent:m0_burstcount -> nmr_parameters_delay_sig_s1_translator:uav_burstcount
	wire          nmr_parameters_delay_sig_s1_agent_rf_source_valid;                                             // nmr_parameters_delay_sig_s1_agent:rf_source_valid -> nmr_parameters_delay_sig_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_delay_sig_s1_agent_rf_source_data;                                              // nmr_parameters_delay_sig_s1_agent:rf_source_data -> nmr_parameters_delay_sig_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_delay_sig_s1_agent_rf_source_ready;                                             // nmr_parameters_delay_sig_s1_agent_rsp_fifo:in_ready -> nmr_parameters_delay_sig_s1_agent:rf_source_ready
	wire          nmr_parameters_delay_sig_s1_agent_rf_source_startofpacket;                                     // nmr_parameters_delay_sig_s1_agent:rf_source_startofpacket -> nmr_parameters_delay_sig_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rf_source_endofpacket;                                       // nmr_parameters_delay_sig_s1_agent:rf_source_endofpacket -> nmr_parameters_delay_sig_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_valid;                                          // nmr_parameters_delay_sig_s1_agent_rsp_fifo:out_valid -> nmr_parameters_delay_sig_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_data;                                           // nmr_parameters_delay_sig_s1_agent_rsp_fifo:out_data -> nmr_parameters_delay_sig_s1_agent:rf_sink_data
	wire          nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_ready;                                          // nmr_parameters_delay_sig_s1_agent:rf_sink_ready -> nmr_parameters_delay_sig_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_startofpacket;                                  // nmr_parameters_delay_sig_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_delay_sig_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_endofpacket;                                    // nmr_parameters_delay_sig_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_delay_sig_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_valid;                                        // nmr_parameters_delay_sig_s1_agent:rdata_fifo_src_valid -> nmr_parameters_delay_sig_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_data;                                         // nmr_parameters_delay_sig_s1_agent:rdata_fifo_src_data -> nmr_parameters_delay_sig_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_ready;                                        // nmr_parameters_delay_sig_s1_agent_rdata_fifo:in_ready -> nmr_parameters_delay_sig_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_delay_t1_s1_agent_m0_readdata;                                                  // nmr_parameters_delay_t1_s1_translator:uav_readdata -> nmr_parameters_delay_t1_s1_agent:m0_readdata
	wire          nmr_parameters_delay_t1_s1_agent_m0_waitrequest;                                               // nmr_parameters_delay_t1_s1_translator:uav_waitrequest -> nmr_parameters_delay_t1_s1_agent:m0_waitrequest
	wire          nmr_parameters_delay_t1_s1_agent_m0_debugaccess;                                               // nmr_parameters_delay_t1_s1_agent:m0_debugaccess -> nmr_parameters_delay_t1_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_delay_t1_s1_agent_m0_address;                                                   // nmr_parameters_delay_t1_s1_agent:m0_address -> nmr_parameters_delay_t1_s1_translator:uav_address
	wire    [3:0] nmr_parameters_delay_t1_s1_agent_m0_byteenable;                                                // nmr_parameters_delay_t1_s1_agent:m0_byteenable -> nmr_parameters_delay_t1_s1_translator:uav_byteenable
	wire          nmr_parameters_delay_t1_s1_agent_m0_read;                                                      // nmr_parameters_delay_t1_s1_agent:m0_read -> nmr_parameters_delay_t1_s1_translator:uav_read
	wire          nmr_parameters_delay_t1_s1_agent_m0_readdatavalid;                                             // nmr_parameters_delay_t1_s1_translator:uav_readdatavalid -> nmr_parameters_delay_t1_s1_agent:m0_readdatavalid
	wire          nmr_parameters_delay_t1_s1_agent_m0_lock;                                                      // nmr_parameters_delay_t1_s1_agent:m0_lock -> nmr_parameters_delay_t1_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_delay_t1_s1_agent_m0_writedata;                                                 // nmr_parameters_delay_t1_s1_agent:m0_writedata -> nmr_parameters_delay_t1_s1_translator:uav_writedata
	wire          nmr_parameters_delay_t1_s1_agent_m0_write;                                                     // nmr_parameters_delay_t1_s1_agent:m0_write -> nmr_parameters_delay_t1_s1_translator:uav_write
	wire    [2:0] nmr_parameters_delay_t1_s1_agent_m0_burstcount;                                                // nmr_parameters_delay_t1_s1_agent:m0_burstcount -> nmr_parameters_delay_t1_s1_translator:uav_burstcount
	wire          nmr_parameters_delay_t1_s1_agent_rf_source_valid;                                              // nmr_parameters_delay_t1_s1_agent:rf_source_valid -> nmr_parameters_delay_t1_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_delay_t1_s1_agent_rf_source_data;                                               // nmr_parameters_delay_t1_s1_agent:rf_source_data -> nmr_parameters_delay_t1_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_delay_t1_s1_agent_rf_source_ready;                                              // nmr_parameters_delay_t1_s1_agent_rsp_fifo:in_ready -> nmr_parameters_delay_t1_s1_agent:rf_source_ready
	wire          nmr_parameters_delay_t1_s1_agent_rf_source_startofpacket;                                      // nmr_parameters_delay_t1_s1_agent:rf_source_startofpacket -> nmr_parameters_delay_t1_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rf_source_endofpacket;                                        // nmr_parameters_delay_t1_s1_agent:rf_source_endofpacket -> nmr_parameters_delay_t1_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_valid;                                           // nmr_parameters_delay_t1_s1_agent_rsp_fifo:out_valid -> nmr_parameters_delay_t1_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_data;                                            // nmr_parameters_delay_t1_s1_agent_rsp_fifo:out_data -> nmr_parameters_delay_t1_s1_agent:rf_sink_data
	wire          nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_ready;                                           // nmr_parameters_delay_t1_s1_agent:rf_sink_ready -> nmr_parameters_delay_t1_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_startofpacket;                                   // nmr_parameters_delay_t1_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_delay_t1_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_endofpacket;                                     // nmr_parameters_delay_t1_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_delay_t1_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_valid;                                         // nmr_parameters_delay_t1_s1_agent:rdata_fifo_src_valid -> nmr_parameters_delay_t1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_data;                                          // nmr_parameters_delay_t1_s1_agent:rdata_fifo_src_data -> nmr_parameters_delay_t1_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_ready;                                         // nmr_parameters_delay_t1_s1_agent_rdata_fifo:in_ready -> nmr_parameters_delay_t1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_echoes_per_scan_s1_agent_m0_readdata;                                           // nmr_parameters_echoes_per_scan_s1_translator:uav_readdata -> nmr_parameters_echoes_per_scan_s1_agent:m0_readdata
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_waitrequest;                                        // nmr_parameters_echoes_per_scan_s1_translator:uav_waitrequest -> nmr_parameters_echoes_per_scan_s1_agent:m0_waitrequest
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_debugaccess;                                        // nmr_parameters_echoes_per_scan_s1_agent:m0_debugaccess -> nmr_parameters_echoes_per_scan_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_echoes_per_scan_s1_agent_m0_address;                                            // nmr_parameters_echoes_per_scan_s1_agent:m0_address -> nmr_parameters_echoes_per_scan_s1_translator:uav_address
	wire    [3:0] nmr_parameters_echoes_per_scan_s1_agent_m0_byteenable;                                         // nmr_parameters_echoes_per_scan_s1_agent:m0_byteenable -> nmr_parameters_echoes_per_scan_s1_translator:uav_byteenable
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_read;                                               // nmr_parameters_echoes_per_scan_s1_agent:m0_read -> nmr_parameters_echoes_per_scan_s1_translator:uav_read
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_readdatavalid;                                      // nmr_parameters_echoes_per_scan_s1_translator:uav_readdatavalid -> nmr_parameters_echoes_per_scan_s1_agent:m0_readdatavalid
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_lock;                                               // nmr_parameters_echoes_per_scan_s1_agent:m0_lock -> nmr_parameters_echoes_per_scan_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_echoes_per_scan_s1_agent_m0_writedata;                                          // nmr_parameters_echoes_per_scan_s1_agent:m0_writedata -> nmr_parameters_echoes_per_scan_s1_translator:uav_writedata
	wire          nmr_parameters_echoes_per_scan_s1_agent_m0_write;                                              // nmr_parameters_echoes_per_scan_s1_agent:m0_write -> nmr_parameters_echoes_per_scan_s1_translator:uav_write
	wire    [2:0] nmr_parameters_echoes_per_scan_s1_agent_m0_burstcount;                                         // nmr_parameters_echoes_per_scan_s1_agent:m0_burstcount -> nmr_parameters_echoes_per_scan_s1_translator:uav_burstcount
	wire          nmr_parameters_echoes_per_scan_s1_agent_rf_source_valid;                                       // nmr_parameters_echoes_per_scan_s1_agent:rf_source_valid -> nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_echoes_per_scan_s1_agent_rf_source_data;                                        // nmr_parameters_echoes_per_scan_s1_agent:rf_source_data -> nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_echoes_per_scan_s1_agent_rf_source_ready;                                       // nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:in_ready -> nmr_parameters_echoes_per_scan_s1_agent:rf_source_ready
	wire          nmr_parameters_echoes_per_scan_s1_agent_rf_source_startofpacket;                               // nmr_parameters_echoes_per_scan_s1_agent:rf_source_startofpacket -> nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rf_source_endofpacket;                                 // nmr_parameters_echoes_per_scan_s1_agent:rf_source_endofpacket -> nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_valid;                                    // nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:out_valid -> nmr_parameters_echoes_per_scan_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_data;                                     // nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:out_data -> nmr_parameters_echoes_per_scan_s1_agent:rf_sink_data
	wire          nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_ready;                                    // nmr_parameters_echoes_per_scan_s1_agent:rf_sink_ready -> nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_startofpacket;                            // nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_echoes_per_scan_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_endofpacket;                              // nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_echoes_per_scan_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_valid;                                  // nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_src_valid -> nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_data;                                   // nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_src_data -> nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_ready;                                  // nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:in_ready -> nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_src_ready
	wire   [31:0] adc_fifo_mem_in_csr_agent_m0_readdata;                                                         // adc_fifo_mem_in_csr_translator:uav_readdata -> adc_fifo_mem_in_csr_agent:m0_readdata
	wire          adc_fifo_mem_in_csr_agent_m0_waitrequest;                                                      // adc_fifo_mem_in_csr_translator:uav_waitrequest -> adc_fifo_mem_in_csr_agent:m0_waitrequest
	wire          adc_fifo_mem_in_csr_agent_m0_debugaccess;                                                      // adc_fifo_mem_in_csr_agent:m0_debugaccess -> adc_fifo_mem_in_csr_translator:uav_debugaccess
	wire   [31:0] adc_fifo_mem_in_csr_agent_m0_address;                                                          // adc_fifo_mem_in_csr_agent:m0_address -> adc_fifo_mem_in_csr_translator:uav_address
	wire    [3:0] adc_fifo_mem_in_csr_agent_m0_byteenable;                                                       // adc_fifo_mem_in_csr_agent:m0_byteenable -> adc_fifo_mem_in_csr_translator:uav_byteenable
	wire          adc_fifo_mem_in_csr_agent_m0_read;                                                             // adc_fifo_mem_in_csr_agent:m0_read -> adc_fifo_mem_in_csr_translator:uav_read
	wire          adc_fifo_mem_in_csr_agent_m0_readdatavalid;                                                    // adc_fifo_mem_in_csr_translator:uav_readdatavalid -> adc_fifo_mem_in_csr_agent:m0_readdatavalid
	wire          adc_fifo_mem_in_csr_agent_m0_lock;                                                             // adc_fifo_mem_in_csr_agent:m0_lock -> adc_fifo_mem_in_csr_translator:uav_lock
	wire   [31:0] adc_fifo_mem_in_csr_agent_m0_writedata;                                                        // adc_fifo_mem_in_csr_agent:m0_writedata -> adc_fifo_mem_in_csr_translator:uav_writedata
	wire          adc_fifo_mem_in_csr_agent_m0_write;                                                            // adc_fifo_mem_in_csr_agent:m0_write -> adc_fifo_mem_in_csr_translator:uav_write
	wire    [2:0] adc_fifo_mem_in_csr_agent_m0_burstcount;                                                       // adc_fifo_mem_in_csr_agent:m0_burstcount -> adc_fifo_mem_in_csr_translator:uav_burstcount
	wire          adc_fifo_mem_in_csr_agent_rf_source_valid;                                                     // adc_fifo_mem_in_csr_agent:rf_source_valid -> adc_fifo_mem_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] adc_fifo_mem_in_csr_agent_rf_source_data;                                                      // adc_fifo_mem_in_csr_agent:rf_source_data -> adc_fifo_mem_in_csr_agent_rsp_fifo:in_data
	wire          adc_fifo_mem_in_csr_agent_rf_source_ready;                                                     // adc_fifo_mem_in_csr_agent_rsp_fifo:in_ready -> adc_fifo_mem_in_csr_agent:rf_source_ready
	wire          adc_fifo_mem_in_csr_agent_rf_source_startofpacket;                                             // adc_fifo_mem_in_csr_agent:rf_source_startofpacket -> adc_fifo_mem_in_csr_agent_rsp_fifo:in_startofpacket
	wire          adc_fifo_mem_in_csr_agent_rf_source_endofpacket;                                               // adc_fifo_mem_in_csr_agent:rf_source_endofpacket -> adc_fifo_mem_in_csr_agent_rsp_fifo:in_endofpacket
	wire          adc_fifo_mem_in_csr_agent_rsp_fifo_out_valid;                                                  // adc_fifo_mem_in_csr_agent_rsp_fifo:out_valid -> adc_fifo_mem_in_csr_agent:rf_sink_valid
	wire  [137:0] adc_fifo_mem_in_csr_agent_rsp_fifo_out_data;                                                   // adc_fifo_mem_in_csr_agent_rsp_fifo:out_data -> adc_fifo_mem_in_csr_agent:rf_sink_data
	wire          adc_fifo_mem_in_csr_agent_rsp_fifo_out_ready;                                                  // adc_fifo_mem_in_csr_agent:rf_sink_ready -> adc_fifo_mem_in_csr_agent_rsp_fifo:out_ready
	wire          adc_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket;                                          // adc_fifo_mem_in_csr_agent_rsp_fifo:out_startofpacket -> adc_fifo_mem_in_csr_agent:rf_sink_startofpacket
	wire          adc_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket;                                            // adc_fifo_mem_in_csr_agent_rsp_fifo:out_endofpacket -> adc_fifo_mem_in_csr_agent:rf_sink_endofpacket
	wire          adc_fifo_mem_in_csr_agent_rdata_fifo_src_valid;                                                // adc_fifo_mem_in_csr_agent:rdata_fifo_src_valid -> adc_fifo_mem_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] adc_fifo_mem_in_csr_agent_rdata_fifo_src_data;                                                 // adc_fifo_mem_in_csr_agent:rdata_fifo_src_data -> adc_fifo_mem_in_csr_agent_rdata_fifo:in_data
	wire          adc_fifo_mem_in_csr_agent_rdata_fifo_src_ready;                                                // adc_fifo_mem_in_csr_agent_rdata_fifo:in_ready -> adc_fifo_mem_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] dconv_fifo_mem_in_csr_agent_m0_readdata;                                                       // dconv_fifo_mem_in_csr_translator:uav_readdata -> dconv_fifo_mem_in_csr_agent:m0_readdata
	wire          dconv_fifo_mem_in_csr_agent_m0_waitrequest;                                                    // dconv_fifo_mem_in_csr_translator:uav_waitrequest -> dconv_fifo_mem_in_csr_agent:m0_waitrequest
	wire          dconv_fifo_mem_in_csr_agent_m0_debugaccess;                                                    // dconv_fifo_mem_in_csr_agent:m0_debugaccess -> dconv_fifo_mem_in_csr_translator:uav_debugaccess
	wire   [31:0] dconv_fifo_mem_in_csr_agent_m0_address;                                                        // dconv_fifo_mem_in_csr_agent:m0_address -> dconv_fifo_mem_in_csr_translator:uav_address
	wire    [3:0] dconv_fifo_mem_in_csr_agent_m0_byteenable;                                                     // dconv_fifo_mem_in_csr_agent:m0_byteenable -> dconv_fifo_mem_in_csr_translator:uav_byteenable
	wire          dconv_fifo_mem_in_csr_agent_m0_read;                                                           // dconv_fifo_mem_in_csr_agent:m0_read -> dconv_fifo_mem_in_csr_translator:uav_read
	wire          dconv_fifo_mem_in_csr_agent_m0_readdatavalid;                                                  // dconv_fifo_mem_in_csr_translator:uav_readdatavalid -> dconv_fifo_mem_in_csr_agent:m0_readdatavalid
	wire          dconv_fifo_mem_in_csr_agent_m0_lock;                                                           // dconv_fifo_mem_in_csr_agent:m0_lock -> dconv_fifo_mem_in_csr_translator:uav_lock
	wire   [31:0] dconv_fifo_mem_in_csr_agent_m0_writedata;                                                      // dconv_fifo_mem_in_csr_agent:m0_writedata -> dconv_fifo_mem_in_csr_translator:uav_writedata
	wire          dconv_fifo_mem_in_csr_agent_m0_write;                                                          // dconv_fifo_mem_in_csr_agent:m0_write -> dconv_fifo_mem_in_csr_translator:uav_write
	wire    [2:0] dconv_fifo_mem_in_csr_agent_m0_burstcount;                                                     // dconv_fifo_mem_in_csr_agent:m0_burstcount -> dconv_fifo_mem_in_csr_translator:uav_burstcount
	wire          dconv_fifo_mem_in_csr_agent_rf_source_valid;                                                   // dconv_fifo_mem_in_csr_agent:rf_source_valid -> dconv_fifo_mem_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] dconv_fifo_mem_in_csr_agent_rf_source_data;                                                    // dconv_fifo_mem_in_csr_agent:rf_source_data -> dconv_fifo_mem_in_csr_agent_rsp_fifo:in_data
	wire          dconv_fifo_mem_in_csr_agent_rf_source_ready;                                                   // dconv_fifo_mem_in_csr_agent_rsp_fifo:in_ready -> dconv_fifo_mem_in_csr_agent:rf_source_ready
	wire          dconv_fifo_mem_in_csr_agent_rf_source_startofpacket;                                           // dconv_fifo_mem_in_csr_agent:rf_source_startofpacket -> dconv_fifo_mem_in_csr_agent_rsp_fifo:in_startofpacket
	wire          dconv_fifo_mem_in_csr_agent_rf_source_endofpacket;                                             // dconv_fifo_mem_in_csr_agent:rf_source_endofpacket -> dconv_fifo_mem_in_csr_agent_rsp_fifo:in_endofpacket
	wire          dconv_fifo_mem_in_csr_agent_rsp_fifo_out_valid;                                                // dconv_fifo_mem_in_csr_agent_rsp_fifo:out_valid -> dconv_fifo_mem_in_csr_agent:rf_sink_valid
	wire  [137:0] dconv_fifo_mem_in_csr_agent_rsp_fifo_out_data;                                                 // dconv_fifo_mem_in_csr_agent_rsp_fifo:out_data -> dconv_fifo_mem_in_csr_agent:rf_sink_data
	wire          dconv_fifo_mem_in_csr_agent_rsp_fifo_out_ready;                                                // dconv_fifo_mem_in_csr_agent:rf_sink_ready -> dconv_fifo_mem_in_csr_agent_rsp_fifo:out_ready
	wire          dconv_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket;                                        // dconv_fifo_mem_in_csr_agent_rsp_fifo:out_startofpacket -> dconv_fifo_mem_in_csr_agent:rf_sink_startofpacket
	wire          dconv_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket;                                          // dconv_fifo_mem_in_csr_agent_rsp_fifo:out_endofpacket -> dconv_fifo_mem_in_csr_agent:rf_sink_endofpacket
	wire          dconv_fifo_mem_in_csr_agent_rdata_fifo_src_valid;                                              // dconv_fifo_mem_in_csr_agent:rdata_fifo_src_valid -> dconv_fifo_mem_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] dconv_fifo_mem_in_csr_agent_rdata_fifo_src_data;                                               // dconv_fifo_mem_in_csr_agent:rdata_fifo_src_data -> dconv_fifo_mem_in_csr_agent_rdata_fifo:in_data
	wire          dconv_fifo_mem_in_csr_agent_rdata_fifo_src_ready;                                              // dconv_fifo_mem_in_csr_agent_rdata_fifo:in_ready -> dconv_fifo_mem_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] dconv_fifo_mem_q_in_csr_agent_m0_readdata;                                                     // dconv_fifo_mem_q_in_csr_translator:uav_readdata -> dconv_fifo_mem_q_in_csr_agent:m0_readdata
	wire          dconv_fifo_mem_q_in_csr_agent_m0_waitrequest;                                                  // dconv_fifo_mem_q_in_csr_translator:uav_waitrequest -> dconv_fifo_mem_q_in_csr_agent:m0_waitrequest
	wire          dconv_fifo_mem_q_in_csr_agent_m0_debugaccess;                                                  // dconv_fifo_mem_q_in_csr_agent:m0_debugaccess -> dconv_fifo_mem_q_in_csr_translator:uav_debugaccess
	wire   [31:0] dconv_fifo_mem_q_in_csr_agent_m0_address;                                                      // dconv_fifo_mem_q_in_csr_agent:m0_address -> dconv_fifo_mem_q_in_csr_translator:uav_address
	wire    [3:0] dconv_fifo_mem_q_in_csr_agent_m0_byteenable;                                                   // dconv_fifo_mem_q_in_csr_agent:m0_byteenable -> dconv_fifo_mem_q_in_csr_translator:uav_byteenable
	wire          dconv_fifo_mem_q_in_csr_agent_m0_read;                                                         // dconv_fifo_mem_q_in_csr_agent:m0_read -> dconv_fifo_mem_q_in_csr_translator:uav_read
	wire          dconv_fifo_mem_q_in_csr_agent_m0_readdatavalid;                                                // dconv_fifo_mem_q_in_csr_translator:uav_readdatavalid -> dconv_fifo_mem_q_in_csr_agent:m0_readdatavalid
	wire          dconv_fifo_mem_q_in_csr_agent_m0_lock;                                                         // dconv_fifo_mem_q_in_csr_agent:m0_lock -> dconv_fifo_mem_q_in_csr_translator:uav_lock
	wire   [31:0] dconv_fifo_mem_q_in_csr_agent_m0_writedata;                                                    // dconv_fifo_mem_q_in_csr_agent:m0_writedata -> dconv_fifo_mem_q_in_csr_translator:uav_writedata
	wire          dconv_fifo_mem_q_in_csr_agent_m0_write;                                                        // dconv_fifo_mem_q_in_csr_agent:m0_write -> dconv_fifo_mem_q_in_csr_translator:uav_write
	wire    [2:0] dconv_fifo_mem_q_in_csr_agent_m0_burstcount;                                                   // dconv_fifo_mem_q_in_csr_agent:m0_burstcount -> dconv_fifo_mem_q_in_csr_translator:uav_burstcount
	wire          dconv_fifo_mem_q_in_csr_agent_rf_source_valid;                                                 // dconv_fifo_mem_q_in_csr_agent:rf_source_valid -> dconv_fifo_mem_q_in_csr_agent_rsp_fifo:in_valid
	wire  [137:0] dconv_fifo_mem_q_in_csr_agent_rf_source_data;                                                  // dconv_fifo_mem_q_in_csr_agent:rf_source_data -> dconv_fifo_mem_q_in_csr_agent_rsp_fifo:in_data
	wire          dconv_fifo_mem_q_in_csr_agent_rf_source_ready;                                                 // dconv_fifo_mem_q_in_csr_agent_rsp_fifo:in_ready -> dconv_fifo_mem_q_in_csr_agent:rf_source_ready
	wire          dconv_fifo_mem_q_in_csr_agent_rf_source_startofpacket;                                         // dconv_fifo_mem_q_in_csr_agent:rf_source_startofpacket -> dconv_fifo_mem_q_in_csr_agent_rsp_fifo:in_startofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rf_source_endofpacket;                                           // dconv_fifo_mem_q_in_csr_agent:rf_source_endofpacket -> dconv_fifo_mem_q_in_csr_agent_rsp_fifo:in_endofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_valid;                                              // dconv_fifo_mem_q_in_csr_agent_rsp_fifo:out_valid -> dconv_fifo_mem_q_in_csr_agent:rf_sink_valid
	wire  [137:0] dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_data;                                               // dconv_fifo_mem_q_in_csr_agent_rsp_fifo:out_data -> dconv_fifo_mem_q_in_csr_agent:rf_sink_data
	wire          dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_ready;                                              // dconv_fifo_mem_q_in_csr_agent:rf_sink_ready -> dconv_fifo_mem_q_in_csr_agent_rsp_fifo:out_ready
	wire          dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_startofpacket;                                      // dconv_fifo_mem_q_in_csr_agent_rsp_fifo:out_startofpacket -> dconv_fifo_mem_q_in_csr_agent:rf_sink_startofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_endofpacket;                                        // dconv_fifo_mem_q_in_csr_agent_rsp_fifo:out_endofpacket -> dconv_fifo_mem_q_in_csr_agent:rf_sink_endofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_valid;                                            // dconv_fifo_mem_q_in_csr_agent:rdata_fifo_src_valid -> dconv_fifo_mem_q_in_csr_agent_rdata_fifo:in_valid
	wire   [33:0] dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_data;                                             // dconv_fifo_mem_q_in_csr_agent:rdata_fifo_src_data -> dconv_fifo_mem_q_in_csr_agent_rdata_fifo:in_data
	wire          dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_ready;                                            // dconv_fifo_mem_q_in_csr_agent_rdata_fifo:in_ready -> dconv_fifo_mem_q_in_csr_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_init_delay_s1_agent_m0_readdata;                                                // nmr_parameters_init_delay_s1_translator:uav_readdata -> nmr_parameters_init_delay_s1_agent:m0_readdata
	wire          nmr_parameters_init_delay_s1_agent_m0_waitrequest;                                             // nmr_parameters_init_delay_s1_translator:uav_waitrequest -> nmr_parameters_init_delay_s1_agent:m0_waitrequest
	wire          nmr_parameters_init_delay_s1_agent_m0_debugaccess;                                             // nmr_parameters_init_delay_s1_agent:m0_debugaccess -> nmr_parameters_init_delay_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_init_delay_s1_agent_m0_address;                                                 // nmr_parameters_init_delay_s1_agent:m0_address -> nmr_parameters_init_delay_s1_translator:uav_address
	wire    [3:0] nmr_parameters_init_delay_s1_agent_m0_byteenable;                                              // nmr_parameters_init_delay_s1_agent:m0_byteenable -> nmr_parameters_init_delay_s1_translator:uav_byteenable
	wire          nmr_parameters_init_delay_s1_agent_m0_read;                                                    // nmr_parameters_init_delay_s1_agent:m0_read -> nmr_parameters_init_delay_s1_translator:uav_read
	wire          nmr_parameters_init_delay_s1_agent_m0_readdatavalid;                                           // nmr_parameters_init_delay_s1_translator:uav_readdatavalid -> nmr_parameters_init_delay_s1_agent:m0_readdatavalid
	wire          nmr_parameters_init_delay_s1_agent_m0_lock;                                                    // nmr_parameters_init_delay_s1_agent:m0_lock -> nmr_parameters_init_delay_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_init_delay_s1_agent_m0_writedata;                                               // nmr_parameters_init_delay_s1_agent:m0_writedata -> nmr_parameters_init_delay_s1_translator:uav_writedata
	wire          nmr_parameters_init_delay_s1_agent_m0_write;                                                   // nmr_parameters_init_delay_s1_agent:m0_write -> nmr_parameters_init_delay_s1_translator:uav_write
	wire    [2:0] nmr_parameters_init_delay_s1_agent_m0_burstcount;                                              // nmr_parameters_init_delay_s1_agent:m0_burstcount -> nmr_parameters_init_delay_s1_translator:uav_burstcount
	wire          nmr_parameters_init_delay_s1_agent_rf_source_valid;                                            // nmr_parameters_init_delay_s1_agent:rf_source_valid -> nmr_parameters_init_delay_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_init_delay_s1_agent_rf_source_data;                                             // nmr_parameters_init_delay_s1_agent:rf_source_data -> nmr_parameters_init_delay_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_init_delay_s1_agent_rf_source_ready;                                            // nmr_parameters_init_delay_s1_agent_rsp_fifo:in_ready -> nmr_parameters_init_delay_s1_agent:rf_source_ready
	wire          nmr_parameters_init_delay_s1_agent_rf_source_startofpacket;                                    // nmr_parameters_init_delay_s1_agent:rf_source_startofpacket -> nmr_parameters_init_delay_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_init_delay_s1_agent_rf_source_endofpacket;                                      // nmr_parameters_init_delay_s1_agent:rf_source_endofpacket -> nmr_parameters_init_delay_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_init_delay_s1_agent_rsp_fifo_out_valid;                                         // nmr_parameters_init_delay_s1_agent_rsp_fifo:out_valid -> nmr_parameters_init_delay_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_init_delay_s1_agent_rsp_fifo_out_data;                                          // nmr_parameters_init_delay_s1_agent_rsp_fifo:out_data -> nmr_parameters_init_delay_s1_agent:rf_sink_data
	wire          nmr_parameters_init_delay_s1_agent_rsp_fifo_out_ready;                                         // nmr_parameters_init_delay_s1_agent:rf_sink_ready -> nmr_parameters_init_delay_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_init_delay_s1_agent_rsp_fifo_out_startofpacket;                                 // nmr_parameters_init_delay_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_init_delay_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_init_delay_s1_agent_rsp_fifo_out_endofpacket;                                   // nmr_parameters_init_delay_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_init_delay_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_init_delay_s1_agent_rdata_fifo_src_valid;                                       // nmr_parameters_init_delay_s1_agent:rdata_fifo_src_valid -> nmr_parameters_init_delay_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_init_delay_s1_agent_rdata_fifo_src_data;                                        // nmr_parameters_init_delay_s1_agent:rdata_fifo_src_data -> nmr_parameters_init_delay_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_init_delay_s1_agent_rdata_fifo_src_ready;                                       // nmr_parameters_init_delay_s1_agent_rdata_fifo:in_ready -> nmr_parameters_init_delay_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata;                                      // nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_readdata -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_readdata
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest;                                   // nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_waitrequest -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_waitrequest
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess;                                   // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_debugaccess -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_debugaccess
	wire   [31:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_address;                                       // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_address -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_address
	wire    [3:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable;                                    // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_byteenable -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_byteenable
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_read;                                          // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_read -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_read
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid;                                 // nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_readdatavalid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_readdatavalid
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_lock;                                          // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_lock -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_lock
	wire   [31:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata;                                     // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_writedata -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_writedata
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_write;                                         // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_write -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_write
	wire    [2:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount;                                    // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:m0_burstcount -> nmr_sys_pll_reconfig_mgmt_avalon_slave_translator:uav_burstcount
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid;                                  // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_source_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data;                                   // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_source_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready;                                  // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_source_ready
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket;                          // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_source_startofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket;                            // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_source_endofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid;                               // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_valid
	wire  [137:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data;                                // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready;                               // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_ready
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket;                       // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_startofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_startofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket;                         // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_endofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_endofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid;                             // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data;                              // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready;                             // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata;                                     // analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_readdata -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_readdata
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest;                                  // analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_waitrequest -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_waitrequest
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess;                                  // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_debugaccess -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_debugaccess
	wire   [31:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_address;                                      // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_address -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_address
	wire    [3:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable;                                   // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_byteenable -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_byteenable
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_read;                                         // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_read -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_read
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid;                                // analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_readdatavalid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_readdatavalid
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_lock;                                         // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_lock -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_lock
	wire   [31:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata;                                    // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_writedata -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_writedata
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_write;                                        // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_write -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_write
	wire    [2:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount;                                   // analyzer_pll_reconfig_mgmt_avalon_slave_agent:m0_burstcount -> analyzer_pll_reconfig_mgmt_avalon_slave_translator:uav_burstcount
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid;                                 // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_source_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_valid
	wire  [137:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data;                                  // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_source_data -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready;                                 // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_source_ready
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket;                         // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_source_startofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket;                           // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_source_endofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid;                              // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_valid
	wire  [137:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data;                               // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_data -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready;                              // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_ready
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket;                      // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_startofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_startofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket;                        // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo:out_endofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rf_sink_endofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid;                            // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data;                             // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_data -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready;                            // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:in_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dconv_fifo_mem_out_agent_m0_readdata;                                                          // dconv_fifo_mem_out_translator:uav_readdata -> dconv_fifo_mem_out_agent:m0_readdata
	wire          dconv_fifo_mem_out_agent_m0_waitrequest;                                                       // dconv_fifo_mem_out_translator:uav_waitrequest -> dconv_fifo_mem_out_agent:m0_waitrequest
	wire          dconv_fifo_mem_out_agent_m0_debugaccess;                                                       // dconv_fifo_mem_out_agent:m0_debugaccess -> dconv_fifo_mem_out_translator:uav_debugaccess
	wire   [31:0] dconv_fifo_mem_out_agent_m0_address;                                                           // dconv_fifo_mem_out_agent:m0_address -> dconv_fifo_mem_out_translator:uav_address
	wire    [3:0] dconv_fifo_mem_out_agent_m0_byteenable;                                                        // dconv_fifo_mem_out_agent:m0_byteenable -> dconv_fifo_mem_out_translator:uav_byteenable
	wire          dconv_fifo_mem_out_agent_m0_read;                                                              // dconv_fifo_mem_out_agent:m0_read -> dconv_fifo_mem_out_translator:uav_read
	wire          dconv_fifo_mem_out_agent_m0_readdatavalid;                                                     // dconv_fifo_mem_out_translator:uav_readdatavalid -> dconv_fifo_mem_out_agent:m0_readdatavalid
	wire          dconv_fifo_mem_out_agent_m0_lock;                                                              // dconv_fifo_mem_out_agent:m0_lock -> dconv_fifo_mem_out_translator:uav_lock
	wire   [31:0] dconv_fifo_mem_out_agent_m0_writedata;                                                         // dconv_fifo_mem_out_agent:m0_writedata -> dconv_fifo_mem_out_translator:uav_writedata
	wire          dconv_fifo_mem_out_agent_m0_write;                                                             // dconv_fifo_mem_out_agent:m0_write -> dconv_fifo_mem_out_translator:uav_write
	wire    [2:0] dconv_fifo_mem_out_agent_m0_burstcount;                                                        // dconv_fifo_mem_out_agent:m0_burstcount -> dconv_fifo_mem_out_translator:uav_burstcount
	wire          dconv_fifo_mem_out_agent_rf_source_valid;                                                      // dconv_fifo_mem_out_agent:rf_source_valid -> dconv_fifo_mem_out_agent_rsp_fifo:in_valid
	wire  [137:0] dconv_fifo_mem_out_agent_rf_source_data;                                                       // dconv_fifo_mem_out_agent:rf_source_data -> dconv_fifo_mem_out_agent_rsp_fifo:in_data
	wire          dconv_fifo_mem_out_agent_rf_source_ready;                                                      // dconv_fifo_mem_out_agent_rsp_fifo:in_ready -> dconv_fifo_mem_out_agent:rf_source_ready
	wire          dconv_fifo_mem_out_agent_rf_source_startofpacket;                                              // dconv_fifo_mem_out_agent:rf_source_startofpacket -> dconv_fifo_mem_out_agent_rsp_fifo:in_startofpacket
	wire          dconv_fifo_mem_out_agent_rf_source_endofpacket;                                                // dconv_fifo_mem_out_agent:rf_source_endofpacket -> dconv_fifo_mem_out_agent_rsp_fifo:in_endofpacket
	wire          dconv_fifo_mem_out_agent_rsp_fifo_out_valid;                                                   // dconv_fifo_mem_out_agent_rsp_fifo:out_valid -> dconv_fifo_mem_out_agent:rf_sink_valid
	wire  [137:0] dconv_fifo_mem_out_agent_rsp_fifo_out_data;                                                    // dconv_fifo_mem_out_agent_rsp_fifo:out_data -> dconv_fifo_mem_out_agent:rf_sink_data
	wire          dconv_fifo_mem_out_agent_rsp_fifo_out_ready;                                                   // dconv_fifo_mem_out_agent:rf_sink_ready -> dconv_fifo_mem_out_agent_rsp_fifo:out_ready
	wire          dconv_fifo_mem_out_agent_rsp_fifo_out_startofpacket;                                           // dconv_fifo_mem_out_agent_rsp_fifo:out_startofpacket -> dconv_fifo_mem_out_agent:rf_sink_startofpacket
	wire          dconv_fifo_mem_out_agent_rsp_fifo_out_endofpacket;                                             // dconv_fifo_mem_out_agent_rsp_fifo:out_endofpacket -> dconv_fifo_mem_out_agent:rf_sink_endofpacket
	wire          dconv_fifo_mem_out_agent_rdata_fifo_src_valid;                                                 // dconv_fifo_mem_out_agent:rdata_fifo_src_valid -> dconv_fifo_mem_out_agent_rdata_fifo:in_valid
	wire   [33:0] dconv_fifo_mem_out_agent_rdata_fifo_src_data;                                                  // dconv_fifo_mem_out_agent:rdata_fifo_src_data -> dconv_fifo_mem_out_agent_rdata_fifo:in_data
	wire          dconv_fifo_mem_out_agent_rdata_fifo_src_ready;                                                 // dconv_fifo_mem_out_agent_rdata_fifo:in_ready -> dconv_fifo_mem_out_agent:rdata_fifo_src_ready
	wire   [31:0] dconv_fifo_mem_q_out_agent_m0_readdata;                                                        // dconv_fifo_mem_q_out_translator:uav_readdata -> dconv_fifo_mem_q_out_agent:m0_readdata
	wire          dconv_fifo_mem_q_out_agent_m0_waitrequest;                                                     // dconv_fifo_mem_q_out_translator:uav_waitrequest -> dconv_fifo_mem_q_out_agent:m0_waitrequest
	wire          dconv_fifo_mem_q_out_agent_m0_debugaccess;                                                     // dconv_fifo_mem_q_out_agent:m0_debugaccess -> dconv_fifo_mem_q_out_translator:uav_debugaccess
	wire   [31:0] dconv_fifo_mem_q_out_agent_m0_address;                                                         // dconv_fifo_mem_q_out_agent:m0_address -> dconv_fifo_mem_q_out_translator:uav_address
	wire    [3:0] dconv_fifo_mem_q_out_agent_m0_byteenable;                                                      // dconv_fifo_mem_q_out_agent:m0_byteenable -> dconv_fifo_mem_q_out_translator:uav_byteenable
	wire          dconv_fifo_mem_q_out_agent_m0_read;                                                            // dconv_fifo_mem_q_out_agent:m0_read -> dconv_fifo_mem_q_out_translator:uav_read
	wire          dconv_fifo_mem_q_out_agent_m0_readdatavalid;                                                   // dconv_fifo_mem_q_out_translator:uav_readdatavalid -> dconv_fifo_mem_q_out_agent:m0_readdatavalid
	wire          dconv_fifo_mem_q_out_agent_m0_lock;                                                            // dconv_fifo_mem_q_out_agent:m0_lock -> dconv_fifo_mem_q_out_translator:uav_lock
	wire   [31:0] dconv_fifo_mem_q_out_agent_m0_writedata;                                                       // dconv_fifo_mem_q_out_agent:m0_writedata -> dconv_fifo_mem_q_out_translator:uav_writedata
	wire          dconv_fifo_mem_q_out_agent_m0_write;                                                           // dconv_fifo_mem_q_out_agent:m0_write -> dconv_fifo_mem_q_out_translator:uav_write
	wire    [2:0] dconv_fifo_mem_q_out_agent_m0_burstcount;                                                      // dconv_fifo_mem_q_out_agent:m0_burstcount -> dconv_fifo_mem_q_out_translator:uav_burstcount
	wire          dconv_fifo_mem_q_out_agent_rf_source_valid;                                                    // dconv_fifo_mem_q_out_agent:rf_source_valid -> dconv_fifo_mem_q_out_agent_rsp_fifo:in_valid
	wire  [137:0] dconv_fifo_mem_q_out_agent_rf_source_data;                                                     // dconv_fifo_mem_q_out_agent:rf_source_data -> dconv_fifo_mem_q_out_agent_rsp_fifo:in_data
	wire          dconv_fifo_mem_q_out_agent_rf_source_ready;                                                    // dconv_fifo_mem_q_out_agent_rsp_fifo:in_ready -> dconv_fifo_mem_q_out_agent:rf_source_ready
	wire          dconv_fifo_mem_q_out_agent_rf_source_startofpacket;                                            // dconv_fifo_mem_q_out_agent:rf_source_startofpacket -> dconv_fifo_mem_q_out_agent_rsp_fifo:in_startofpacket
	wire          dconv_fifo_mem_q_out_agent_rf_source_endofpacket;                                              // dconv_fifo_mem_q_out_agent:rf_source_endofpacket -> dconv_fifo_mem_q_out_agent_rsp_fifo:in_endofpacket
	wire          dconv_fifo_mem_q_out_agent_rsp_fifo_out_valid;                                                 // dconv_fifo_mem_q_out_agent_rsp_fifo:out_valid -> dconv_fifo_mem_q_out_agent:rf_sink_valid
	wire  [137:0] dconv_fifo_mem_q_out_agent_rsp_fifo_out_data;                                                  // dconv_fifo_mem_q_out_agent_rsp_fifo:out_data -> dconv_fifo_mem_q_out_agent:rf_sink_data
	wire          dconv_fifo_mem_q_out_agent_rsp_fifo_out_ready;                                                 // dconv_fifo_mem_q_out_agent:rf_sink_ready -> dconv_fifo_mem_q_out_agent_rsp_fifo:out_ready
	wire          dconv_fifo_mem_q_out_agent_rsp_fifo_out_startofpacket;                                         // dconv_fifo_mem_q_out_agent_rsp_fifo:out_startofpacket -> dconv_fifo_mem_q_out_agent:rf_sink_startofpacket
	wire          dconv_fifo_mem_q_out_agent_rsp_fifo_out_endofpacket;                                           // dconv_fifo_mem_q_out_agent_rsp_fifo:out_endofpacket -> dconv_fifo_mem_q_out_agent:rf_sink_endofpacket
	wire          dconv_fifo_mem_q_out_agent_rdata_fifo_src_valid;                                               // dconv_fifo_mem_q_out_agent:rdata_fifo_src_valid -> dconv_fifo_mem_q_out_agent_rdata_fifo:in_valid
	wire   [33:0] dconv_fifo_mem_q_out_agent_rdata_fifo_src_data;                                                // dconv_fifo_mem_q_out_agent:rdata_fifo_src_data -> dconv_fifo_mem_q_out_agent_rdata_fifo:in_data
	wire          dconv_fifo_mem_q_out_agent_rdata_fifo_src_ready;                                               // dconv_fifo_mem_q_out_agent_rdata_fifo:in_ready -> dconv_fifo_mem_q_out_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_pulse_180deg_s1_agent_m0_readdata;                                              // nmr_parameters_pulse_180deg_s1_translator:uav_readdata -> nmr_parameters_pulse_180deg_s1_agent:m0_readdata
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_waitrequest;                                           // nmr_parameters_pulse_180deg_s1_translator:uav_waitrequest -> nmr_parameters_pulse_180deg_s1_agent:m0_waitrequest
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_debugaccess;                                           // nmr_parameters_pulse_180deg_s1_agent:m0_debugaccess -> nmr_parameters_pulse_180deg_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_pulse_180deg_s1_agent_m0_address;                                               // nmr_parameters_pulse_180deg_s1_agent:m0_address -> nmr_parameters_pulse_180deg_s1_translator:uav_address
	wire    [3:0] nmr_parameters_pulse_180deg_s1_agent_m0_byteenable;                                            // nmr_parameters_pulse_180deg_s1_agent:m0_byteenable -> nmr_parameters_pulse_180deg_s1_translator:uav_byteenable
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_read;                                                  // nmr_parameters_pulse_180deg_s1_agent:m0_read -> nmr_parameters_pulse_180deg_s1_translator:uav_read
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_readdatavalid;                                         // nmr_parameters_pulse_180deg_s1_translator:uav_readdatavalid -> nmr_parameters_pulse_180deg_s1_agent:m0_readdatavalid
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_lock;                                                  // nmr_parameters_pulse_180deg_s1_agent:m0_lock -> nmr_parameters_pulse_180deg_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_pulse_180deg_s1_agent_m0_writedata;                                             // nmr_parameters_pulse_180deg_s1_agent:m0_writedata -> nmr_parameters_pulse_180deg_s1_translator:uav_writedata
	wire          nmr_parameters_pulse_180deg_s1_agent_m0_write;                                                 // nmr_parameters_pulse_180deg_s1_agent:m0_write -> nmr_parameters_pulse_180deg_s1_translator:uav_write
	wire    [2:0] nmr_parameters_pulse_180deg_s1_agent_m0_burstcount;                                            // nmr_parameters_pulse_180deg_s1_agent:m0_burstcount -> nmr_parameters_pulse_180deg_s1_translator:uav_burstcount
	wire          nmr_parameters_pulse_180deg_s1_agent_rf_source_valid;                                          // nmr_parameters_pulse_180deg_s1_agent:rf_source_valid -> nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_pulse_180deg_s1_agent_rf_source_data;                                           // nmr_parameters_pulse_180deg_s1_agent:rf_source_data -> nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_pulse_180deg_s1_agent_rf_source_ready;                                          // nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:in_ready -> nmr_parameters_pulse_180deg_s1_agent:rf_source_ready
	wire          nmr_parameters_pulse_180deg_s1_agent_rf_source_startofpacket;                                  // nmr_parameters_pulse_180deg_s1_agent:rf_source_startofpacket -> nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rf_source_endofpacket;                                    // nmr_parameters_pulse_180deg_s1_agent:rf_source_endofpacket -> nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_valid;                                       // nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:out_valid -> nmr_parameters_pulse_180deg_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_data;                                        // nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:out_data -> nmr_parameters_pulse_180deg_s1_agent:rf_sink_data
	wire          nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_ready;                                       // nmr_parameters_pulse_180deg_s1_agent:rf_sink_ready -> nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_startofpacket;                               // nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_pulse_180deg_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_endofpacket;                                 // nmr_parameters_pulse_180deg_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_pulse_180deg_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_valid;                                     // nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_src_valid -> nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_data;                                      // nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_src_data -> nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_ready;                                     // nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:in_ready -> nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_pulse_90deg_s1_agent_m0_readdata;                                               // nmr_parameters_pulse_90deg_s1_translator:uav_readdata -> nmr_parameters_pulse_90deg_s1_agent:m0_readdata
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_waitrequest;                                            // nmr_parameters_pulse_90deg_s1_translator:uav_waitrequest -> nmr_parameters_pulse_90deg_s1_agent:m0_waitrequest
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_debugaccess;                                            // nmr_parameters_pulse_90deg_s1_agent:m0_debugaccess -> nmr_parameters_pulse_90deg_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_pulse_90deg_s1_agent_m0_address;                                                // nmr_parameters_pulse_90deg_s1_agent:m0_address -> nmr_parameters_pulse_90deg_s1_translator:uav_address
	wire    [3:0] nmr_parameters_pulse_90deg_s1_agent_m0_byteenable;                                             // nmr_parameters_pulse_90deg_s1_agent:m0_byteenable -> nmr_parameters_pulse_90deg_s1_translator:uav_byteenable
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_read;                                                   // nmr_parameters_pulse_90deg_s1_agent:m0_read -> nmr_parameters_pulse_90deg_s1_translator:uav_read
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_readdatavalid;                                          // nmr_parameters_pulse_90deg_s1_translator:uav_readdatavalid -> nmr_parameters_pulse_90deg_s1_agent:m0_readdatavalid
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_lock;                                                   // nmr_parameters_pulse_90deg_s1_agent:m0_lock -> nmr_parameters_pulse_90deg_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_pulse_90deg_s1_agent_m0_writedata;                                              // nmr_parameters_pulse_90deg_s1_agent:m0_writedata -> nmr_parameters_pulse_90deg_s1_translator:uav_writedata
	wire          nmr_parameters_pulse_90deg_s1_agent_m0_write;                                                  // nmr_parameters_pulse_90deg_s1_agent:m0_write -> nmr_parameters_pulse_90deg_s1_translator:uav_write
	wire    [2:0] nmr_parameters_pulse_90deg_s1_agent_m0_burstcount;                                             // nmr_parameters_pulse_90deg_s1_agent:m0_burstcount -> nmr_parameters_pulse_90deg_s1_translator:uav_burstcount
	wire          nmr_parameters_pulse_90deg_s1_agent_rf_source_valid;                                           // nmr_parameters_pulse_90deg_s1_agent:rf_source_valid -> nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_pulse_90deg_s1_agent_rf_source_data;                                            // nmr_parameters_pulse_90deg_s1_agent:rf_source_data -> nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_pulse_90deg_s1_agent_rf_source_ready;                                           // nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:in_ready -> nmr_parameters_pulse_90deg_s1_agent:rf_source_ready
	wire          nmr_parameters_pulse_90deg_s1_agent_rf_source_startofpacket;                                   // nmr_parameters_pulse_90deg_s1_agent:rf_source_startofpacket -> nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rf_source_endofpacket;                                     // nmr_parameters_pulse_90deg_s1_agent:rf_source_endofpacket -> nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_valid;                                        // nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:out_valid -> nmr_parameters_pulse_90deg_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_data;                                         // nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:out_data -> nmr_parameters_pulse_90deg_s1_agent:rf_sink_data
	wire          nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_ready;                                        // nmr_parameters_pulse_90deg_s1_agent:rf_sink_ready -> nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_startofpacket;                                // nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_pulse_90deg_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_endofpacket;                                  // nmr_parameters_pulse_90deg_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_pulse_90deg_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_valid;                                      // nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_src_valid -> nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_data;                                       // nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_src_data -> nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_ready;                                      // nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:in_ready -> nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_pulse_t1_s1_agent_m0_readdata;                                                  // nmr_parameters_pulse_t1_s1_translator:uav_readdata -> nmr_parameters_pulse_t1_s1_agent:m0_readdata
	wire          nmr_parameters_pulse_t1_s1_agent_m0_waitrequest;                                               // nmr_parameters_pulse_t1_s1_translator:uav_waitrequest -> nmr_parameters_pulse_t1_s1_agent:m0_waitrequest
	wire          nmr_parameters_pulse_t1_s1_agent_m0_debugaccess;                                               // nmr_parameters_pulse_t1_s1_agent:m0_debugaccess -> nmr_parameters_pulse_t1_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_pulse_t1_s1_agent_m0_address;                                                   // nmr_parameters_pulse_t1_s1_agent:m0_address -> nmr_parameters_pulse_t1_s1_translator:uav_address
	wire    [3:0] nmr_parameters_pulse_t1_s1_agent_m0_byteenable;                                                // nmr_parameters_pulse_t1_s1_agent:m0_byteenable -> nmr_parameters_pulse_t1_s1_translator:uav_byteenable
	wire          nmr_parameters_pulse_t1_s1_agent_m0_read;                                                      // nmr_parameters_pulse_t1_s1_agent:m0_read -> nmr_parameters_pulse_t1_s1_translator:uav_read
	wire          nmr_parameters_pulse_t1_s1_agent_m0_readdatavalid;                                             // nmr_parameters_pulse_t1_s1_translator:uav_readdatavalid -> nmr_parameters_pulse_t1_s1_agent:m0_readdatavalid
	wire          nmr_parameters_pulse_t1_s1_agent_m0_lock;                                                      // nmr_parameters_pulse_t1_s1_agent:m0_lock -> nmr_parameters_pulse_t1_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_pulse_t1_s1_agent_m0_writedata;                                                 // nmr_parameters_pulse_t1_s1_agent:m0_writedata -> nmr_parameters_pulse_t1_s1_translator:uav_writedata
	wire          nmr_parameters_pulse_t1_s1_agent_m0_write;                                                     // nmr_parameters_pulse_t1_s1_agent:m0_write -> nmr_parameters_pulse_t1_s1_translator:uav_write
	wire    [2:0] nmr_parameters_pulse_t1_s1_agent_m0_burstcount;                                                // nmr_parameters_pulse_t1_s1_agent:m0_burstcount -> nmr_parameters_pulse_t1_s1_translator:uav_burstcount
	wire          nmr_parameters_pulse_t1_s1_agent_rf_source_valid;                                              // nmr_parameters_pulse_t1_s1_agent:rf_source_valid -> nmr_parameters_pulse_t1_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_pulse_t1_s1_agent_rf_source_data;                                               // nmr_parameters_pulse_t1_s1_agent:rf_source_data -> nmr_parameters_pulse_t1_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_pulse_t1_s1_agent_rf_source_ready;                                              // nmr_parameters_pulse_t1_s1_agent_rsp_fifo:in_ready -> nmr_parameters_pulse_t1_s1_agent:rf_source_ready
	wire          nmr_parameters_pulse_t1_s1_agent_rf_source_startofpacket;                                      // nmr_parameters_pulse_t1_s1_agent:rf_source_startofpacket -> nmr_parameters_pulse_t1_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rf_source_endofpacket;                                        // nmr_parameters_pulse_t1_s1_agent:rf_source_endofpacket -> nmr_parameters_pulse_t1_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_valid;                                           // nmr_parameters_pulse_t1_s1_agent_rsp_fifo:out_valid -> nmr_parameters_pulse_t1_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_data;                                            // nmr_parameters_pulse_t1_s1_agent_rsp_fifo:out_data -> nmr_parameters_pulse_t1_s1_agent:rf_sink_data
	wire          nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_ready;                                           // nmr_parameters_pulse_t1_s1_agent:rf_sink_ready -> nmr_parameters_pulse_t1_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_startofpacket;                                   // nmr_parameters_pulse_t1_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_pulse_t1_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_endofpacket;                                     // nmr_parameters_pulse_t1_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_pulse_t1_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_valid;                                         // nmr_parameters_pulse_t1_s1_agent:rdata_fifo_src_valid -> nmr_parameters_pulse_t1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_data;                                          // nmr_parameters_pulse_t1_s1_agent:rdata_fifo_src_data -> nmr_parameters_pulse_t1_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_ready;                                         // nmr_parameters_pulse_t1_s1_agent_rdata_fifo:in_ready -> nmr_parameters_pulse_t1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_rx_delay_s1_agent_m0_readdata;                                                  // nmr_parameters_rx_delay_s1_translator:uav_readdata -> nmr_parameters_rx_delay_s1_agent:m0_readdata
	wire          nmr_parameters_rx_delay_s1_agent_m0_waitrequest;                                               // nmr_parameters_rx_delay_s1_translator:uav_waitrequest -> nmr_parameters_rx_delay_s1_agent:m0_waitrequest
	wire          nmr_parameters_rx_delay_s1_agent_m0_debugaccess;                                               // nmr_parameters_rx_delay_s1_agent:m0_debugaccess -> nmr_parameters_rx_delay_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_rx_delay_s1_agent_m0_address;                                                   // nmr_parameters_rx_delay_s1_agent:m0_address -> nmr_parameters_rx_delay_s1_translator:uav_address
	wire    [3:0] nmr_parameters_rx_delay_s1_agent_m0_byteenable;                                                // nmr_parameters_rx_delay_s1_agent:m0_byteenable -> nmr_parameters_rx_delay_s1_translator:uav_byteenable
	wire          nmr_parameters_rx_delay_s1_agent_m0_read;                                                      // nmr_parameters_rx_delay_s1_agent:m0_read -> nmr_parameters_rx_delay_s1_translator:uav_read
	wire          nmr_parameters_rx_delay_s1_agent_m0_readdatavalid;                                             // nmr_parameters_rx_delay_s1_translator:uav_readdatavalid -> nmr_parameters_rx_delay_s1_agent:m0_readdatavalid
	wire          nmr_parameters_rx_delay_s1_agent_m0_lock;                                                      // nmr_parameters_rx_delay_s1_agent:m0_lock -> nmr_parameters_rx_delay_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_rx_delay_s1_agent_m0_writedata;                                                 // nmr_parameters_rx_delay_s1_agent:m0_writedata -> nmr_parameters_rx_delay_s1_translator:uav_writedata
	wire          nmr_parameters_rx_delay_s1_agent_m0_write;                                                     // nmr_parameters_rx_delay_s1_agent:m0_write -> nmr_parameters_rx_delay_s1_translator:uav_write
	wire    [2:0] nmr_parameters_rx_delay_s1_agent_m0_burstcount;                                                // nmr_parameters_rx_delay_s1_agent:m0_burstcount -> nmr_parameters_rx_delay_s1_translator:uav_burstcount
	wire          nmr_parameters_rx_delay_s1_agent_rf_source_valid;                                              // nmr_parameters_rx_delay_s1_agent:rf_source_valid -> nmr_parameters_rx_delay_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_rx_delay_s1_agent_rf_source_data;                                               // nmr_parameters_rx_delay_s1_agent:rf_source_data -> nmr_parameters_rx_delay_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_rx_delay_s1_agent_rf_source_ready;                                              // nmr_parameters_rx_delay_s1_agent_rsp_fifo:in_ready -> nmr_parameters_rx_delay_s1_agent:rf_source_ready
	wire          nmr_parameters_rx_delay_s1_agent_rf_source_startofpacket;                                      // nmr_parameters_rx_delay_s1_agent:rf_source_startofpacket -> nmr_parameters_rx_delay_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rf_source_endofpacket;                                        // nmr_parameters_rx_delay_s1_agent:rf_source_endofpacket -> nmr_parameters_rx_delay_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_valid;                                           // nmr_parameters_rx_delay_s1_agent_rsp_fifo:out_valid -> nmr_parameters_rx_delay_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_data;                                            // nmr_parameters_rx_delay_s1_agent_rsp_fifo:out_data -> nmr_parameters_rx_delay_s1_agent:rf_sink_data
	wire          nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_ready;                                           // nmr_parameters_rx_delay_s1_agent:rf_sink_ready -> nmr_parameters_rx_delay_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_startofpacket;                                   // nmr_parameters_rx_delay_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_rx_delay_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_endofpacket;                                     // nmr_parameters_rx_delay_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_rx_delay_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_valid;                                         // nmr_parameters_rx_delay_s1_agent:rdata_fifo_src_valid -> nmr_parameters_rx_delay_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_data;                                          // nmr_parameters_rx_delay_s1_agent:rdata_fifo_src_data -> nmr_parameters_rx_delay_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_ready;                                         // nmr_parameters_rx_delay_s1_agent_rdata_fifo:in_ready -> nmr_parameters_rx_delay_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ctrl_out_s1_agent_m0_readdata;                                                                 // ctrl_out_s1_translator:uav_readdata -> ctrl_out_s1_agent:m0_readdata
	wire          ctrl_out_s1_agent_m0_waitrequest;                                                              // ctrl_out_s1_translator:uav_waitrequest -> ctrl_out_s1_agent:m0_waitrequest
	wire          ctrl_out_s1_agent_m0_debugaccess;                                                              // ctrl_out_s1_agent:m0_debugaccess -> ctrl_out_s1_translator:uav_debugaccess
	wire   [31:0] ctrl_out_s1_agent_m0_address;                                                                  // ctrl_out_s1_agent:m0_address -> ctrl_out_s1_translator:uav_address
	wire    [3:0] ctrl_out_s1_agent_m0_byteenable;                                                               // ctrl_out_s1_agent:m0_byteenable -> ctrl_out_s1_translator:uav_byteenable
	wire          ctrl_out_s1_agent_m0_read;                                                                     // ctrl_out_s1_agent:m0_read -> ctrl_out_s1_translator:uav_read
	wire          ctrl_out_s1_agent_m0_readdatavalid;                                                            // ctrl_out_s1_translator:uav_readdatavalid -> ctrl_out_s1_agent:m0_readdatavalid
	wire          ctrl_out_s1_agent_m0_lock;                                                                     // ctrl_out_s1_agent:m0_lock -> ctrl_out_s1_translator:uav_lock
	wire   [31:0] ctrl_out_s1_agent_m0_writedata;                                                                // ctrl_out_s1_agent:m0_writedata -> ctrl_out_s1_translator:uav_writedata
	wire          ctrl_out_s1_agent_m0_write;                                                                    // ctrl_out_s1_agent:m0_write -> ctrl_out_s1_translator:uav_write
	wire    [2:0] ctrl_out_s1_agent_m0_burstcount;                                                               // ctrl_out_s1_agent:m0_burstcount -> ctrl_out_s1_translator:uav_burstcount
	wire          ctrl_out_s1_agent_rf_source_valid;                                                             // ctrl_out_s1_agent:rf_source_valid -> ctrl_out_s1_agent_rsp_fifo:in_valid
	wire  [137:0] ctrl_out_s1_agent_rf_source_data;                                                              // ctrl_out_s1_agent:rf_source_data -> ctrl_out_s1_agent_rsp_fifo:in_data
	wire          ctrl_out_s1_agent_rf_source_ready;                                                             // ctrl_out_s1_agent_rsp_fifo:in_ready -> ctrl_out_s1_agent:rf_source_ready
	wire          ctrl_out_s1_agent_rf_source_startofpacket;                                                     // ctrl_out_s1_agent:rf_source_startofpacket -> ctrl_out_s1_agent_rsp_fifo:in_startofpacket
	wire          ctrl_out_s1_agent_rf_source_endofpacket;                                                       // ctrl_out_s1_agent:rf_source_endofpacket -> ctrl_out_s1_agent_rsp_fifo:in_endofpacket
	wire          ctrl_out_s1_agent_rsp_fifo_out_valid;                                                          // ctrl_out_s1_agent_rsp_fifo:out_valid -> ctrl_out_s1_agent:rf_sink_valid
	wire  [137:0] ctrl_out_s1_agent_rsp_fifo_out_data;                                                           // ctrl_out_s1_agent_rsp_fifo:out_data -> ctrl_out_s1_agent:rf_sink_data
	wire          ctrl_out_s1_agent_rsp_fifo_out_ready;                                                          // ctrl_out_s1_agent:rf_sink_ready -> ctrl_out_s1_agent_rsp_fifo:out_ready
	wire          ctrl_out_s1_agent_rsp_fifo_out_startofpacket;                                                  // ctrl_out_s1_agent_rsp_fifo:out_startofpacket -> ctrl_out_s1_agent:rf_sink_startofpacket
	wire          ctrl_out_s1_agent_rsp_fifo_out_endofpacket;                                                    // ctrl_out_s1_agent_rsp_fifo:out_endofpacket -> ctrl_out_s1_agent:rf_sink_endofpacket
	wire          ctrl_out_s1_agent_rdata_fifo_src_valid;                                                        // ctrl_out_s1_agent:rdata_fifo_src_valid -> ctrl_out_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ctrl_out_s1_agent_rdata_fifo_src_data;                                                         // ctrl_out_s1_agent:rdata_fifo_src_data -> ctrl_out_s1_agent_rdata_fifo:in_data
	wire          ctrl_out_s1_agent_rdata_fifo_src_ready;                                                        // ctrl_out_s1_agent_rdata_fifo:in_ready -> ctrl_out_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ctrl_in_s1_agent_m0_readdata;                                                                  // ctrl_in_s1_translator:uav_readdata -> ctrl_in_s1_agent:m0_readdata
	wire          ctrl_in_s1_agent_m0_waitrequest;                                                               // ctrl_in_s1_translator:uav_waitrequest -> ctrl_in_s1_agent:m0_waitrequest
	wire          ctrl_in_s1_agent_m0_debugaccess;                                                               // ctrl_in_s1_agent:m0_debugaccess -> ctrl_in_s1_translator:uav_debugaccess
	wire   [31:0] ctrl_in_s1_agent_m0_address;                                                                   // ctrl_in_s1_agent:m0_address -> ctrl_in_s1_translator:uav_address
	wire    [3:0] ctrl_in_s1_agent_m0_byteenable;                                                                // ctrl_in_s1_agent:m0_byteenable -> ctrl_in_s1_translator:uav_byteenable
	wire          ctrl_in_s1_agent_m0_read;                                                                      // ctrl_in_s1_agent:m0_read -> ctrl_in_s1_translator:uav_read
	wire          ctrl_in_s1_agent_m0_readdatavalid;                                                             // ctrl_in_s1_translator:uav_readdatavalid -> ctrl_in_s1_agent:m0_readdatavalid
	wire          ctrl_in_s1_agent_m0_lock;                                                                      // ctrl_in_s1_agent:m0_lock -> ctrl_in_s1_translator:uav_lock
	wire   [31:0] ctrl_in_s1_agent_m0_writedata;                                                                 // ctrl_in_s1_agent:m0_writedata -> ctrl_in_s1_translator:uav_writedata
	wire          ctrl_in_s1_agent_m0_write;                                                                     // ctrl_in_s1_agent:m0_write -> ctrl_in_s1_translator:uav_write
	wire    [2:0] ctrl_in_s1_agent_m0_burstcount;                                                                // ctrl_in_s1_agent:m0_burstcount -> ctrl_in_s1_translator:uav_burstcount
	wire          ctrl_in_s1_agent_rf_source_valid;                                                              // ctrl_in_s1_agent:rf_source_valid -> ctrl_in_s1_agent_rsp_fifo:in_valid
	wire  [137:0] ctrl_in_s1_agent_rf_source_data;                                                               // ctrl_in_s1_agent:rf_source_data -> ctrl_in_s1_agent_rsp_fifo:in_data
	wire          ctrl_in_s1_agent_rf_source_ready;                                                              // ctrl_in_s1_agent_rsp_fifo:in_ready -> ctrl_in_s1_agent:rf_source_ready
	wire          ctrl_in_s1_agent_rf_source_startofpacket;                                                      // ctrl_in_s1_agent:rf_source_startofpacket -> ctrl_in_s1_agent_rsp_fifo:in_startofpacket
	wire          ctrl_in_s1_agent_rf_source_endofpacket;                                                        // ctrl_in_s1_agent:rf_source_endofpacket -> ctrl_in_s1_agent_rsp_fifo:in_endofpacket
	wire          ctrl_in_s1_agent_rsp_fifo_out_valid;                                                           // ctrl_in_s1_agent_rsp_fifo:out_valid -> ctrl_in_s1_agent:rf_sink_valid
	wire  [137:0] ctrl_in_s1_agent_rsp_fifo_out_data;                                                            // ctrl_in_s1_agent_rsp_fifo:out_data -> ctrl_in_s1_agent:rf_sink_data
	wire          ctrl_in_s1_agent_rsp_fifo_out_ready;                                                           // ctrl_in_s1_agent:rf_sink_ready -> ctrl_in_s1_agent_rsp_fifo:out_ready
	wire          ctrl_in_s1_agent_rsp_fifo_out_startofpacket;                                                   // ctrl_in_s1_agent_rsp_fifo:out_startofpacket -> ctrl_in_s1_agent:rf_sink_startofpacket
	wire          ctrl_in_s1_agent_rsp_fifo_out_endofpacket;                                                     // ctrl_in_s1_agent_rsp_fifo:out_endofpacket -> ctrl_in_s1_agent:rf_sink_endofpacket
	wire          ctrl_in_s1_agent_rdata_fifo_src_valid;                                                         // ctrl_in_s1_agent:rdata_fifo_src_valid -> ctrl_in_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ctrl_in_s1_agent_rdata_fifo_src_data;                                                          // ctrl_in_s1_agent:rdata_fifo_src_data -> ctrl_in_s1_agent_rdata_fifo:in_data
	wire          ctrl_in_s1_agent_rdata_fifo_src_ready;                                                         // ctrl_in_s1_agent_rdata_fifo:in_ready -> ctrl_in_s1_agent:rdata_fifo_src_ready
	wire   [31:0] aux_cnt_out_s1_agent_m0_readdata;                                                              // aux_cnt_out_s1_translator:uav_readdata -> aux_cnt_out_s1_agent:m0_readdata
	wire          aux_cnt_out_s1_agent_m0_waitrequest;                                                           // aux_cnt_out_s1_translator:uav_waitrequest -> aux_cnt_out_s1_agent:m0_waitrequest
	wire          aux_cnt_out_s1_agent_m0_debugaccess;                                                           // aux_cnt_out_s1_agent:m0_debugaccess -> aux_cnt_out_s1_translator:uav_debugaccess
	wire   [31:0] aux_cnt_out_s1_agent_m0_address;                                                               // aux_cnt_out_s1_agent:m0_address -> aux_cnt_out_s1_translator:uav_address
	wire    [3:0] aux_cnt_out_s1_agent_m0_byteenable;                                                            // aux_cnt_out_s1_agent:m0_byteenable -> aux_cnt_out_s1_translator:uav_byteenable
	wire          aux_cnt_out_s1_agent_m0_read;                                                                  // aux_cnt_out_s1_agent:m0_read -> aux_cnt_out_s1_translator:uav_read
	wire          aux_cnt_out_s1_agent_m0_readdatavalid;                                                         // aux_cnt_out_s1_translator:uav_readdatavalid -> aux_cnt_out_s1_agent:m0_readdatavalid
	wire          aux_cnt_out_s1_agent_m0_lock;                                                                  // aux_cnt_out_s1_agent:m0_lock -> aux_cnt_out_s1_translator:uav_lock
	wire   [31:0] aux_cnt_out_s1_agent_m0_writedata;                                                             // aux_cnt_out_s1_agent:m0_writedata -> aux_cnt_out_s1_translator:uav_writedata
	wire          aux_cnt_out_s1_agent_m0_write;                                                                 // aux_cnt_out_s1_agent:m0_write -> aux_cnt_out_s1_translator:uav_write
	wire    [2:0] aux_cnt_out_s1_agent_m0_burstcount;                                                            // aux_cnt_out_s1_agent:m0_burstcount -> aux_cnt_out_s1_translator:uav_burstcount
	wire          aux_cnt_out_s1_agent_rf_source_valid;                                                          // aux_cnt_out_s1_agent:rf_source_valid -> aux_cnt_out_s1_agent_rsp_fifo:in_valid
	wire  [137:0] aux_cnt_out_s1_agent_rf_source_data;                                                           // aux_cnt_out_s1_agent:rf_source_data -> aux_cnt_out_s1_agent_rsp_fifo:in_data
	wire          aux_cnt_out_s1_agent_rf_source_ready;                                                          // aux_cnt_out_s1_agent_rsp_fifo:in_ready -> aux_cnt_out_s1_agent:rf_source_ready
	wire          aux_cnt_out_s1_agent_rf_source_startofpacket;                                                  // aux_cnt_out_s1_agent:rf_source_startofpacket -> aux_cnt_out_s1_agent_rsp_fifo:in_startofpacket
	wire          aux_cnt_out_s1_agent_rf_source_endofpacket;                                                    // aux_cnt_out_s1_agent:rf_source_endofpacket -> aux_cnt_out_s1_agent_rsp_fifo:in_endofpacket
	wire          aux_cnt_out_s1_agent_rsp_fifo_out_valid;                                                       // aux_cnt_out_s1_agent_rsp_fifo:out_valid -> aux_cnt_out_s1_agent:rf_sink_valid
	wire  [137:0] aux_cnt_out_s1_agent_rsp_fifo_out_data;                                                        // aux_cnt_out_s1_agent_rsp_fifo:out_data -> aux_cnt_out_s1_agent:rf_sink_data
	wire          aux_cnt_out_s1_agent_rsp_fifo_out_ready;                                                       // aux_cnt_out_s1_agent:rf_sink_ready -> aux_cnt_out_s1_agent_rsp_fifo:out_ready
	wire          aux_cnt_out_s1_agent_rsp_fifo_out_startofpacket;                                               // aux_cnt_out_s1_agent_rsp_fifo:out_startofpacket -> aux_cnt_out_s1_agent:rf_sink_startofpacket
	wire          aux_cnt_out_s1_agent_rsp_fifo_out_endofpacket;                                                 // aux_cnt_out_s1_agent_rsp_fifo:out_endofpacket -> aux_cnt_out_s1_agent:rf_sink_endofpacket
	wire          aux_cnt_out_s1_agent_rdata_fifo_src_valid;                                                     // aux_cnt_out_s1_agent:rdata_fifo_src_valid -> aux_cnt_out_s1_agent_rdata_fifo:in_valid
	wire   [33:0] aux_cnt_out_s1_agent_rdata_fifo_src_data;                                                      // aux_cnt_out_s1_agent:rdata_fifo_src_data -> aux_cnt_out_s1_agent_rdata_fifo:in_data
	wire          aux_cnt_out_s1_agent_rdata_fifo_src_ready;                                                     // aux_cnt_out_s1_agent_rdata_fifo:in_ready -> aux_cnt_out_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nmr_parameters_samples_per_echo_s1_agent_m0_readdata;                                          // nmr_parameters_samples_per_echo_s1_translator:uav_readdata -> nmr_parameters_samples_per_echo_s1_agent:m0_readdata
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_waitrequest;                                       // nmr_parameters_samples_per_echo_s1_translator:uav_waitrequest -> nmr_parameters_samples_per_echo_s1_agent:m0_waitrequest
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_debugaccess;                                       // nmr_parameters_samples_per_echo_s1_agent:m0_debugaccess -> nmr_parameters_samples_per_echo_s1_translator:uav_debugaccess
	wire   [31:0] nmr_parameters_samples_per_echo_s1_agent_m0_address;                                           // nmr_parameters_samples_per_echo_s1_agent:m0_address -> nmr_parameters_samples_per_echo_s1_translator:uav_address
	wire    [3:0] nmr_parameters_samples_per_echo_s1_agent_m0_byteenable;                                        // nmr_parameters_samples_per_echo_s1_agent:m0_byteenable -> nmr_parameters_samples_per_echo_s1_translator:uav_byteenable
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_read;                                              // nmr_parameters_samples_per_echo_s1_agent:m0_read -> nmr_parameters_samples_per_echo_s1_translator:uav_read
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_readdatavalid;                                     // nmr_parameters_samples_per_echo_s1_translator:uav_readdatavalid -> nmr_parameters_samples_per_echo_s1_agent:m0_readdatavalid
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_lock;                                              // nmr_parameters_samples_per_echo_s1_agent:m0_lock -> nmr_parameters_samples_per_echo_s1_translator:uav_lock
	wire   [31:0] nmr_parameters_samples_per_echo_s1_agent_m0_writedata;                                         // nmr_parameters_samples_per_echo_s1_agent:m0_writedata -> nmr_parameters_samples_per_echo_s1_translator:uav_writedata
	wire          nmr_parameters_samples_per_echo_s1_agent_m0_write;                                             // nmr_parameters_samples_per_echo_s1_agent:m0_write -> nmr_parameters_samples_per_echo_s1_translator:uav_write
	wire    [2:0] nmr_parameters_samples_per_echo_s1_agent_m0_burstcount;                                        // nmr_parameters_samples_per_echo_s1_agent:m0_burstcount -> nmr_parameters_samples_per_echo_s1_translator:uav_burstcount
	wire          nmr_parameters_samples_per_echo_s1_agent_rf_source_valid;                                      // nmr_parameters_samples_per_echo_s1_agent:rf_source_valid -> nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:in_valid
	wire  [137:0] nmr_parameters_samples_per_echo_s1_agent_rf_source_data;                                       // nmr_parameters_samples_per_echo_s1_agent:rf_source_data -> nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:in_data
	wire          nmr_parameters_samples_per_echo_s1_agent_rf_source_ready;                                      // nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:in_ready -> nmr_parameters_samples_per_echo_s1_agent:rf_source_ready
	wire          nmr_parameters_samples_per_echo_s1_agent_rf_source_startofpacket;                              // nmr_parameters_samples_per_echo_s1_agent:rf_source_startofpacket -> nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:in_startofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rf_source_endofpacket;                                // nmr_parameters_samples_per_echo_s1_agent:rf_source_endofpacket -> nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:in_endofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_valid;                                   // nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:out_valid -> nmr_parameters_samples_per_echo_s1_agent:rf_sink_valid
	wire  [137:0] nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_data;                                    // nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:out_data -> nmr_parameters_samples_per_echo_s1_agent:rf_sink_data
	wire          nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_ready;                                   // nmr_parameters_samples_per_echo_s1_agent:rf_sink_ready -> nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:out_ready
	wire          nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_startofpacket;                           // nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:out_startofpacket -> nmr_parameters_samples_per_echo_s1_agent:rf_sink_startofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_endofpacket;                             // nmr_parameters_samples_per_echo_s1_agent_rsp_fifo:out_endofpacket -> nmr_parameters_samples_per_echo_s1_agent:rf_sink_endofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_valid;                                 // nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_src_valid -> nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_data;                                  // nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_src_data -> nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:in_data
	wire          nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_ready;                                 // nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:in_ready -> nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_src_ready
	wire   [31:0] dac_grad_spi_control_port_agent_m0_readdata;                                                   // dac_grad_spi_control_port_translator:uav_readdata -> dac_grad_spi_control_port_agent:m0_readdata
	wire          dac_grad_spi_control_port_agent_m0_waitrequest;                                                // dac_grad_spi_control_port_translator:uav_waitrequest -> dac_grad_spi_control_port_agent:m0_waitrequest
	wire          dac_grad_spi_control_port_agent_m0_debugaccess;                                                // dac_grad_spi_control_port_agent:m0_debugaccess -> dac_grad_spi_control_port_translator:uav_debugaccess
	wire   [31:0] dac_grad_spi_control_port_agent_m0_address;                                                    // dac_grad_spi_control_port_agent:m0_address -> dac_grad_spi_control_port_translator:uav_address
	wire    [3:0] dac_grad_spi_control_port_agent_m0_byteenable;                                                 // dac_grad_spi_control_port_agent:m0_byteenable -> dac_grad_spi_control_port_translator:uav_byteenable
	wire          dac_grad_spi_control_port_agent_m0_read;                                                       // dac_grad_spi_control_port_agent:m0_read -> dac_grad_spi_control_port_translator:uav_read
	wire          dac_grad_spi_control_port_agent_m0_readdatavalid;                                              // dac_grad_spi_control_port_translator:uav_readdatavalid -> dac_grad_spi_control_port_agent:m0_readdatavalid
	wire          dac_grad_spi_control_port_agent_m0_lock;                                                       // dac_grad_spi_control_port_agent:m0_lock -> dac_grad_spi_control_port_translator:uav_lock
	wire   [31:0] dac_grad_spi_control_port_agent_m0_writedata;                                                  // dac_grad_spi_control_port_agent:m0_writedata -> dac_grad_spi_control_port_translator:uav_writedata
	wire          dac_grad_spi_control_port_agent_m0_write;                                                      // dac_grad_spi_control_port_agent:m0_write -> dac_grad_spi_control_port_translator:uav_write
	wire    [2:0] dac_grad_spi_control_port_agent_m0_burstcount;                                                 // dac_grad_spi_control_port_agent:m0_burstcount -> dac_grad_spi_control_port_translator:uav_burstcount
	wire          dac_grad_spi_control_port_agent_rf_source_valid;                                               // dac_grad_spi_control_port_agent:rf_source_valid -> dac_grad_spi_control_port_agent_rsp_fifo:in_valid
	wire  [137:0] dac_grad_spi_control_port_agent_rf_source_data;                                                // dac_grad_spi_control_port_agent:rf_source_data -> dac_grad_spi_control_port_agent_rsp_fifo:in_data
	wire          dac_grad_spi_control_port_agent_rf_source_ready;                                               // dac_grad_spi_control_port_agent_rsp_fifo:in_ready -> dac_grad_spi_control_port_agent:rf_source_ready
	wire          dac_grad_spi_control_port_agent_rf_source_startofpacket;                                       // dac_grad_spi_control_port_agent:rf_source_startofpacket -> dac_grad_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          dac_grad_spi_control_port_agent_rf_source_endofpacket;                                         // dac_grad_spi_control_port_agent:rf_source_endofpacket -> dac_grad_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          dac_grad_spi_control_port_agent_rsp_fifo_out_valid;                                            // dac_grad_spi_control_port_agent_rsp_fifo:out_valid -> dac_grad_spi_control_port_agent:rf_sink_valid
	wire  [137:0] dac_grad_spi_control_port_agent_rsp_fifo_out_data;                                             // dac_grad_spi_control_port_agent_rsp_fifo:out_data -> dac_grad_spi_control_port_agent:rf_sink_data
	wire          dac_grad_spi_control_port_agent_rsp_fifo_out_ready;                                            // dac_grad_spi_control_port_agent:rf_sink_ready -> dac_grad_spi_control_port_agent_rsp_fifo:out_ready
	wire          dac_grad_spi_control_port_agent_rsp_fifo_out_startofpacket;                                    // dac_grad_spi_control_port_agent_rsp_fifo:out_startofpacket -> dac_grad_spi_control_port_agent:rf_sink_startofpacket
	wire          dac_grad_spi_control_port_agent_rsp_fifo_out_endofpacket;                                      // dac_grad_spi_control_port_agent_rsp_fifo:out_endofpacket -> dac_grad_spi_control_port_agent:rf_sink_endofpacket
	wire          dac_grad_spi_control_port_agent_rdata_fifo_src_valid;                                          // dac_grad_spi_control_port_agent:rdata_fifo_src_valid -> dac_grad_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] dac_grad_spi_control_port_agent_rdata_fifo_src_data;                                           // dac_grad_spi_control_port_agent:rdata_fifo_src_data -> dac_grad_spi_control_port_agent_rdata_fifo:in_data
	wire          dac_grad_spi_control_port_agent_rdata_fifo_src_ready;                                          // dac_grad_spi_control_port_agent_rdata_fifo:in_ready -> dac_grad_spi_control_port_agent:rdata_fifo_src_ready
	wire   [31:0] spi_mtch_ntwrk_spi_control_port_agent_m0_readdata;                                             // spi_mtch_ntwrk_spi_control_port_translator:uav_readdata -> spi_mtch_ntwrk_spi_control_port_agent:m0_readdata
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_waitrequest;                                          // spi_mtch_ntwrk_spi_control_port_translator:uav_waitrequest -> spi_mtch_ntwrk_spi_control_port_agent:m0_waitrequest
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_debugaccess;                                          // spi_mtch_ntwrk_spi_control_port_agent:m0_debugaccess -> spi_mtch_ntwrk_spi_control_port_translator:uav_debugaccess
	wire   [31:0] spi_mtch_ntwrk_spi_control_port_agent_m0_address;                                              // spi_mtch_ntwrk_spi_control_port_agent:m0_address -> spi_mtch_ntwrk_spi_control_port_translator:uav_address
	wire    [3:0] spi_mtch_ntwrk_spi_control_port_agent_m0_byteenable;                                           // spi_mtch_ntwrk_spi_control_port_agent:m0_byteenable -> spi_mtch_ntwrk_spi_control_port_translator:uav_byteenable
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_read;                                                 // spi_mtch_ntwrk_spi_control_port_agent:m0_read -> spi_mtch_ntwrk_spi_control_port_translator:uav_read
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_readdatavalid;                                        // spi_mtch_ntwrk_spi_control_port_translator:uav_readdatavalid -> spi_mtch_ntwrk_spi_control_port_agent:m0_readdatavalid
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_lock;                                                 // spi_mtch_ntwrk_spi_control_port_agent:m0_lock -> spi_mtch_ntwrk_spi_control_port_translator:uav_lock
	wire   [31:0] spi_mtch_ntwrk_spi_control_port_agent_m0_writedata;                                            // spi_mtch_ntwrk_spi_control_port_agent:m0_writedata -> spi_mtch_ntwrk_spi_control_port_translator:uav_writedata
	wire          spi_mtch_ntwrk_spi_control_port_agent_m0_write;                                                // spi_mtch_ntwrk_spi_control_port_agent:m0_write -> spi_mtch_ntwrk_spi_control_port_translator:uav_write
	wire    [2:0] spi_mtch_ntwrk_spi_control_port_agent_m0_burstcount;                                           // spi_mtch_ntwrk_spi_control_port_agent:m0_burstcount -> spi_mtch_ntwrk_spi_control_port_translator:uav_burstcount
	wire          spi_mtch_ntwrk_spi_control_port_agent_rf_source_valid;                                         // spi_mtch_ntwrk_spi_control_port_agent:rf_source_valid -> spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:in_valid
	wire  [137:0] spi_mtch_ntwrk_spi_control_port_agent_rf_source_data;                                          // spi_mtch_ntwrk_spi_control_port_agent:rf_source_data -> spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_mtch_ntwrk_spi_control_port_agent_rf_source_ready;                                         // spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:in_ready -> spi_mtch_ntwrk_spi_control_port_agent:rf_source_ready
	wire          spi_mtch_ntwrk_spi_control_port_agent_rf_source_startofpacket;                                 // spi_mtch_ntwrk_spi_control_port_agent:rf_source_startofpacket -> spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rf_source_endofpacket;                                   // spi_mtch_ntwrk_spi_control_port_agent:rf_source_endofpacket -> spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_valid;                                      // spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:out_valid -> spi_mtch_ntwrk_spi_control_port_agent:rf_sink_valid
	wire  [137:0] spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_data;                                       // spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:out_data -> spi_mtch_ntwrk_spi_control_port_agent:rf_sink_data
	wire          spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_ready;                                      // spi_mtch_ntwrk_spi_control_port_agent:rf_sink_ready -> spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_startofpacket;                              // spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_mtch_ntwrk_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_endofpacket;                                // spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_mtch_ntwrk_spi_control_port_agent:rf_sink_endofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_valid;                                    // spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_src_valid -> spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_data;                                     // spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_src_data -> spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:in_data
	wire          spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_ready;                                    // spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:in_ready -> spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_src_ready
	wire   [31:0] spi_afe_relays_spi_control_port_agent_m0_readdata;                                             // spi_afe_relays_spi_control_port_translator:uav_readdata -> spi_afe_relays_spi_control_port_agent:m0_readdata
	wire          spi_afe_relays_spi_control_port_agent_m0_waitrequest;                                          // spi_afe_relays_spi_control_port_translator:uav_waitrequest -> spi_afe_relays_spi_control_port_agent:m0_waitrequest
	wire          spi_afe_relays_spi_control_port_agent_m0_debugaccess;                                          // spi_afe_relays_spi_control_port_agent:m0_debugaccess -> spi_afe_relays_spi_control_port_translator:uav_debugaccess
	wire   [31:0] spi_afe_relays_spi_control_port_agent_m0_address;                                              // spi_afe_relays_spi_control_port_agent:m0_address -> spi_afe_relays_spi_control_port_translator:uav_address
	wire    [3:0] spi_afe_relays_spi_control_port_agent_m0_byteenable;                                           // spi_afe_relays_spi_control_port_agent:m0_byteenable -> spi_afe_relays_spi_control_port_translator:uav_byteenable
	wire          spi_afe_relays_spi_control_port_agent_m0_read;                                                 // spi_afe_relays_spi_control_port_agent:m0_read -> spi_afe_relays_spi_control_port_translator:uav_read
	wire          spi_afe_relays_spi_control_port_agent_m0_readdatavalid;                                        // spi_afe_relays_spi_control_port_translator:uav_readdatavalid -> spi_afe_relays_spi_control_port_agent:m0_readdatavalid
	wire          spi_afe_relays_spi_control_port_agent_m0_lock;                                                 // spi_afe_relays_spi_control_port_agent:m0_lock -> spi_afe_relays_spi_control_port_translator:uav_lock
	wire   [31:0] spi_afe_relays_spi_control_port_agent_m0_writedata;                                            // spi_afe_relays_spi_control_port_agent:m0_writedata -> spi_afe_relays_spi_control_port_translator:uav_writedata
	wire          spi_afe_relays_spi_control_port_agent_m0_write;                                                // spi_afe_relays_spi_control_port_agent:m0_write -> spi_afe_relays_spi_control_port_translator:uav_write
	wire    [2:0] spi_afe_relays_spi_control_port_agent_m0_burstcount;                                           // spi_afe_relays_spi_control_port_agent:m0_burstcount -> spi_afe_relays_spi_control_port_translator:uav_burstcount
	wire          spi_afe_relays_spi_control_port_agent_rf_source_valid;                                         // spi_afe_relays_spi_control_port_agent:rf_source_valid -> spi_afe_relays_spi_control_port_agent_rsp_fifo:in_valid
	wire  [137:0] spi_afe_relays_spi_control_port_agent_rf_source_data;                                          // spi_afe_relays_spi_control_port_agent:rf_source_data -> spi_afe_relays_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_afe_relays_spi_control_port_agent_rf_source_ready;                                         // spi_afe_relays_spi_control_port_agent_rsp_fifo:in_ready -> spi_afe_relays_spi_control_port_agent:rf_source_ready
	wire          spi_afe_relays_spi_control_port_agent_rf_source_startofpacket;                                 // spi_afe_relays_spi_control_port_agent:rf_source_startofpacket -> spi_afe_relays_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_afe_relays_spi_control_port_agent_rf_source_endofpacket;                                   // spi_afe_relays_spi_control_port_agent:rf_source_endofpacket -> spi_afe_relays_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_afe_relays_spi_control_port_agent_rsp_fifo_out_valid;                                      // spi_afe_relays_spi_control_port_agent_rsp_fifo:out_valid -> spi_afe_relays_spi_control_port_agent:rf_sink_valid
	wire  [137:0] spi_afe_relays_spi_control_port_agent_rsp_fifo_out_data;                                       // spi_afe_relays_spi_control_port_agent_rsp_fifo:out_data -> spi_afe_relays_spi_control_port_agent:rf_sink_data
	wire          spi_afe_relays_spi_control_port_agent_rsp_fifo_out_ready;                                      // spi_afe_relays_spi_control_port_agent:rf_sink_ready -> spi_afe_relays_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_afe_relays_spi_control_port_agent_rsp_fifo_out_startofpacket;                              // spi_afe_relays_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_afe_relays_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_afe_relays_spi_control_port_agent_rsp_fifo_out_endofpacket;                                // spi_afe_relays_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_afe_relays_spi_control_port_agent:rf_sink_endofpacket
	wire          spi_afe_relays_spi_control_port_agent_rdata_fifo_src_valid;                                    // spi_afe_relays_spi_control_port_agent:rdata_fifo_src_valid -> spi_afe_relays_spi_control_port_agent_rdata_fifo:in_valid
	wire   [33:0] spi_afe_relays_spi_control_port_agent_rdata_fifo_src_data;                                     // spi_afe_relays_spi_control_port_agent:rdata_fifo_src_data -> spi_afe_relays_spi_control_port_agent_rdata_fifo:in_data
	wire          spi_afe_relays_spi_control_port_agent_rdata_fifo_src_ready;                                    // spi_afe_relays_spi_control_port_agent_rdata_fifo:in_ready -> spi_afe_relays_spi_control_port_agent:rdata_fifo_src_ready
	wire   [31:0] dma_fifo_control_port_slave_agent_m0_readdata;                                                 // dma_fifo_control_port_slave_translator:uav_readdata -> dma_fifo_control_port_slave_agent:m0_readdata
	wire          dma_fifo_control_port_slave_agent_m0_waitrequest;                                              // dma_fifo_control_port_slave_translator:uav_waitrequest -> dma_fifo_control_port_slave_agent:m0_waitrequest
	wire          dma_fifo_control_port_slave_agent_m0_debugaccess;                                              // dma_fifo_control_port_slave_agent:m0_debugaccess -> dma_fifo_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_fifo_control_port_slave_agent_m0_address;                                                  // dma_fifo_control_port_slave_agent:m0_address -> dma_fifo_control_port_slave_translator:uav_address
	wire    [3:0] dma_fifo_control_port_slave_agent_m0_byteenable;                                               // dma_fifo_control_port_slave_agent:m0_byteenable -> dma_fifo_control_port_slave_translator:uav_byteenable
	wire          dma_fifo_control_port_slave_agent_m0_read;                                                     // dma_fifo_control_port_slave_agent:m0_read -> dma_fifo_control_port_slave_translator:uav_read
	wire          dma_fifo_control_port_slave_agent_m0_readdatavalid;                                            // dma_fifo_control_port_slave_translator:uav_readdatavalid -> dma_fifo_control_port_slave_agent:m0_readdatavalid
	wire          dma_fifo_control_port_slave_agent_m0_lock;                                                     // dma_fifo_control_port_slave_agent:m0_lock -> dma_fifo_control_port_slave_translator:uav_lock
	wire   [31:0] dma_fifo_control_port_slave_agent_m0_writedata;                                                // dma_fifo_control_port_slave_agent:m0_writedata -> dma_fifo_control_port_slave_translator:uav_writedata
	wire          dma_fifo_control_port_slave_agent_m0_write;                                                    // dma_fifo_control_port_slave_agent:m0_write -> dma_fifo_control_port_slave_translator:uav_write
	wire    [2:0] dma_fifo_control_port_slave_agent_m0_burstcount;                                               // dma_fifo_control_port_slave_agent:m0_burstcount -> dma_fifo_control_port_slave_translator:uav_burstcount
	wire          dma_fifo_control_port_slave_agent_rf_source_valid;                                             // dma_fifo_control_port_slave_agent:rf_source_valid -> dma_fifo_control_port_slave_agent_rsp_fifo:in_valid
	wire  [137:0] dma_fifo_control_port_slave_agent_rf_source_data;                                              // dma_fifo_control_port_slave_agent:rf_source_data -> dma_fifo_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_fifo_control_port_slave_agent_rf_source_ready;                                             // dma_fifo_control_port_slave_agent_rsp_fifo:in_ready -> dma_fifo_control_port_slave_agent:rf_source_ready
	wire          dma_fifo_control_port_slave_agent_rf_source_startofpacket;                                     // dma_fifo_control_port_slave_agent:rf_source_startofpacket -> dma_fifo_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_fifo_control_port_slave_agent_rf_source_endofpacket;                                       // dma_fifo_control_port_slave_agent:rf_source_endofpacket -> dma_fifo_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_fifo_control_port_slave_agent_rsp_fifo_out_valid;                                          // dma_fifo_control_port_slave_agent_rsp_fifo:out_valid -> dma_fifo_control_port_slave_agent:rf_sink_valid
	wire  [137:0] dma_fifo_control_port_slave_agent_rsp_fifo_out_data;                                           // dma_fifo_control_port_slave_agent_rsp_fifo:out_data -> dma_fifo_control_port_slave_agent:rf_sink_data
	wire          dma_fifo_control_port_slave_agent_rsp_fifo_out_ready;                                          // dma_fifo_control_port_slave_agent:rf_sink_ready -> dma_fifo_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_fifo_control_port_slave_agent_rsp_fifo_out_startofpacket;                                  // dma_fifo_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_fifo_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_fifo_control_port_slave_agent_rsp_fifo_out_endofpacket;                                    // dma_fifo_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_fifo_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_fifo_control_port_slave_agent_rdata_fifo_src_valid;                                        // dma_fifo_control_port_slave_agent:rdata_fifo_src_valid -> dma_fifo_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_fifo_control_port_slave_agent_rdata_fifo_src_data;                                         // dma_fifo_control_port_slave_agent:rdata_fifo_src_data -> dma_fifo_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_fifo_control_port_slave_agent_rdata_fifo_src_ready;                                        // dma_fifo_control_port_slave_agent_rdata_fifo:in_ready -> dma_fifo_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dma_dconvi_control_port_slave_agent_m0_readdata;                                               // dma_dconvi_control_port_slave_translator:uav_readdata -> dma_dconvi_control_port_slave_agent:m0_readdata
	wire          dma_dconvi_control_port_slave_agent_m0_waitrequest;                                            // dma_dconvi_control_port_slave_translator:uav_waitrequest -> dma_dconvi_control_port_slave_agent:m0_waitrequest
	wire          dma_dconvi_control_port_slave_agent_m0_debugaccess;                                            // dma_dconvi_control_port_slave_agent:m0_debugaccess -> dma_dconvi_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_dconvi_control_port_slave_agent_m0_address;                                                // dma_dconvi_control_port_slave_agent:m0_address -> dma_dconvi_control_port_slave_translator:uav_address
	wire    [3:0] dma_dconvi_control_port_slave_agent_m0_byteenable;                                             // dma_dconvi_control_port_slave_agent:m0_byteenable -> dma_dconvi_control_port_slave_translator:uav_byteenable
	wire          dma_dconvi_control_port_slave_agent_m0_read;                                                   // dma_dconvi_control_port_slave_agent:m0_read -> dma_dconvi_control_port_slave_translator:uav_read
	wire          dma_dconvi_control_port_slave_agent_m0_readdatavalid;                                          // dma_dconvi_control_port_slave_translator:uav_readdatavalid -> dma_dconvi_control_port_slave_agent:m0_readdatavalid
	wire          dma_dconvi_control_port_slave_agent_m0_lock;                                                   // dma_dconvi_control_port_slave_agent:m0_lock -> dma_dconvi_control_port_slave_translator:uav_lock
	wire   [31:0] dma_dconvi_control_port_slave_agent_m0_writedata;                                              // dma_dconvi_control_port_slave_agent:m0_writedata -> dma_dconvi_control_port_slave_translator:uav_writedata
	wire          dma_dconvi_control_port_slave_agent_m0_write;                                                  // dma_dconvi_control_port_slave_agent:m0_write -> dma_dconvi_control_port_slave_translator:uav_write
	wire    [2:0] dma_dconvi_control_port_slave_agent_m0_burstcount;                                             // dma_dconvi_control_port_slave_agent:m0_burstcount -> dma_dconvi_control_port_slave_translator:uav_burstcount
	wire          dma_dconvi_control_port_slave_agent_rf_source_valid;                                           // dma_dconvi_control_port_slave_agent:rf_source_valid -> dma_dconvi_control_port_slave_agent_rsp_fifo:in_valid
	wire  [137:0] dma_dconvi_control_port_slave_agent_rf_source_data;                                            // dma_dconvi_control_port_slave_agent:rf_source_data -> dma_dconvi_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_dconvi_control_port_slave_agent_rf_source_ready;                                           // dma_dconvi_control_port_slave_agent_rsp_fifo:in_ready -> dma_dconvi_control_port_slave_agent:rf_source_ready
	wire          dma_dconvi_control_port_slave_agent_rf_source_startofpacket;                                   // dma_dconvi_control_port_slave_agent:rf_source_startofpacket -> dma_dconvi_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_dconvi_control_port_slave_agent_rf_source_endofpacket;                                     // dma_dconvi_control_port_slave_agent:rf_source_endofpacket -> dma_dconvi_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_dconvi_control_port_slave_agent_rsp_fifo_out_valid;                                        // dma_dconvi_control_port_slave_agent_rsp_fifo:out_valid -> dma_dconvi_control_port_slave_agent:rf_sink_valid
	wire  [137:0] dma_dconvi_control_port_slave_agent_rsp_fifo_out_data;                                         // dma_dconvi_control_port_slave_agent_rsp_fifo:out_data -> dma_dconvi_control_port_slave_agent:rf_sink_data
	wire          dma_dconvi_control_port_slave_agent_rsp_fifo_out_ready;                                        // dma_dconvi_control_port_slave_agent:rf_sink_ready -> dma_dconvi_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_dconvi_control_port_slave_agent_rsp_fifo_out_startofpacket;                                // dma_dconvi_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_dconvi_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_dconvi_control_port_slave_agent_rsp_fifo_out_endofpacket;                                  // dma_dconvi_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_dconvi_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_dconvi_control_port_slave_agent_rdata_fifo_src_valid;                                      // dma_dconvi_control_port_slave_agent:rdata_fifo_src_valid -> dma_dconvi_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_dconvi_control_port_slave_agent_rdata_fifo_src_data;                                       // dma_dconvi_control_port_slave_agent:rdata_fifo_src_data -> dma_dconvi_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_dconvi_control_port_slave_agent_rdata_fifo_src_ready;                                      // dma_dconvi_control_port_slave_agent_rdata_fifo:in_ready -> dma_dconvi_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dma_dconvq_control_port_slave_agent_m0_readdata;                                               // dma_dconvq_control_port_slave_translator:uav_readdata -> dma_dconvq_control_port_slave_agent:m0_readdata
	wire          dma_dconvq_control_port_slave_agent_m0_waitrequest;                                            // dma_dconvq_control_port_slave_translator:uav_waitrequest -> dma_dconvq_control_port_slave_agent:m0_waitrequest
	wire          dma_dconvq_control_port_slave_agent_m0_debugaccess;                                            // dma_dconvq_control_port_slave_agent:m0_debugaccess -> dma_dconvq_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_dconvq_control_port_slave_agent_m0_address;                                                // dma_dconvq_control_port_slave_agent:m0_address -> dma_dconvq_control_port_slave_translator:uav_address
	wire    [3:0] dma_dconvq_control_port_slave_agent_m0_byteenable;                                             // dma_dconvq_control_port_slave_agent:m0_byteenable -> dma_dconvq_control_port_slave_translator:uav_byteenable
	wire          dma_dconvq_control_port_slave_agent_m0_read;                                                   // dma_dconvq_control_port_slave_agent:m0_read -> dma_dconvq_control_port_slave_translator:uav_read
	wire          dma_dconvq_control_port_slave_agent_m0_readdatavalid;                                          // dma_dconvq_control_port_slave_translator:uav_readdatavalid -> dma_dconvq_control_port_slave_agent:m0_readdatavalid
	wire          dma_dconvq_control_port_slave_agent_m0_lock;                                                   // dma_dconvq_control_port_slave_agent:m0_lock -> dma_dconvq_control_port_slave_translator:uav_lock
	wire   [31:0] dma_dconvq_control_port_slave_agent_m0_writedata;                                              // dma_dconvq_control_port_slave_agent:m0_writedata -> dma_dconvq_control_port_slave_translator:uav_writedata
	wire          dma_dconvq_control_port_slave_agent_m0_write;                                                  // dma_dconvq_control_port_slave_agent:m0_write -> dma_dconvq_control_port_slave_translator:uav_write
	wire    [2:0] dma_dconvq_control_port_slave_agent_m0_burstcount;                                             // dma_dconvq_control_port_slave_agent:m0_burstcount -> dma_dconvq_control_port_slave_translator:uav_burstcount
	wire          dma_dconvq_control_port_slave_agent_rf_source_valid;                                           // dma_dconvq_control_port_slave_agent:rf_source_valid -> dma_dconvq_control_port_slave_agent_rsp_fifo:in_valid
	wire  [137:0] dma_dconvq_control_port_slave_agent_rf_source_data;                                            // dma_dconvq_control_port_slave_agent:rf_source_data -> dma_dconvq_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_dconvq_control_port_slave_agent_rf_source_ready;                                           // dma_dconvq_control_port_slave_agent_rsp_fifo:in_ready -> dma_dconvq_control_port_slave_agent:rf_source_ready
	wire          dma_dconvq_control_port_slave_agent_rf_source_startofpacket;                                   // dma_dconvq_control_port_slave_agent:rf_source_startofpacket -> dma_dconvq_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_dconvq_control_port_slave_agent_rf_source_endofpacket;                                     // dma_dconvq_control_port_slave_agent:rf_source_endofpacket -> dma_dconvq_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_dconvq_control_port_slave_agent_rsp_fifo_out_valid;                                        // dma_dconvq_control_port_slave_agent_rsp_fifo:out_valid -> dma_dconvq_control_port_slave_agent:rf_sink_valid
	wire  [137:0] dma_dconvq_control_port_slave_agent_rsp_fifo_out_data;                                         // dma_dconvq_control_port_slave_agent_rsp_fifo:out_data -> dma_dconvq_control_port_slave_agent:rf_sink_data
	wire          dma_dconvq_control_port_slave_agent_rsp_fifo_out_ready;                                        // dma_dconvq_control_port_slave_agent:rf_sink_ready -> dma_dconvq_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_dconvq_control_port_slave_agent_rsp_fifo_out_startofpacket;                                // dma_dconvq_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_dconvq_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_dconvq_control_port_slave_agent_rsp_fifo_out_endofpacket;                                  // dma_dconvq_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_dconvq_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_dconvq_control_port_slave_agent_rdata_fifo_src_valid;                                      // dma_dconvq_control_port_slave_agent:rdata_fifo_src_valid -> dma_dconvq_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_dconvq_control_port_slave_agent_rdata_fifo_src_data;                                       // dma_dconvq_control_port_slave_agent:rdata_fifo_src_data -> dma_dconvq_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_dconvq_control_port_slave_agent_rdata_fifo_src_ready;                                      // dma_dconvq_control_port_slave_agent_rdata_fifo:in_ready -> dma_dconvq_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dma_dummy_control_port_slave_agent_m0_readdata;                                                // dma_dummy_control_port_slave_translator:uav_readdata -> dma_dummy_control_port_slave_agent:m0_readdata
	wire          dma_dummy_control_port_slave_agent_m0_waitrequest;                                             // dma_dummy_control_port_slave_translator:uav_waitrequest -> dma_dummy_control_port_slave_agent:m0_waitrequest
	wire          dma_dummy_control_port_slave_agent_m0_debugaccess;                                             // dma_dummy_control_port_slave_agent:m0_debugaccess -> dma_dummy_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_dummy_control_port_slave_agent_m0_address;                                                 // dma_dummy_control_port_slave_agent:m0_address -> dma_dummy_control_port_slave_translator:uav_address
	wire    [3:0] dma_dummy_control_port_slave_agent_m0_byteenable;                                              // dma_dummy_control_port_slave_agent:m0_byteenable -> dma_dummy_control_port_slave_translator:uav_byteenable
	wire          dma_dummy_control_port_slave_agent_m0_read;                                                    // dma_dummy_control_port_slave_agent:m0_read -> dma_dummy_control_port_slave_translator:uav_read
	wire          dma_dummy_control_port_slave_agent_m0_readdatavalid;                                           // dma_dummy_control_port_slave_translator:uav_readdatavalid -> dma_dummy_control_port_slave_agent:m0_readdatavalid
	wire          dma_dummy_control_port_slave_agent_m0_lock;                                                    // dma_dummy_control_port_slave_agent:m0_lock -> dma_dummy_control_port_slave_translator:uav_lock
	wire   [31:0] dma_dummy_control_port_slave_agent_m0_writedata;                                               // dma_dummy_control_port_slave_agent:m0_writedata -> dma_dummy_control_port_slave_translator:uav_writedata
	wire          dma_dummy_control_port_slave_agent_m0_write;                                                   // dma_dummy_control_port_slave_agent:m0_write -> dma_dummy_control_port_slave_translator:uav_write
	wire    [2:0] dma_dummy_control_port_slave_agent_m0_burstcount;                                              // dma_dummy_control_port_slave_agent:m0_burstcount -> dma_dummy_control_port_slave_translator:uav_burstcount
	wire          dma_dummy_control_port_slave_agent_rf_source_valid;                                            // dma_dummy_control_port_slave_agent:rf_source_valid -> dma_dummy_control_port_slave_agent_rsp_fifo:in_valid
	wire  [137:0] dma_dummy_control_port_slave_agent_rf_source_data;                                             // dma_dummy_control_port_slave_agent:rf_source_data -> dma_dummy_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_dummy_control_port_slave_agent_rf_source_ready;                                            // dma_dummy_control_port_slave_agent_rsp_fifo:in_ready -> dma_dummy_control_port_slave_agent:rf_source_ready
	wire          dma_dummy_control_port_slave_agent_rf_source_startofpacket;                                    // dma_dummy_control_port_slave_agent:rf_source_startofpacket -> dma_dummy_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_dummy_control_port_slave_agent_rf_source_endofpacket;                                      // dma_dummy_control_port_slave_agent:rf_source_endofpacket -> dma_dummy_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_dummy_control_port_slave_agent_rsp_fifo_out_valid;                                         // dma_dummy_control_port_slave_agent_rsp_fifo:out_valid -> dma_dummy_control_port_slave_agent:rf_sink_valid
	wire  [137:0] dma_dummy_control_port_slave_agent_rsp_fifo_out_data;                                          // dma_dummy_control_port_slave_agent_rsp_fifo:out_data -> dma_dummy_control_port_slave_agent:rf_sink_data
	wire          dma_dummy_control_port_slave_agent_rsp_fifo_out_ready;                                         // dma_dummy_control_port_slave_agent:rf_sink_ready -> dma_dummy_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_dummy_control_port_slave_agent_rsp_fifo_out_startofpacket;                                 // dma_dummy_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_dummy_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_dummy_control_port_slave_agent_rsp_fifo_out_endofpacket;                                   // dma_dummy_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_dummy_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_dummy_control_port_slave_agent_rdata_fifo_src_valid;                                       // dma_dummy_control_port_slave_agent:rdata_fifo_src_valid -> dma_dummy_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_dummy_control_port_slave_agent_rdata_fifo_src_data;                                        // dma_dummy_control_port_slave_agent:rdata_fifo_src_data -> dma_dummy_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_dummy_control_port_slave_agent_rdata_fifo_src_ready;                                       // dma_dummy_control_port_slave_agent_rdata_fifo:in_ready -> dma_dummy_control_port_slave_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                                     // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [244:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                      // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                                     // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                             // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                               // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                      // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [244:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                       // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                      // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                              // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                                // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          dma_fifo_write_master_agent_cp_valid;                                                          // dma_fifo_write_master_agent:cp_valid -> router_002:sink_valid
	wire  [136:0] dma_fifo_write_master_agent_cp_data;                                                           // dma_fifo_write_master_agent:cp_data -> router_002:sink_data
	wire          dma_fifo_write_master_agent_cp_ready;                                                          // router_002:sink_ready -> dma_fifo_write_master_agent:cp_ready
	wire          dma_fifo_write_master_agent_cp_startofpacket;                                                  // dma_fifo_write_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          dma_fifo_write_master_agent_cp_endofpacket;                                                    // dma_fifo_write_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                          // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [136:0] router_002_src_data;                                                                           // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                          // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [44:0] router_002_src_channel;                                                                        // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                  // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                    // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          dma_dconvi_write_master_agent_cp_valid;                                                        // dma_dconvi_write_master_agent:cp_valid -> router_003:sink_valid
	wire  [136:0] dma_dconvi_write_master_agent_cp_data;                                                         // dma_dconvi_write_master_agent:cp_data -> router_003:sink_data
	wire          dma_dconvi_write_master_agent_cp_ready;                                                        // router_003:sink_ready -> dma_dconvi_write_master_agent:cp_ready
	wire          dma_dconvi_write_master_agent_cp_startofpacket;                                                // dma_dconvi_write_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          dma_dconvi_write_master_agent_cp_endofpacket;                                                  // dma_dconvi_write_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                          // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [136:0] router_003_src_data;                                                                           // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                          // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [44:0] router_003_src_channel;                                                                        // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                  // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                    // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          dma_dconvq_write_master_agent_cp_valid;                                                        // dma_dconvq_write_master_agent:cp_valid -> router_004:sink_valid
	wire  [136:0] dma_dconvq_write_master_agent_cp_data;                                                         // dma_dconvq_write_master_agent:cp_data -> router_004:sink_data
	wire          dma_dconvq_write_master_agent_cp_ready;                                                        // router_004:sink_ready -> dma_dconvq_write_master_agent:cp_ready
	wire          dma_dconvq_write_master_agent_cp_startofpacket;                                                // dma_dconvq_write_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          dma_dconvq_write_master_agent_cp_endofpacket;                                                  // dma_dconvq_write_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                          // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [136:0] router_004_src_data;                                                                           // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                          // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [44:0] router_004_src_channel;                                                                        // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                  // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                    // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          dma_dummy_write_master_agent_cp_valid;                                                         // dma_dummy_write_master_agent:cp_valid -> router_005:sink_valid
	wire  [136:0] dma_dummy_write_master_agent_cp_data;                                                          // dma_dummy_write_master_agent:cp_data -> router_005:sink_data
	wire          dma_dummy_write_master_agent_cp_ready;                                                         // router_005:sink_ready -> dma_dummy_write_master_agent:cp_ready
	wire          dma_dummy_write_master_agent_cp_startofpacket;                                                 // dma_dummy_write_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          dma_dummy_write_master_agent_cp_endofpacket;                                                   // dma_dummy_write_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                          // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [136:0] router_005_src_data;                                                                           // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                          // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [44:0] router_005_src_channel;                                                                        // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                                  // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                    // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          dma_fifo_read_master_agent_cp_valid;                                                           // dma_fifo_read_master_agent:cp_valid -> router_006:sink_valid
	wire  [136:0] dma_fifo_read_master_agent_cp_data;                                                            // dma_fifo_read_master_agent:cp_data -> router_006:sink_data
	wire          dma_fifo_read_master_agent_cp_ready;                                                           // router_006:sink_ready -> dma_fifo_read_master_agent:cp_ready
	wire          dma_fifo_read_master_agent_cp_startofpacket;                                                   // dma_fifo_read_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          dma_fifo_read_master_agent_cp_endofpacket;                                                     // dma_fifo_read_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                  // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_007:sink_valid
	wire  [136:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                   // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_007:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                  // router_007:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                          // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_007:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                            // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_007:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                   // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_008:sink_valid
	wire  [136:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                    // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_008:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                   // router_008:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                           // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_008:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                             // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_008:sink_endofpacket
	wire          master_non_sec_master_agent_cp_valid;                                                          // master_non_sec_master_agent:cp_valid -> router_009:sink_valid
	wire  [136:0] master_non_sec_master_agent_cp_data;                                                           // master_non_sec_master_agent:cp_data -> router_009:sink_data
	wire          master_non_sec_master_agent_cp_ready;                                                          // router_009:sink_ready -> master_non_sec_master_agent:cp_ready
	wire          master_non_sec_master_agent_cp_startofpacket;                                                  // master_non_sec_master_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          master_non_sec_master_agent_cp_endofpacket;                                                    // master_non_sec_master_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          dma_dconvq_read_master_agent_cp_valid;                                                         // dma_dconvq_read_master_agent:cp_valid -> router_010:sink_valid
	wire  [136:0] dma_dconvq_read_master_agent_cp_data;                                                          // dma_dconvq_read_master_agent:cp_data -> router_010:sink_data
	wire          dma_dconvq_read_master_agent_cp_ready;                                                         // router_010:sink_ready -> dma_dconvq_read_master_agent:cp_ready
	wire          dma_dconvq_read_master_agent_cp_startofpacket;                                                 // dma_dconvq_read_master_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          dma_dconvq_read_master_agent_cp_endofpacket;                                                   // dma_dconvq_read_master_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                          // router_010:src_valid -> cmd_demux_010:sink_valid
	wire  [136:0] router_010_src_data;                                                                           // router_010:src_data -> cmd_demux_010:sink_data
	wire          router_010_src_ready;                                                                          // cmd_demux_010:sink_ready -> router_010:src_ready
	wire   [44:0] router_010_src_channel;                                                                        // router_010:src_channel -> cmd_demux_010:sink_channel
	wire          router_010_src_startofpacket;                                                                  // router_010:src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                    // router_010:src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          dma_dconvi_read_master_agent_cp_valid;                                                         // dma_dconvi_read_master_agent:cp_valid -> router_011:sink_valid
	wire  [136:0] dma_dconvi_read_master_agent_cp_data;                                                          // dma_dconvi_read_master_agent:cp_data -> router_011:sink_data
	wire          dma_dconvi_read_master_agent_cp_ready;                                                         // router_011:sink_ready -> dma_dconvi_read_master_agent:cp_ready
	wire          dma_dconvi_read_master_agent_cp_startofpacket;                                                 // dma_dconvi_read_master_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          dma_dconvi_read_master_agent_cp_endofpacket;                                                   // dma_dconvi_read_master_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                          // router_011:src_valid -> cmd_demux_011:sink_valid
	wire  [136:0] router_011_src_data;                                                                           // router_011:src_data -> cmd_demux_011:sink_data
	wire          router_011_src_ready;                                                                          // cmd_demux_011:sink_ready -> router_011:src_ready
	wire   [44:0] router_011_src_channel;                                                                        // router_011:src_channel -> cmd_demux_011:sink_channel
	wire          router_011_src_startofpacket;                                                                  // router_011:src_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                    // router_011:src_endofpacket -> cmd_demux_011:sink_endofpacket
	wire          dma_dummy_read_master_agent_cp_valid;                                                          // dma_dummy_read_master_agent:cp_valid -> router_012:sink_valid
	wire  [136:0] dma_dummy_read_master_agent_cp_data;                                                           // dma_dummy_read_master_agent:cp_data -> router_012:sink_data
	wire          dma_dummy_read_master_agent_cp_ready;                                                          // router_012:sink_ready -> dma_dummy_read_master_agent:cp_ready
	wire          dma_dummy_read_master_agent_cp_startofpacket;                                                  // dma_dummy_read_master_agent:cp_startofpacket -> router_012:sink_startofpacket
	wire          dma_dummy_read_master_agent_cp_endofpacket;                                                    // dma_dummy_read_master_agent:cp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                          // router_012:src_valid -> cmd_demux_012:sink_valid
	wire  [136:0] router_012_src_data;                                                                           // router_012:src_data -> cmd_demux_012:sink_data
	wire          router_012_src_ready;                                                                          // cmd_demux_012:sink_ready -> router_012:src_ready
	wire   [44:0] router_012_src_channel;                                                                        // router_012:src_channel -> cmd_demux_012:sink_channel
	wire          router_012_src_startofpacket;                                                                  // router_012:src_startofpacket -> cmd_demux_012:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                    // router_012:src_endofpacket -> cmd_demux_012:sink_endofpacket
	wire          fifo_dummy64_in_in_agent_rp_valid;                                                             // fifo_dummy64_in_in_agent:rp_valid -> router_013:sink_valid
	wire  [136:0] fifo_dummy64_in_in_agent_rp_data;                                                              // fifo_dummy64_in_in_agent:rp_data -> router_013:sink_data
	wire          fifo_dummy64_in_in_agent_rp_ready;                                                             // router_013:sink_ready -> fifo_dummy64_in_in_agent:rp_ready
	wire          fifo_dummy64_in_in_agent_rp_startofpacket;                                                     // fifo_dummy64_in_in_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          fifo_dummy64_in_in_agent_rp_endofpacket;                                                       // fifo_dummy64_in_in_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                          // router_013:src_valid -> rsp_demux:sink_valid
	wire  [136:0] router_013_src_data;                                                                           // router_013:src_data -> rsp_demux:sink_data
	wire          router_013_src_ready;                                                                          // rsp_demux:sink_ready -> router_013:src_ready
	wire   [44:0] router_013_src_channel;                                                                        // router_013:src_channel -> rsp_demux:sink_channel
	wire          router_013_src_startofpacket;                                                                  // router_013:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                    // router_013:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          fifo_dummy_in_agent_rp_valid;                                                                  // fifo_dummy_in_agent:rp_valid -> router_014:sink_valid
	wire  [136:0] fifo_dummy_in_agent_rp_data;                                                                   // fifo_dummy_in_agent:rp_data -> router_014:sink_data
	wire          fifo_dummy_in_agent_rp_ready;                                                                  // router_014:sink_ready -> fifo_dummy_in_agent:rp_ready
	wire          fifo_dummy_in_agent_rp_startofpacket;                                                          // fifo_dummy_in_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          fifo_dummy_in_agent_rp_endofpacket;                                                            // fifo_dummy_in_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                          // router_014:src_valid -> rsp_demux_001:sink_valid
	wire  [136:0] router_014_src_data;                                                                           // router_014:src_data -> rsp_demux_001:sink_data
	wire          router_014_src_ready;                                                                          // rsp_demux_001:sink_ready -> router_014:src_ready
	wire   [44:0] router_014_src_channel;                                                                        // router_014:src_channel -> rsp_demux_001:sink_channel
	wire          router_014_src_startofpacket;                                                                  // router_014:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                    // router_014:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          fifo_dummy64_in_in_csr_agent_rp_valid;                                                         // fifo_dummy64_in_in_csr_agent:rp_valid -> router_015:sink_valid
	wire  [136:0] fifo_dummy64_in_in_csr_agent_rp_data;                                                          // fifo_dummy64_in_in_csr_agent:rp_data -> router_015:sink_data
	wire          fifo_dummy64_in_in_csr_agent_rp_ready;                                                         // router_015:sink_ready -> fifo_dummy64_in_in_csr_agent:rp_ready
	wire          fifo_dummy64_in_in_csr_agent_rp_startofpacket;                                                 // fifo_dummy64_in_in_csr_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          fifo_dummy64_in_in_csr_agent_rp_endofpacket;                                                   // fifo_dummy64_in_in_csr_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                          // router_015:src_valid -> rsp_demux_002:sink_valid
	wire  [136:0] router_015_src_data;                                                                           // router_015:src_data -> rsp_demux_002:sink_data
	wire          router_015_src_ready;                                                                          // rsp_demux_002:sink_ready -> router_015:src_ready
	wire   [44:0] router_015_src_channel;                                                                        // router_015:src_channel -> rsp_demux_002:sink_channel
	wire          router_015_src_startofpacket;                                                                  // router_015:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                    // router_015:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          fifo_dummy64_out_in_csr_agent_rp_valid;                                                        // fifo_dummy64_out_in_csr_agent:rp_valid -> router_016:sink_valid
	wire  [136:0] fifo_dummy64_out_in_csr_agent_rp_data;                                                         // fifo_dummy64_out_in_csr_agent:rp_data -> router_016:sink_data
	wire          fifo_dummy64_out_in_csr_agent_rp_ready;                                                        // router_016:sink_ready -> fifo_dummy64_out_in_csr_agent:rp_ready
	wire          fifo_dummy64_out_in_csr_agent_rp_startofpacket;                                                // fifo_dummy64_out_in_csr_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          fifo_dummy64_out_in_csr_agent_rp_endofpacket;                                                  // fifo_dummy64_out_in_csr_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                          // router_016:src_valid -> rsp_demux_003:sink_valid
	wire  [136:0] router_016_src_data;                                                                           // router_016:src_data -> rsp_demux_003:sink_data
	wire          router_016_src_ready;                                                                          // rsp_demux_003:sink_ready -> router_016:src_ready
	wire   [44:0] router_016_src_channel;                                                                        // router_016:src_channel -> rsp_demux_003:sink_channel
	wire          router_016_src_startofpacket;                                                                  // router_016:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                    // router_016:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          fifo_dummy_in_csr_agent_rp_valid;                                                              // fifo_dummy_in_csr_agent:rp_valid -> router_017:sink_valid
	wire  [136:0] fifo_dummy_in_csr_agent_rp_data;                                                               // fifo_dummy_in_csr_agent:rp_data -> router_017:sink_data
	wire          fifo_dummy_in_csr_agent_rp_ready;                                                              // router_017:sink_ready -> fifo_dummy_in_csr_agent:rp_ready
	wire          fifo_dummy_in_csr_agent_rp_startofpacket;                                                      // fifo_dummy_in_csr_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          fifo_dummy_in_csr_agent_rp_endofpacket;                                                        // fifo_dummy_in_csr_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                          // router_017:src_valid -> rsp_demux_004:sink_valid
	wire  [136:0] router_017_src_data;                                                                           // router_017:src_data -> rsp_demux_004:sink_data
	wire          router_017_src_ready;                                                                          // rsp_demux_004:sink_ready -> router_017:src_ready
	wire   [44:0] router_017_src_channel;                                                                        // router_017:src_channel -> rsp_demux_004:sink_channel
	wire          router_017_src_startofpacket;                                                                  // router_017:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                    // router_017:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          fifo_dummy64_out_out_agent_rp_valid;                                                           // fifo_dummy64_out_out_agent:rp_valid -> router_018:sink_valid
	wire  [136:0] fifo_dummy64_out_out_agent_rp_data;                                                            // fifo_dummy64_out_out_agent:rp_data -> router_018:sink_data
	wire          fifo_dummy64_out_out_agent_rp_ready;                                                           // router_018:sink_ready -> fifo_dummy64_out_out_agent:rp_ready
	wire          fifo_dummy64_out_out_agent_rp_startofpacket;                                                   // fifo_dummy64_out_out_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          fifo_dummy64_out_out_agent_rp_endofpacket;                                                     // fifo_dummy64_out_out_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                          // router_018:src_valid -> rsp_demux_005:sink_valid
	wire  [136:0] router_018_src_data;                                                                           // router_018:src_data -> rsp_demux_005:sink_data
	wire          router_018_src_ready;                                                                          // rsp_demux_005:sink_ready -> router_018:src_ready
	wire   [44:0] router_018_src_channel;                                                                        // router_018:src_channel -> rsp_demux_005:sink_channel
	wire          router_018_src_startofpacket;                                                                  // router_018:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                    // router_018:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          fifo_dummy_out_agent_rp_valid;                                                                 // fifo_dummy_out_agent:rp_valid -> router_019:sink_valid
	wire  [136:0] fifo_dummy_out_agent_rp_data;                                                                  // fifo_dummy_out_agent:rp_data -> router_019:sink_data
	wire          fifo_dummy_out_agent_rp_ready;                                                                 // router_019:sink_ready -> fifo_dummy_out_agent:rp_ready
	wire          fifo_dummy_out_agent_rp_startofpacket;                                                         // fifo_dummy_out_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          fifo_dummy_out_agent_rp_endofpacket;                                                           // fifo_dummy_out_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                          // router_019:src_valid -> rsp_demux_006:sink_valid
	wire  [136:0] router_019_src_data;                                                                           // router_019:src_data -> rsp_demux_006:sink_data
	wire          router_019_src_ready;                                                                          // rsp_demux_006:sink_ready -> router_019:src_ready
	wire   [44:0] router_019_src_channel;                                                                        // router_019:src_channel -> rsp_demux_006:sink_channel
	wire          router_019_src_startofpacket;                                                                  // router_019:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                    // router_019:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          switches_s1_agent_rp_valid;                                                                    // switches_s1_agent:rp_valid -> router_020:sink_valid
	wire  [136:0] switches_s1_agent_rp_data;                                                                     // switches_s1_agent:rp_data -> router_020:sink_data
	wire          switches_s1_agent_rp_ready;                                                                    // router_020:sink_ready -> switches_s1_agent:rp_ready
	wire          switches_s1_agent_rp_startofpacket;                                                            // switches_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          switches_s1_agent_rp_endofpacket;                                                              // switches_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                          // router_020:src_valid -> rsp_demux_007:sink_valid
	wire  [136:0] router_020_src_data;                                                                           // router_020:src_data -> rsp_demux_007:sink_data
	wire          router_020_src_ready;                                                                          // rsp_demux_007:sink_ready -> router_020:src_ready
	wire   [44:0] router_020_src_channel;                                                                        // router_020:src_channel -> rsp_demux_007:sink_channel
	wire          router_020_src_startofpacket;                                                                  // router_020:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                    // router_020:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                       // sdram_s1_agent:rp_valid -> router_021:sink_valid
	wire  [118:0] sdram_s1_agent_rp_data;                                                                        // sdram_s1_agent:rp_data -> router_021:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                       // router_021:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                               // sdram_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                 // sdram_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                          // router_021:src_valid -> rsp_demux_008:sink_valid
	wire  [118:0] router_021_src_data;                                                                           // router_021:src_data -> rsp_demux_008:sink_data
	wire          router_021_src_ready;                                                                          // rsp_demux_008:sink_ready -> router_021:src_ready
	wire   [44:0] router_021_src_channel;                                                                        // router_021:src_channel -> rsp_demux_008:sink_channel
	wire          router_021_src_startofpacket;                                                                  // router_021:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                    // router_021:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          adc_fifo_mem_out_agent_rp_valid;                                                               // adc_fifo_mem_out_agent:rp_valid -> router_022:sink_valid
	wire  [136:0] adc_fifo_mem_out_agent_rp_data;                                                                // adc_fifo_mem_out_agent:rp_data -> router_022:sink_data
	wire          adc_fifo_mem_out_agent_rp_ready;                                                               // router_022:sink_ready -> adc_fifo_mem_out_agent:rp_ready
	wire          adc_fifo_mem_out_agent_rp_startofpacket;                                                       // adc_fifo_mem_out_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          adc_fifo_mem_out_agent_rp_endofpacket;                                                         // adc_fifo_mem_out_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                          // router_022:src_valid -> rsp_demux_009:sink_valid
	wire  [136:0] router_022_src_data;                                                                           // router_022:src_data -> rsp_demux_009:sink_data
	wire          router_022_src_ready;                                                                          // rsp_demux_009:sink_ready -> router_022:src_ready
	wire   [44:0] router_022_src_channel;                                                                        // router_022:src_channel -> rsp_demux_009:sink_channel
	wire          router_022_src_startofpacket;                                                                  // router_022:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                    // router_022:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rp_valid;                                                  // nmr_parameters_adc_val_sub_s1_agent:rp_valid -> router_023:sink_valid
	wire  [136:0] nmr_parameters_adc_val_sub_s1_agent_rp_data;                                                   // nmr_parameters_adc_val_sub_s1_agent:rp_data -> router_023:sink_data
	wire          nmr_parameters_adc_val_sub_s1_agent_rp_ready;                                                  // router_023:sink_ready -> nmr_parameters_adc_val_sub_s1_agent:rp_ready
	wire          nmr_parameters_adc_val_sub_s1_agent_rp_startofpacket;                                          // nmr_parameters_adc_val_sub_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          nmr_parameters_adc_val_sub_s1_agent_rp_endofpacket;                                            // nmr_parameters_adc_val_sub_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                          // router_023:src_valid -> rsp_demux_010:sink_valid
	wire  [136:0] router_023_src_data;                                                                           // router_023:src_data -> rsp_demux_010:sink_data
	wire          router_023_src_ready;                                                                          // rsp_demux_010:sink_ready -> router_023:src_ready
	wire   [44:0] router_023_src_channel;                                                                        // router_023:src_channel -> rsp_demux_010:sink_channel
	wire          router_023_src_startofpacket;                                                                  // router_023:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                    // router_023:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                    // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_024:sink_valid
	wire  [136:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                     // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_024:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                    // router_024:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                            // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                              // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                          // router_024:src_valid -> rsp_demux_011:sink_valid
	wire  [136:0] router_024_src_data;                                                                           // router_024:src_data -> rsp_demux_011:sink_data
	wire          router_024_src_ready;                                                                          // rsp_demux_011:sink_ready -> router_024:src_ready
	wire   [44:0] router_024_src_channel;                                                                        // router_024:src_channel -> rsp_demux_011:sink_channel
	wire          router_024_src_startofpacket;                                                                  // router_024:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                    // router_024:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rp_valid;                                                      // dconv_fir_avalon_mm_slave_agent:rp_valid -> router_025:sink_valid
	wire  [118:0] dconv_fir_avalon_mm_slave_agent_rp_data;                                                       // dconv_fir_avalon_mm_slave_agent:rp_data -> router_025:sink_data
	wire          dconv_fir_avalon_mm_slave_agent_rp_ready;                                                      // router_025:sink_ready -> dconv_fir_avalon_mm_slave_agent:rp_ready
	wire          dconv_fir_avalon_mm_slave_agent_rp_startofpacket;                                              // dconv_fir_avalon_mm_slave_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          dconv_fir_avalon_mm_slave_agent_rp_endofpacket;                                                // dconv_fir_avalon_mm_slave_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                          // router_025:src_valid -> rsp_demux_012:sink_valid
	wire  [118:0] router_025_src_data;                                                                           // router_025:src_data -> rsp_demux_012:sink_data
	wire          router_025_src_ready;                                                                          // rsp_demux_012:sink_ready -> router_025:src_ready
	wire   [44:0] router_025_src_channel;                                                                        // router_025:src_channel -> rsp_demux_012:sink_channel
	wire          router_025_src_startofpacket;                                                                  // router_025:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                    // router_025:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rp_valid;                                                    // dconv_fir_q_avalon_mm_slave_agent:rp_valid -> router_026:sink_valid
	wire  [118:0] dconv_fir_q_avalon_mm_slave_agent_rp_data;                                                     // dconv_fir_q_avalon_mm_slave_agent:rp_data -> router_026:sink_data
	wire          dconv_fir_q_avalon_mm_slave_agent_rp_ready;                                                    // router_026:sink_ready -> dconv_fir_q_avalon_mm_slave_agent:rp_ready
	wire          dconv_fir_q_avalon_mm_slave_agent_rp_startofpacket;                                            // dconv_fir_q_avalon_mm_slave_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_agent_rp_endofpacket;                                              // dconv_fir_q_avalon_mm_slave_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                          // router_026:src_valid -> rsp_demux_013:sink_valid
	wire  [118:0] router_026_src_data;                                                                           // router_026:src_data -> rsp_demux_013:sink_data
	wire          router_026_src_ready;                                                                          // rsp_demux_013:sink_ready -> router_026:src_ready
	wire   [44:0] router_026_src_channel;                                                                        // router_026:src_channel -> rsp_demux_013:sink_channel
	wire          router_026_src_startofpacket;                                                                  // router_026:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                    // router_026:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_valid;                                                   // alt_vip_vfr_vga_avalon_slave_agent:rp_valid -> router_027:sink_valid
	wire  [136:0] alt_vip_vfr_vga_avalon_slave_agent_rp_data;                                                    // alt_vip_vfr_vga_avalon_slave_agent:rp_data -> router_027:sink_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_ready;                                                   // router_027:sink_ready -> alt_vip_vfr_vga_avalon_slave_agent:rp_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket;                                           // alt_vip_vfr_vga_avalon_slave_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket;                                             // alt_vip_vfr_vga_avalon_slave_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                          // router_027:src_valid -> rsp_demux_014:sink_valid
	wire  [136:0] router_027_src_data;                                                                           // router_027:src_data -> rsp_demux_014:sink_data
	wire          router_027_src_ready;                                                                          // rsp_demux_014:sink_ready -> router_027:src_ready
	wire   [44:0] router_027_src_channel;                                                                        // router_027:src_channel -> rsp_demux_014:sink_channel
	wire          router_027_src_startofpacket;                                                                  // router_027:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                    // router_027:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                                       // sysid_qsys_control_slave_agent:rp_valid -> router_028:sink_valid
	wire  [136:0] sysid_qsys_control_slave_agent_rp_data;                                                        // sysid_qsys_control_slave_agent:rp_data -> router_028:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                                       // router_028:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                               // sysid_qsys_control_slave_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                                 // sysid_qsys_control_slave_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                          // router_028:src_valid -> rsp_demux_015:sink_valid
	wire  [136:0] router_028_src_data;                                                                           // router_028:src_data -> rsp_demux_015:sink_data
	wire          router_028_src_ready;                                                                          // rsp_demux_015:sink_ready -> router_028:src_ready
	wire   [44:0] router_028_src_channel;                                                                        // router_028:src_channel -> rsp_demux_015:sink_channel
	wire          router_028_src_startofpacket;                                                                  // router_028:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                    // router_028:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          i2c_int_csr_agent_rp_valid;                                                                    // i2c_int_csr_agent:rp_valid -> router_029:sink_valid
	wire  [136:0] i2c_int_csr_agent_rp_data;                                                                     // i2c_int_csr_agent:rp_data -> router_029:sink_data
	wire          i2c_int_csr_agent_rp_ready;                                                                    // router_029:sink_ready -> i2c_int_csr_agent:rp_ready
	wire          i2c_int_csr_agent_rp_startofpacket;                                                            // i2c_int_csr_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          i2c_int_csr_agent_rp_endofpacket;                                                              // i2c_int_csr_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                          // router_029:src_valid -> rsp_demux_016:sink_valid
	wire  [136:0] router_029_src_data;                                                                           // router_029:src_data -> rsp_demux_016:sink_data
	wire          router_029_src_ready;                                                                          // rsp_demux_016:sink_ready -> router_029:src_ready
	wire   [44:0] router_029_src_channel;                                                                        // router_029:src_channel -> rsp_demux_016:sink_channel
	wire          router_029_src_startofpacket;                                                                  // router_029:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                    // router_029:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          i2c_ext_csr_agent_rp_valid;                                                                    // i2c_ext_csr_agent:rp_valid -> router_030:sink_valid
	wire  [136:0] i2c_ext_csr_agent_rp_data;                                                                     // i2c_ext_csr_agent:rp_data -> router_030:sink_data
	wire          i2c_ext_csr_agent_rp_ready;                                                                    // router_030:sink_ready -> i2c_ext_csr_agent:rp_ready
	wire          i2c_ext_csr_agent_rp_startofpacket;                                                            // i2c_ext_csr_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          i2c_ext_csr_agent_rp_endofpacket;                                                              // i2c_ext_csr_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                          // router_030:src_valid -> rsp_demux_017:sink_valid
	wire  [136:0] router_030_src_data;                                                                           // router_030:src_data -> rsp_demux_017:sink_data
	wire          router_030_src_ready;                                                                          // rsp_demux_017:sink_ready -> router_030:src_ready
	wire   [44:0] router_030_src_channel;                                                                        // router_030:src_channel -> rsp_demux_017:sink_channel
	wire          router_030_src_startofpacket;                                                                  // router_030:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                    // router_030:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rp_valid;                                                  // nmr_parameters_delay_nosig_s1_agent:rp_valid -> router_031:sink_valid
	wire  [136:0] nmr_parameters_delay_nosig_s1_agent_rp_data;                                                   // nmr_parameters_delay_nosig_s1_agent:rp_data -> router_031:sink_data
	wire          nmr_parameters_delay_nosig_s1_agent_rp_ready;                                                  // router_031:sink_ready -> nmr_parameters_delay_nosig_s1_agent:rp_ready
	wire          nmr_parameters_delay_nosig_s1_agent_rp_startofpacket;                                          // nmr_parameters_delay_nosig_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          nmr_parameters_delay_nosig_s1_agent_rp_endofpacket;                                            // nmr_parameters_delay_nosig_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                          // router_031:src_valid -> rsp_demux_018:sink_valid
	wire  [136:0] router_031_src_data;                                                                           // router_031:src_data -> rsp_demux_018:sink_data
	wire          router_031_src_ready;                                                                          // rsp_demux_018:sink_ready -> router_031:src_ready
	wire   [44:0] router_031_src_channel;                                                                        // router_031:src_channel -> rsp_demux_018:sink_channel
	wire          router_031_src_startofpacket;                                                                  // router_031:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                    // router_031:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rp_valid;                                                    // nmr_parameters_delay_sig_s1_agent:rp_valid -> router_032:sink_valid
	wire  [136:0] nmr_parameters_delay_sig_s1_agent_rp_data;                                                     // nmr_parameters_delay_sig_s1_agent:rp_data -> router_032:sink_data
	wire          nmr_parameters_delay_sig_s1_agent_rp_ready;                                                    // router_032:sink_ready -> nmr_parameters_delay_sig_s1_agent:rp_ready
	wire          nmr_parameters_delay_sig_s1_agent_rp_startofpacket;                                            // nmr_parameters_delay_sig_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          nmr_parameters_delay_sig_s1_agent_rp_endofpacket;                                              // nmr_parameters_delay_sig_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                          // router_032:src_valid -> rsp_demux_019:sink_valid
	wire  [136:0] router_032_src_data;                                                                           // router_032:src_data -> rsp_demux_019:sink_data
	wire          router_032_src_ready;                                                                          // rsp_demux_019:sink_ready -> router_032:src_ready
	wire   [44:0] router_032_src_channel;                                                                        // router_032:src_channel -> rsp_demux_019:sink_channel
	wire          router_032_src_startofpacket;                                                                  // router_032:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_032_src_endofpacket;                                                                    // router_032:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rp_valid;                                                     // nmr_parameters_delay_t1_s1_agent:rp_valid -> router_033:sink_valid
	wire  [136:0] nmr_parameters_delay_t1_s1_agent_rp_data;                                                      // nmr_parameters_delay_t1_s1_agent:rp_data -> router_033:sink_data
	wire          nmr_parameters_delay_t1_s1_agent_rp_ready;                                                     // router_033:sink_ready -> nmr_parameters_delay_t1_s1_agent:rp_ready
	wire          nmr_parameters_delay_t1_s1_agent_rp_startofpacket;                                             // nmr_parameters_delay_t1_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          nmr_parameters_delay_t1_s1_agent_rp_endofpacket;                                               // nmr_parameters_delay_t1_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                          // router_033:src_valid -> rsp_demux_020:sink_valid
	wire  [136:0] router_033_src_data;                                                                           // router_033:src_data -> rsp_demux_020:sink_data
	wire          router_033_src_ready;                                                                          // rsp_demux_020:sink_ready -> router_033:src_ready
	wire   [44:0] router_033_src_channel;                                                                        // router_033:src_channel -> rsp_demux_020:sink_channel
	wire          router_033_src_startofpacket;                                                                  // router_033:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_033_src_endofpacket;                                                                    // router_033:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rp_valid;                                              // nmr_parameters_echoes_per_scan_s1_agent:rp_valid -> router_034:sink_valid
	wire  [136:0] nmr_parameters_echoes_per_scan_s1_agent_rp_data;                                               // nmr_parameters_echoes_per_scan_s1_agent:rp_data -> router_034:sink_data
	wire          nmr_parameters_echoes_per_scan_s1_agent_rp_ready;                                              // router_034:sink_ready -> nmr_parameters_echoes_per_scan_s1_agent:rp_ready
	wire          nmr_parameters_echoes_per_scan_s1_agent_rp_startofpacket;                                      // nmr_parameters_echoes_per_scan_s1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          nmr_parameters_echoes_per_scan_s1_agent_rp_endofpacket;                                        // nmr_parameters_echoes_per_scan_s1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                          // router_034:src_valid -> rsp_demux_021:sink_valid
	wire  [136:0] router_034_src_data;                                                                           // router_034:src_data -> rsp_demux_021:sink_data
	wire          router_034_src_ready;                                                                          // rsp_demux_021:sink_ready -> router_034:src_ready
	wire   [44:0] router_034_src_channel;                                                                        // router_034:src_channel -> rsp_demux_021:sink_channel
	wire          router_034_src_startofpacket;                                                                  // router_034:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_034_src_endofpacket;                                                                    // router_034:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          adc_fifo_mem_in_csr_agent_rp_valid;                                                            // adc_fifo_mem_in_csr_agent:rp_valid -> router_035:sink_valid
	wire  [136:0] adc_fifo_mem_in_csr_agent_rp_data;                                                             // adc_fifo_mem_in_csr_agent:rp_data -> router_035:sink_data
	wire          adc_fifo_mem_in_csr_agent_rp_ready;                                                            // router_035:sink_ready -> adc_fifo_mem_in_csr_agent:rp_ready
	wire          adc_fifo_mem_in_csr_agent_rp_startofpacket;                                                    // adc_fifo_mem_in_csr_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          adc_fifo_mem_in_csr_agent_rp_endofpacket;                                                      // adc_fifo_mem_in_csr_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                          // router_035:src_valid -> rsp_demux_022:sink_valid
	wire  [136:0] router_035_src_data;                                                                           // router_035:src_data -> rsp_demux_022:sink_data
	wire          router_035_src_ready;                                                                          // rsp_demux_022:sink_ready -> router_035:src_ready
	wire   [44:0] router_035_src_channel;                                                                        // router_035:src_channel -> rsp_demux_022:sink_channel
	wire          router_035_src_startofpacket;                                                                  // router_035:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_035_src_endofpacket;                                                                    // router_035:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          dconv_fifo_mem_in_csr_agent_rp_valid;                                                          // dconv_fifo_mem_in_csr_agent:rp_valid -> router_036:sink_valid
	wire  [136:0] dconv_fifo_mem_in_csr_agent_rp_data;                                                           // dconv_fifo_mem_in_csr_agent:rp_data -> router_036:sink_data
	wire          dconv_fifo_mem_in_csr_agent_rp_ready;                                                          // router_036:sink_ready -> dconv_fifo_mem_in_csr_agent:rp_ready
	wire          dconv_fifo_mem_in_csr_agent_rp_startofpacket;                                                  // dconv_fifo_mem_in_csr_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          dconv_fifo_mem_in_csr_agent_rp_endofpacket;                                                    // dconv_fifo_mem_in_csr_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                          // router_036:src_valid -> rsp_demux_023:sink_valid
	wire  [136:0] router_036_src_data;                                                                           // router_036:src_data -> rsp_demux_023:sink_data
	wire          router_036_src_ready;                                                                          // rsp_demux_023:sink_ready -> router_036:src_ready
	wire   [44:0] router_036_src_channel;                                                                        // router_036:src_channel -> rsp_demux_023:sink_channel
	wire          router_036_src_startofpacket;                                                                  // router_036:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_036_src_endofpacket;                                                                    // router_036:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rp_valid;                                                        // dconv_fifo_mem_q_in_csr_agent:rp_valid -> router_037:sink_valid
	wire  [136:0] dconv_fifo_mem_q_in_csr_agent_rp_data;                                                         // dconv_fifo_mem_q_in_csr_agent:rp_data -> router_037:sink_data
	wire          dconv_fifo_mem_q_in_csr_agent_rp_ready;                                                        // router_037:sink_ready -> dconv_fifo_mem_q_in_csr_agent:rp_ready
	wire          dconv_fifo_mem_q_in_csr_agent_rp_startofpacket;                                                // dconv_fifo_mem_q_in_csr_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          dconv_fifo_mem_q_in_csr_agent_rp_endofpacket;                                                  // dconv_fifo_mem_q_in_csr_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                                          // router_037:src_valid -> rsp_demux_024:sink_valid
	wire  [136:0] router_037_src_data;                                                                           // router_037:src_data -> rsp_demux_024:sink_data
	wire          router_037_src_ready;                                                                          // rsp_demux_024:sink_ready -> router_037:src_ready
	wire   [44:0] router_037_src_channel;                                                                        // router_037:src_channel -> rsp_demux_024:sink_channel
	wire          router_037_src_startofpacket;                                                                  // router_037:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_037_src_endofpacket;                                                                    // router_037:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          nmr_parameters_init_delay_s1_agent_rp_valid;                                                   // nmr_parameters_init_delay_s1_agent:rp_valid -> router_038:sink_valid
	wire  [136:0] nmr_parameters_init_delay_s1_agent_rp_data;                                                    // nmr_parameters_init_delay_s1_agent:rp_data -> router_038:sink_data
	wire          nmr_parameters_init_delay_s1_agent_rp_ready;                                                   // router_038:sink_ready -> nmr_parameters_init_delay_s1_agent:rp_ready
	wire          nmr_parameters_init_delay_s1_agent_rp_startofpacket;                                           // nmr_parameters_init_delay_s1_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          nmr_parameters_init_delay_s1_agent_rp_endofpacket;                                             // nmr_parameters_init_delay_s1_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                                          // router_038:src_valid -> rsp_demux_025:sink_valid
	wire  [136:0] router_038_src_data;                                                                           // router_038:src_data -> rsp_demux_025:sink_data
	wire          router_038_src_ready;                                                                          // rsp_demux_025:sink_ready -> router_038:src_ready
	wire   [44:0] router_038_src_channel;                                                                        // router_038:src_channel -> rsp_demux_025:sink_channel
	wire          router_038_src_startofpacket;                                                                  // router_038:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_038_src_endofpacket;                                                                    // router_038:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_valid;                                         // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rp_valid -> router_039:sink_valid
	wire  [136:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_data;                                          // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rp_data -> router_039:sink_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_ready;                                         // router_039:sink_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rp_ready
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket;                                 // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket;                                   // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                                          // router_039:src_valid -> rsp_demux_026:sink_valid
	wire  [136:0] router_039_src_data;                                                                           // router_039:src_data -> rsp_demux_026:sink_data
	wire          router_039_src_ready;                                                                          // rsp_demux_026:sink_ready -> router_039:src_ready
	wire   [44:0] router_039_src_channel;                                                                        // router_039:src_channel -> rsp_demux_026:sink_channel
	wire          router_039_src_startofpacket;                                                                  // router_039:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_039_src_endofpacket;                                                                    // router_039:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_valid;                                        // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rp_valid -> router_040:sink_valid
	wire  [136:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_data;                                         // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rp_data -> router_040:sink_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_ready;                                        // router_040:sink_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rp_ready
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket;                                // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket;                                  // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                                          // router_040:src_valid -> rsp_demux_027:sink_valid
	wire  [136:0] router_040_src_data;                                                                           // router_040:src_data -> rsp_demux_027:sink_data
	wire          router_040_src_ready;                                                                          // rsp_demux_027:sink_ready -> router_040:src_ready
	wire   [44:0] router_040_src_channel;                                                                        // router_040:src_channel -> rsp_demux_027:sink_channel
	wire          router_040_src_startofpacket;                                                                  // router_040:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_040_src_endofpacket;                                                                    // router_040:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          dconv_fifo_mem_out_agent_rp_valid;                                                             // dconv_fifo_mem_out_agent:rp_valid -> router_041:sink_valid
	wire  [136:0] dconv_fifo_mem_out_agent_rp_data;                                                              // dconv_fifo_mem_out_agent:rp_data -> router_041:sink_data
	wire          dconv_fifo_mem_out_agent_rp_ready;                                                             // router_041:sink_ready -> dconv_fifo_mem_out_agent:rp_ready
	wire          dconv_fifo_mem_out_agent_rp_startofpacket;                                                     // dconv_fifo_mem_out_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          dconv_fifo_mem_out_agent_rp_endofpacket;                                                       // dconv_fifo_mem_out_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                                          // router_041:src_valid -> rsp_demux_028:sink_valid
	wire  [136:0] router_041_src_data;                                                                           // router_041:src_data -> rsp_demux_028:sink_data
	wire          router_041_src_ready;                                                                          // rsp_demux_028:sink_ready -> router_041:src_ready
	wire   [44:0] router_041_src_channel;                                                                        // router_041:src_channel -> rsp_demux_028:sink_channel
	wire          router_041_src_startofpacket;                                                                  // router_041:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_041_src_endofpacket;                                                                    // router_041:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          dconv_fifo_mem_q_out_agent_rp_valid;                                                           // dconv_fifo_mem_q_out_agent:rp_valid -> router_042:sink_valid
	wire  [136:0] dconv_fifo_mem_q_out_agent_rp_data;                                                            // dconv_fifo_mem_q_out_agent:rp_data -> router_042:sink_data
	wire          dconv_fifo_mem_q_out_agent_rp_ready;                                                           // router_042:sink_ready -> dconv_fifo_mem_q_out_agent:rp_ready
	wire          dconv_fifo_mem_q_out_agent_rp_startofpacket;                                                   // dconv_fifo_mem_q_out_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          dconv_fifo_mem_q_out_agent_rp_endofpacket;                                                     // dconv_fifo_mem_q_out_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                                          // router_042:src_valid -> rsp_demux_029:sink_valid
	wire  [136:0] router_042_src_data;                                                                           // router_042:src_data -> rsp_demux_029:sink_data
	wire          router_042_src_ready;                                                                          // rsp_demux_029:sink_ready -> router_042:src_ready
	wire   [44:0] router_042_src_channel;                                                                        // router_042:src_channel -> rsp_demux_029:sink_channel
	wire          router_042_src_startofpacket;                                                                  // router_042:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_042_src_endofpacket;                                                                    // router_042:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rp_valid;                                                 // nmr_parameters_pulse_180deg_s1_agent:rp_valid -> router_043:sink_valid
	wire  [136:0] nmr_parameters_pulse_180deg_s1_agent_rp_data;                                                  // nmr_parameters_pulse_180deg_s1_agent:rp_data -> router_043:sink_data
	wire          nmr_parameters_pulse_180deg_s1_agent_rp_ready;                                                 // router_043:sink_ready -> nmr_parameters_pulse_180deg_s1_agent:rp_ready
	wire          nmr_parameters_pulse_180deg_s1_agent_rp_startofpacket;                                         // nmr_parameters_pulse_180deg_s1_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          nmr_parameters_pulse_180deg_s1_agent_rp_endofpacket;                                           // nmr_parameters_pulse_180deg_s1_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                                          // router_043:src_valid -> rsp_demux_030:sink_valid
	wire  [136:0] router_043_src_data;                                                                           // router_043:src_data -> rsp_demux_030:sink_data
	wire          router_043_src_ready;                                                                          // rsp_demux_030:sink_ready -> router_043:src_ready
	wire   [44:0] router_043_src_channel;                                                                        // router_043:src_channel -> rsp_demux_030:sink_channel
	wire          router_043_src_startofpacket;                                                                  // router_043:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_043_src_endofpacket;                                                                    // router_043:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rp_valid;                                                  // nmr_parameters_pulse_90deg_s1_agent:rp_valid -> router_044:sink_valid
	wire  [136:0] nmr_parameters_pulse_90deg_s1_agent_rp_data;                                                   // nmr_parameters_pulse_90deg_s1_agent:rp_data -> router_044:sink_data
	wire          nmr_parameters_pulse_90deg_s1_agent_rp_ready;                                                  // router_044:sink_ready -> nmr_parameters_pulse_90deg_s1_agent:rp_ready
	wire          nmr_parameters_pulse_90deg_s1_agent_rp_startofpacket;                                          // nmr_parameters_pulse_90deg_s1_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          nmr_parameters_pulse_90deg_s1_agent_rp_endofpacket;                                            // nmr_parameters_pulse_90deg_s1_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                                          // router_044:src_valid -> rsp_demux_031:sink_valid
	wire  [136:0] router_044_src_data;                                                                           // router_044:src_data -> rsp_demux_031:sink_data
	wire          router_044_src_ready;                                                                          // rsp_demux_031:sink_ready -> router_044:src_ready
	wire   [44:0] router_044_src_channel;                                                                        // router_044:src_channel -> rsp_demux_031:sink_channel
	wire          router_044_src_startofpacket;                                                                  // router_044:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_044_src_endofpacket;                                                                    // router_044:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rp_valid;                                                     // nmr_parameters_pulse_t1_s1_agent:rp_valid -> router_045:sink_valid
	wire  [136:0] nmr_parameters_pulse_t1_s1_agent_rp_data;                                                      // nmr_parameters_pulse_t1_s1_agent:rp_data -> router_045:sink_data
	wire          nmr_parameters_pulse_t1_s1_agent_rp_ready;                                                     // router_045:sink_ready -> nmr_parameters_pulse_t1_s1_agent:rp_ready
	wire          nmr_parameters_pulse_t1_s1_agent_rp_startofpacket;                                             // nmr_parameters_pulse_t1_s1_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          nmr_parameters_pulse_t1_s1_agent_rp_endofpacket;                                               // nmr_parameters_pulse_t1_s1_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                                          // router_045:src_valid -> rsp_demux_032:sink_valid
	wire  [136:0] router_045_src_data;                                                                           // router_045:src_data -> rsp_demux_032:sink_data
	wire          router_045_src_ready;                                                                          // rsp_demux_032:sink_ready -> router_045:src_ready
	wire   [44:0] router_045_src_channel;                                                                        // router_045:src_channel -> rsp_demux_032:sink_channel
	wire          router_045_src_startofpacket;                                                                  // router_045:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_045_src_endofpacket;                                                                    // router_045:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rp_valid;                                                     // nmr_parameters_rx_delay_s1_agent:rp_valid -> router_046:sink_valid
	wire  [136:0] nmr_parameters_rx_delay_s1_agent_rp_data;                                                      // nmr_parameters_rx_delay_s1_agent:rp_data -> router_046:sink_data
	wire          nmr_parameters_rx_delay_s1_agent_rp_ready;                                                     // router_046:sink_ready -> nmr_parameters_rx_delay_s1_agent:rp_ready
	wire          nmr_parameters_rx_delay_s1_agent_rp_startofpacket;                                             // nmr_parameters_rx_delay_s1_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          nmr_parameters_rx_delay_s1_agent_rp_endofpacket;                                               // nmr_parameters_rx_delay_s1_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                                          // router_046:src_valid -> rsp_demux_033:sink_valid
	wire  [136:0] router_046_src_data;                                                                           // router_046:src_data -> rsp_demux_033:sink_data
	wire          router_046_src_ready;                                                                          // rsp_demux_033:sink_ready -> router_046:src_ready
	wire   [44:0] router_046_src_channel;                                                                        // router_046:src_channel -> rsp_demux_033:sink_channel
	wire          router_046_src_startofpacket;                                                                  // router_046:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_046_src_endofpacket;                                                                    // router_046:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          ctrl_out_s1_agent_rp_valid;                                                                    // ctrl_out_s1_agent:rp_valid -> router_047:sink_valid
	wire  [136:0] ctrl_out_s1_agent_rp_data;                                                                     // ctrl_out_s1_agent:rp_data -> router_047:sink_data
	wire          ctrl_out_s1_agent_rp_ready;                                                                    // router_047:sink_ready -> ctrl_out_s1_agent:rp_ready
	wire          ctrl_out_s1_agent_rp_startofpacket;                                                            // ctrl_out_s1_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          ctrl_out_s1_agent_rp_endofpacket;                                                              // ctrl_out_s1_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                                          // router_047:src_valid -> rsp_demux_034:sink_valid
	wire  [136:0] router_047_src_data;                                                                           // router_047:src_data -> rsp_demux_034:sink_data
	wire          router_047_src_ready;                                                                          // rsp_demux_034:sink_ready -> router_047:src_ready
	wire   [44:0] router_047_src_channel;                                                                        // router_047:src_channel -> rsp_demux_034:sink_channel
	wire          router_047_src_startofpacket;                                                                  // router_047:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_047_src_endofpacket;                                                                    // router_047:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          ctrl_in_s1_agent_rp_valid;                                                                     // ctrl_in_s1_agent:rp_valid -> router_048:sink_valid
	wire  [136:0] ctrl_in_s1_agent_rp_data;                                                                      // ctrl_in_s1_agent:rp_data -> router_048:sink_data
	wire          ctrl_in_s1_agent_rp_ready;                                                                     // router_048:sink_ready -> ctrl_in_s1_agent:rp_ready
	wire          ctrl_in_s1_agent_rp_startofpacket;                                                             // ctrl_in_s1_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          ctrl_in_s1_agent_rp_endofpacket;                                                               // ctrl_in_s1_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                                          // router_048:src_valid -> rsp_demux_035:sink_valid
	wire  [136:0] router_048_src_data;                                                                           // router_048:src_data -> rsp_demux_035:sink_data
	wire          router_048_src_ready;                                                                          // rsp_demux_035:sink_ready -> router_048:src_ready
	wire   [44:0] router_048_src_channel;                                                                        // router_048:src_channel -> rsp_demux_035:sink_channel
	wire          router_048_src_startofpacket;                                                                  // router_048:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_048_src_endofpacket;                                                                    // router_048:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          aux_cnt_out_s1_agent_rp_valid;                                                                 // aux_cnt_out_s1_agent:rp_valid -> router_049:sink_valid
	wire  [136:0] aux_cnt_out_s1_agent_rp_data;                                                                  // aux_cnt_out_s1_agent:rp_data -> router_049:sink_data
	wire          aux_cnt_out_s1_agent_rp_ready;                                                                 // router_049:sink_ready -> aux_cnt_out_s1_agent:rp_ready
	wire          aux_cnt_out_s1_agent_rp_startofpacket;                                                         // aux_cnt_out_s1_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          aux_cnt_out_s1_agent_rp_endofpacket;                                                           // aux_cnt_out_s1_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                                          // router_049:src_valid -> rsp_demux_036:sink_valid
	wire  [136:0] router_049_src_data;                                                                           // router_049:src_data -> rsp_demux_036:sink_data
	wire          router_049_src_ready;                                                                          // rsp_demux_036:sink_ready -> router_049:src_ready
	wire   [44:0] router_049_src_channel;                                                                        // router_049:src_channel -> rsp_demux_036:sink_channel
	wire          router_049_src_startofpacket;                                                                  // router_049:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_049_src_endofpacket;                                                                    // router_049:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rp_valid;                                             // nmr_parameters_samples_per_echo_s1_agent:rp_valid -> router_050:sink_valid
	wire  [136:0] nmr_parameters_samples_per_echo_s1_agent_rp_data;                                              // nmr_parameters_samples_per_echo_s1_agent:rp_data -> router_050:sink_data
	wire          nmr_parameters_samples_per_echo_s1_agent_rp_ready;                                             // router_050:sink_ready -> nmr_parameters_samples_per_echo_s1_agent:rp_ready
	wire          nmr_parameters_samples_per_echo_s1_agent_rp_startofpacket;                                     // nmr_parameters_samples_per_echo_s1_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          nmr_parameters_samples_per_echo_s1_agent_rp_endofpacket;                                       // nmr_parameters_samples_per_echo_s1_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                                          // router_050:src_valid -> rsp_demux_037:sink_valid
	wire  [136:0] router_050_src_data;                                                                           // router_050:src_data -> rsp_demux_037:sink_data
	wire          router_050_src_ready;                                                                          // rsp_demux_037:sink_ready -> router_050:src_ready
	wire   [44:0] router_050_src_channel;                                                                        // router_050:src_channel -> rsp_demux_037:sink_channel
	wire          router_050_src_startofpacket;                                                                  // router_050:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_050_src_endofpacket;                                                                    // router_050:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          dac_grad_spi_control_port_agent_rp_valid;                                                      // dac_grad_spi_control_port_agent:rp_valid -> router_051:sink_valid
	wire  [136:0] dac_grad_spi_control_port_agent_rp_data;                                                       // dac_grad_spi_control_port_agent:rp_data -> router_051:sink_data
	wire          dac_grad_spi_control_port_agent_rp_ready;                                                      // router_051:sink_ready -> dac_grad_spi_control_port_agent:rp_ready
	wire          dac_grad_spi_control_port_agent_rp_startofpacket;                                              // dac_grad_spi_control_port_agent:rp_startofpacket -> router_051:sink_startofpacket
	wire          dac_grad_spi_control_port_agent_rp_endofpacket;                                                // dac_grad_spi_control_port_agent:rp_endofpacket -> router_051:sink_endofpacket
	wire          router_051_src_valid;                                                                          // router_051:src_valid -> rsp_demux_038:sink_valid
	wire  [136:0] router_051_src_data;                                                                           // router_051:src_data -> rsp_demux_038:sink_data
	wire          router_051_src_ready;                                                                          // rsp_demux_038:sink_ready -> router_051:src_ready
	wire   [44:0] router_051_src_channel;                                                                        // router_051:src_channel -> rsp_demux_038:sink_channel
	wire          router_051_src_startofpacket;                                                                  // router_051:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_051_src_endofpacket;                                                                    // router_051:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rp_valid;                                                // spi_mtch_ntwrk_spi_control_port_agent:rp_valid -> router_052:sink_valid
	wire  [136:0] spi_mtch_ntwrk_spi_control_port_agent_rp_data;                                                 // spi_mtch_ntwrk_spi_control_port_agent:rp_data -> router_052:sink_data
	wire          spi_mtch_ntwrk_spi_control_port_agent_rp_ready;                                                // router_052:sink_ready -> spi_mtch_ntwrk_spi_control_port_agent:rp_ready
	wire          spi_mtch_ntwrk_spi_control_port_agent_rp_startofpacket;                                        // spi_mtch_ntwrk_spi_control_port_agent:rp_startofpacket -> router_052:sink_startofpacket
	wire          spi_mtch_ntwrk_spi_control_port_agent_rp_endofpacket;                                          // spi_mtch_ntwrk_spi_control_port_agent:rp_endofpacket -> router_052:sink_endofpacket
	wire          router_052_src_valid;                                                                          // router_052:src_valid -> rsp_demux_039:sink_valid
	wire  [136:0] router_052_src_data;                                                                           // router_052:src_data -> rsp_demux_039:sink_data
	wire          router_052_src_ready;                                                                          // rsp_demux_039:sink_ready -> router_052:src_ready
	wire   [44:0] router_052_src_channel;                                                                        // router_052:src_channel -> rsp_demux_039:sink_channel
	wire          router_052_src_startofpacket;                                                                  // router_052:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_052_src_endofpacket;                                                                    // router_052:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          spi_afe_relays_spi_control_port_agent_rp_valid;                                                // spi_afe_relays_spi_control_port_agent:rp_valid -> router_053:sink_valid
	wire  [136:0] spi_afe_relays_spi_control_port_agent_rp_data;                                                 // spi_afe_relays_spi_control_port_agent:rp_data -> router_053:sink_data
	wire          spi_afe_relays_spi_control_port_agent_rp_ready;                                                // router_053:sink_ready -> spi_afe_relays_spi_control_port_agent:rp_ready
	wire          spi_afe_relays_spi_control_port_agent_rp_startofpacket;                                        // spi_afe_relays_spi_control_port_agent:rp_startofpacket -> router_053:sink_startofpacket
	wire          spi_afe_relays_spi_control_port_agent_rp_endofpacket;                                          // spi_afe_relays_spi_control_port_agent:rp_endofpacket -> router_053:sink_endofpacket
	wire          router_053_src_valid;                                                                          // router_053:src_valid -> rsp_demux_040:sink_valid
	wire  [136:0] router_053_src_data;                                                                           // router_053:src_data -> rsp_demux_040:sink_data
	wire          router_053_src_ready;                                                                          // rsp_demux_040:sink_ready -> router_053:src_ready
	wire   [44:0] router_053_src_channel;                                                                        // router_053:src_channel -> rsp_demux_040:sink_channel
	wire          router_053_src_startofpacket;                                                                  // router_053:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_053_src_endofpacket;                                                                    // router_053:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          dma_fifo_control_port_slave_agent_rp_valid;                                                    // dma_fifo_control_port_slave_agent:rp_valid -> router_054:sink_valid
	wire  [136:0] dma_fifo_control_port_slave_agent_rp_data;                                                     // dma_fifo_control_port_slave_agent:rp_data -> router_054:sink_data
	wire          dma_fifo_control_port_slave_agent_rp_ready;                                                    // router_054:sink_ready -> dma_fifo_control_port_slave_agent:rp_ready
	wire          dma_fifo_control_port_slave_agent_rp_startofpacket;                                            // dma_fifo_control_port_slave_agent:rp_startofpacket -> router_054:sink_startofpacket
	wire          dma_fifo_control_port_slave_agent_rp_endofpacket;                                              // dma_fifo_control_port_slave_agent:rp_endofpacket -> router_054:sink_endofpacket
	wire          router_054_src_valid;                                                                          // router_054:src_valid -> rsp_demux_041:sink_valid
	wire  [136:0] router_054_src_data;                                                                           // router_054:src_data -> rsp_demux_041:sink_data
	wire          router_054_src_ready;                                                                          // rsp_demux_041:sink_ready -> router_054:src_ready
	wire   [44:0] router_054_src_channel;                                                                        // router_054:src_channel -> rsp_demux_041:sink_channel
	wire          router_054_src_startofpacket;                                                                  // router_054:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_054_src_endofpacket;                                                                    // router_054:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          dma_dconvi_control_port_slave_agent_rp_valid;                                                  // dma_dconvi_control_port_slave_agent:rp_valid -> router_055:sink_valid
	wire  [136:0] dma_dconvi_control_port_slave_agent_rp_data;                                                   // dma_dconvi_control_port_slave_agent:rp_data -> router_055:sink_data
	wire          dma_dconvi_control_port_slave_agent_rp_ready;                                                  // router_055:sink_ready -> dma_dconvi_control_port_slave_agent:rp_ready
	wire          dma_dconvi_control_port_slave_agent_rp_startofpacket;                                          // dma_dconvi_control_port_slave_agent:rp_startofpacket -> router_055:sink_startofpacket
	wire          dma_dconvi_control_port_slave_agent_rp_endofpacket;                                            // dma_dconvi_control_port_slave_agent:rp_endofpacket -> router_055:sink_endofpacket
	wire          router_055_src_valid;                                                                          // router_055:src_valid -> rsp_demux_042:sink_valid
	wire  [136:0] router_055_src_data;                                                                           // router_055:src_data -> rsp_demux_042:sink_data
	wire          router_055_src_ready;                                                                          // rsp_demux_042:sink_ready -> router_055:src_ready
	wire   [44:0] router_055_src_channel;                                                                        // router_055:src_channel -> rsp_demux_042:sink_channel
	wire          router_055_src_startofpacket;                                                                  // router_055:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_055_src_endofpacket;                                                                    // router_055:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          dma_dconvq_control_port_slave_agent_rp_valid;                                                  // dma_dconvq_control_port_slave_agent:rp_valid -> router_056:sink_valid
	wire  [136:0] dma_dconvq_control_port_slave_agent_rp_data;                                                   // dma_dconvq_control_port_slave_agent:rp_data -> router_056:sink_data
	wire          dma_dconvq_control_port_slave_agent_rp_ready;                                                  // router_056:sink_ready -> dma_dconvq_control_port_slave_agent:rp_ready
	wire          dma_dconvq_control_port_slave_agent_rp_startofpacket;                                          // dma_dconvq_control_port_slave_agent:rp_startofpacket -> router_056:sink_startofpacket
	wire          dma_dconvq_control_port_slave_agent_rp_endofpacket;                                            // dma_dconvq_control_port_slave_agent:rp_endofpacket -> router_056:sink_endofpacket
	wire          router_056_src_valid;                                                                          // router_056:src_valid -> rsp_demux_043:sink_valid
	wire  [136:0] router_056_src_data;                                                                           // router_056:src_data -> rsp_demux_043:sink_data
	wire          router_056_src_ready;                                                                          // rsp_demux_043:sink_ready -> router_056:src_ready
	wire   [44:0] router_056_src_channel;                                                                        // router_056:src_channel -> rsp_demux_043:sink_channel
	wire          router_056_src_startofpacket;                                                                  // router_056:src_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          router_056_src_endofpacket;                                                                    // router_056:src_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          dma_dummy_control_port_slave_agent_rp_valid;                                                   // dma_dummy_control_port_slave_agent:rp_valid -> router_057:sink_valid
	wire  [136:0] dma_dummy_control_port_slave_agent_rp_data;                                                    // dma_dummy_control_port_slave_agent:rp_data -> router_057:sink_data
	wire          dma_dummy_control_port_slave_agent_rp_ready;                                                   // router_057:sink_ready -> dma_dummy_control_port_slave_agent:rp_ready
	wire          dma_dummy_control_port_slave_agent_rp_startofpacket;                                           // dma_dummy_control_port_slave_agent:rp_startofpacket -> router_057:sink_startofpacket
	wire          dma_dummy_control_port_slave_agent_rp_endofpacket;                                             // dma_dummy_control_port_slave_agent:rp_endofpacket -> router_057:sink_endofpacket
	wire          router_057_src_valid;                                                                          // router_057:src_valid -> rsp_demux_044:sink_valid
	wire  [136:0] router_057_src_data;                                                                           // router_057:src_data -> rsp_demux_044:sink_data
	wire          router_057_src_ready;                                                                          // rsp_demux_044:sink_ready -> router_057:src_ready
	wire   [44:0] router_057_src_channel;                                                                        // router_057:src_channel -> rsp_demux_044:sink_channel
	wire          router_057_src_startofpacket;                                                                  // router_057:src_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          router_057_src_endofpacket;                                                                    // router_057:src_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          router_src_valid;                                                                              // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [244:0] router_src_data;                                                                               // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                              // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [44:0] router_src_channel;                                                                            // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                      // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                        // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [244:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                                  // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                                 // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                                               // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                           // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                             // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [244:0] rsp_mux_src_data;                                                                              // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                             // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [44:0] rsp_mux_src_channel;                                                                           // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                     // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                       // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                                 // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [244:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                                  // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                                 // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                                               // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                           // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                          // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [244:0] router_001_src_data;                                                                           // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                          // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [44:0] router_001_src_channel;                                                                        // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                  // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                    // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [244:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                                  // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                                 // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                                               // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                           // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                         // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [244:0] rsp_mux_001_src_data;                                                                          // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                         // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [44:0] rsp_mux_001_src_channel;                                                                       // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                 // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                   // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                                 // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [244:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                                  // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                                 // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                                               // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                           // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_006_src_valid;                                                                          // router_006:src_valid -> dma_fifo_read_master_limiter:cmd_sink_valid
	wire  [136:0] router_006_src_data;                                                                           // router_006:src_data -> dma_fifo_read_master_limiter:cmd_sink_data
	wire          router_006_src_ready;                                                                          // dma_fifo_read_master_limiter:cmd_sink_ready -> router_006:src_ready
	wire   [44:0] router_006_src_channel;                                                                        // router_006:src_channel -> dma_fifo_read_master_limiter:cmd_sink_channel
	wire          router_006_src_startofpacket;                                                                  // router_006:src_startofpacket -> dma_fifo_read_master_limiter:cmd_sink_startofpacket
	wire          router_006_src_endofpacket;                                                                    // router_006:src_endofpacket -> dma_fifo_read_master_limiter:cmd_sink_endofpacket
	wire  [136:0] dma_fifo_read_master_limiter_cmd_src_data;                                                     // dma_fifo_read_master_limiter:cmd_src_data -> cmd_demux_006:sink_data
	wire          dma_fifo_read_master_limiter_cmd_src_ready;                                                    // cmd_demux_006:sink_ready -> dma_fifo_read_master_limiter:cmd_src_ready
	wire   [44:0] dma_fifo_read_master_limiter_cmd_src_channel;                                                  // dma_fifo_read_master_limiter:cmd_src_channel -> cmd_demux_006:sink_channel
	wire          dma_fifo_read_master_limiter_cmd_src_startofpacket;                                            // dma_fifo_read_master_limiter:cmd_src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          dma_fifo_read_master_limiter_cmd_src_endofpacket;                                              // dma_fifo_read_master_limiter:cmd_src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          rsp_mux_006_src_valid;                                                                         // rsp_mux_006:src_valid -> dma_fifo_read_master_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_006_src_data;                                                                          // rsp_mux_006:src_data -> dma_fifo_read_master_limiter:rsp_sink_data
	wire          rsp_mux_006_src_ready;                                                                         // dma_fifo_read_master_limiter:rsp_sink_ready -> rsp_mux_006:src_ready
	wire   [44:0] rsp_mux_006_src_channel;                                                                       // rsp_mux_006:src_channel -> dma_fifo_read_master_limiter:rsp_sink_channel
	wire          rsp_mux_006_src_startofpacket;                                                                 // rsp_mux_006:src_startofpacket -> dma_fifo_read_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                                   // rsp_mux_006:src_endofpacket -> dma_fifo_read_master_limiter:rsp_sink_endofpacket
	wire          dma_fifo_read_master_limiter_rsp_src_valid;                                                    // dma_fifo_read_master_limiter:rsp_src_valid -> dma_fifo_read_master_agent:rp_valid
	wire  [136:0] dma_fifo_read_master_limiter_rsp_src_data;                                                     // dma_fifo_read_master_limiter:rsp_src_data -> dma_fifo_read_master_agent:rp_data
	wire          dma_fifo_read_master_limiter_rsp_src_ready;                                                    // dma_fifo_read_master_agent:rp_ready -> dma_fifo_read_master_limiter:rsp_src_ready
	wire   [44:0] dma_fifo_read_master_limiter_rsp_src_channel;                                                  // dma_fifo_read_master_limiter:rsp_src_channel -> dma_fifo_read_master_agent:rp_channel
	wire          dma_fifo_read_master_limiter_rsp_src_startofpacket;                                            // dma_fifo_read_master_limiter:rsp_src_startofpacket -> dma_fifo_read_master_agent:rp_startofpacket
	wire          dma_fifo_read_master_limiter_rsp_src_endofpacket;                                              // dma_fifo_read_master_limiter:rsp_src_endofpacket -> dma_fifo_read_master_agent:rp_endofpacket
	wire          router_007_src_valid;                                                                          // router_007:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [136:0] router_007_src_data;                                                                           // router_007:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                                          // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [44:0] router_007_src_channel;                                                                        // router_007:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                                  // router_007:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                                    // router_007:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [136:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                              // cmd_demux_007:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                            // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                        // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                                         // rsp_mux_007:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_007_src_data;                                                                          // rsp_mux_007:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_007_src_ready;                                                                         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire   [44:0] rsp_mux_007_src_channel;                                                                       // rsp_mux_007:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_startofpacket;                                                                 // rsp_mux_007:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                                   // rsp_mux_007:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                              // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [136:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                              // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                            // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_008_src_valid;                                                                          // router_008:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [136:0] router_008_src_data;                                                                           // router_008:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_008_src_ready;                                                                          // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_008:src_ready
	wire   [44:0] router_008_src_channel;                                                                        // router_008:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_008_src_startofpacket;                                                                  // router_008:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_008_src_endofpacket;                                                                    // router_008:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [136:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_008:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                              // cmd_demux_008:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                            // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_008:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                        // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          rsp_mux_008_src_valid;                                                                         // rsp_mux_008:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_008_src_data;                                                                          // rsp_mux_008:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_008_src_ready;                                                                         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_008:src_ready
	wire   [44:0] rsp_mux_008_src_channel;                                                                       // rsp_mux_008:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_008_src_startofpacket;                                                                 // rsp_mux_008:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                                   // rsp_mux_008:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                              // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [136:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                              // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_009_src_valid;                                                                          // router_009:src_valid -> master_non_sec_master_limiter:cmd_sink_valid
	wire  [136:0] router_009_src_data;                                                                           // router_009:src_data -> master_non_sec_master_limiter:cmd_sink_data
	wire          router_009_src_ready;                                                                          // master_non_sec_master_limiter:cmd_sink_ready -> router_009:src_ready
	wire   [44:0] router_009_src_channel;                                                                        // router_009:src_channel -> master_non_sec_master_limiter:cmd_sink_channel
	wire          router_009_src_startofpacket;                                                                  // router_009:src_startofpacket -> master_non_sec_master_limiter:cmd_sink_startofpacket
	wire          router_009_src_endofpacket;                                                                    // router_009:src_endofpacket -> master_non_sec_master_limiter:cmd_sink_endofpacket
	wire  [136:0] master_non_sec_master_limiter_cmd_src_data;                                                    // master_non_sec_master_limiter:cmd_src_data -> cmd_demux_009:sink_data
	wire          master_non_sec_master_limiter_cmd_src_ready;                                                   // cmd_demux_009:sink_ready -> master_non_sec_master_limiter:cmd_src_ready
	wire   [44:0] master_non_sec_master_limiter_cmd_src_channel;                                                 // master_non_sec_master_limiter:cmd_src_channel -> cmd_demux_009:sink_channel
	wire          master_non_sec_master_limiter_cmd_src_startofpacket;                                           // master_non_sec_master_limiter:cmd_src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          master_non_sec_master_limiter_cmd_src_endofpacket;                                             // master_non_sec_master_limiter:cmd_src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          rsp_mux_009_src_valid;                                                                         // rsp_mux_009:src_valid -> master_non_sec_master_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_009_src_data;                                                                          // rsp_mux_009:src_data -> master_non_sec_master_limiter:rsp_sink_data
	wire          rsp_mux_009_src_ready;                                                                         // master_non_sec_master_limiter:rsp_sink_ready -> rsp_mux_009:src_ready
	wire   [44:0] rsp_mux_009_src_channel;                                                                       // rsp_mux_009:src_channel -> master_non_sec_master_limiter:rsp_sink_channel
	wire          rsp_mux_009_src_startofpacket;                                                                 // rsp_mux_009:src_startofpacket -> master_non_sec_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                                   // rsp_mux_009:src_endofpacket -> master_non_sec_master_limiter:rsp_sink_endofpacket
	wire          master_non_sec_master_limiter_rsp_src_valid;                                                   // master_non_sec_master_limiter:rsp_src_valid -> master_non_sec_master_agent:rp_valid
	wire  [136:0] master_non_sec_master_limiter_rsp_src_data;                                                    // master_non_sec_master_limiter:rsp_src_data -> master_non_sec_master_agent:rp_data
	wire          master_non_sec_master_limiter_rsp_src_ready;                                                   // master_non_sec_master_agent:rp_ready -> master_non_sec_master_limiter:rsp_src_ready
	wire   [44:0] master_non_sec_master_limiter_rsp_src_channel;                                                 // master_non_sec_master_limiter:rsp_src_channel -> master_non_sec_master_agent:rp_channel
	wire          master_non_sec_master_limiter_rsp_src_startofpacket;                                           // master_non_sec_master_limiter:rsp_src_startofpacket -> master_non_sec_master_agent:rp_startofpacket
	wire          master_non_sec_master_limiter_rsp_src_endofpacket;                                             // master_non_sec_master_limiter:rsp_src_endofpacket -> master_non_sec_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                             // cmd_mux:src_valid -> fifo_dummy64_in_in_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_src_data;                                                                              // cmd_mux:src_data -> fifo_dummy64_in_in_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                             // fifo_dummy64_in_in_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [44:0] cmd_mux_src_channel;                                                                           // cmd_mux:src_channel -> fifo_dummy64_in_in_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                     // cmd_mux:src_startofpacket -> fifo_dummy64_in_in_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                       // cmd_mux:src_endofpacket -> fifo_dummy64_in_in_burst_adapter:sink0_endofpacket
	wire          fifo_dummy64_in_in_burst_adapter_source0_valid;                                                // fifo_dummy64_in_in_burst_adapter:source0_valid -> fifo_dummy64_in_in_agent:cp_valid
	wire  [136:0] fifo_dummy64_in_in_burst_adapter_source0_data;                                                 // fifo_dummy64_in_in_burst_adapter:source0_data -> fifo_dummy64_in_in_agent:cp_data
	wire          fifo_dummy64_in_in_burst_adapter_source0_ready;                                                // fifo_dummy64_in_in_agent:cp_ready -> fifo_dummy64_in_in_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy64_in_in_burst_adapter_source0_channel;                                              // fifo_dummy64_in_in_burst_adapter:source0_channel -> fifo_dummy64_in_in_agent:cp_channel
	wire          fifo_dummy64_in_in_burst_adapter_source0_startofpacket;                                        // fifo_dummy64_in_in_burst_adapter:source0_startofpacket -> fifo_dummy64_in_in_agent:cp_startofpacket
	wire          fifo_dummy64_in_in_burst_adapter_source0_endofpacket;                                          // fifo_dummy64_in_in_burst_adapter:source0_endofpacket -> fifo_dummy64_in_in_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                         // cmd_mux_001:src_valid -> fifo_dummy_in_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_001_src_data;                                                                          // cmd_mux_001:src_data -> fifo_dummy_in_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                         // fifo_dummy_in_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [44:0] cmd_mux_001_src_channel;                                                                       // cmd_mux_001:src_channel -> fifo_dummy_in_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                 // cmd_mux_001:src_startofpacket -> fifo_dummy_in_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                   // cmd_mux_001:src_endofpacket -> fifo_dummy_in_burst_adapter:sink0_endofpacket
	wire          fifo_dummy_in_burst_adapter_source0_valid;                                                     // fifo_dummy_in_burst_adapter:source0_valid -> fifo_dummy_in_agent:cp_valid
	wire  [136:0] fifo_dummy_in_burst_adapter_source0_data;                                                      // fifo_dummy_in_burst_adapter:source0_data -> fifo_dummy_in_agent:cp_data
	wire          fifo_dummy_in_burst_adapter_source0_ready;                                                     // fifo_dummy_in_agent:cp_ready -> fifo_dummy_in_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy_in_burst_adapter_source0_channel;                                                   // fifo_dummy_in_burst_adapter:source0_channel -> fifo_dummy_in_agent:cp_channel
	wire          fifo_dummy_in_burst_adapter_source0_startofpacket;                                             // fifo_dummy_in_burst_adapter:source0_startofpacket -> fifo_dummy_in_agent:cp_startofpacket
	wire          fifo_dummy_in_burst_adapter_source0_endofpacket;                                               // fifo_dummy_in_burst_adapter:source0_endofpacket -> fifo_dummy_in_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                         // cmd_mux_002:src_valid -> fifo_dummy64_in_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_002_src_data;                                                                          // cmd_mux_002:src_data -> fifo_dummy64_in_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                         // fifo_dummy64_in_in_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [44:0] cmd_mux_002_src_channel;                                                                       // cmd_mux_002:src_channel -> fifo_dummy64_in_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                 // cmd_mux_002:src_startofpacket -> fifo_dummy64_in_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                   // cmd_mux_002:src_endofpacket -> fifo_dummy64_in_in_csr_burst_adapter:sink0_endofpacket
	wire          fifo_dummy64_in_in_csr_burst_adapter_source0_valid;                                            // fifo_dummy64_in_in_csr_burst_adapter:source0_valid -> fifo_dummy64_in_in_csr_agent:cp_valid
	wire  [136:0] fifo_dummy64_in_in_csr_burst_adapter_source0_data;                                             // fifo_dummy64_in_in_csr_burst_adapter:source0_data -> fifo_dummy64_in_in_csr_agent:cp_data
	wire          fifo_dummy64_in_in_csr_burst_adapter_source0_ready;                                            // fifo_dummy64_in_in_csr_agent:cp_ready -> fifo_dummy64_in_in_csr_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy64_in_in_csr_burst_adapter_source0_channel;                                          // fifo_dummy64_in_in_csr_burst_adapter:source0_channel -> fifo_dummy64_in_in_csr_agent:cp_channel
	wire          fifo_dummy64_in_in_csr_burst_adapter_source0_startofpacket;                                    // fifo_dummy64_in_in_csr_burst_adapter:source0_startofpacket -> fifo_dummy64_in_in_csr_agent:cp_startofpacket
	wire          fifo_dummy64_in_in_csr_burst_adapter_source0_endofpacket;                                      // fifo_dummy64_in_in_csr_burst_adapter:source0_endofpacket -> fifo_dummy64_in_in_csr_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                         // cmd_mux_003:src_valid -> fifo_dummy64_out_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_003_src_data;                                                                          // cmd_mux_003:src_data -> fifo_dummy64_out_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                         // fifo_dummy64_out_in_csr_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [44:0] cmd_mux_003_src_channel;                                                                       // cmd_mux_003:src_channel -> fifo_dummy64_out_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                 // cmd_mux_003:src_startofpacket -> fifo_dummy64_out_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                   // cmd_mux_003:src_endofpacket -> fifo_dummy64_out_in_csr_burst_adapter:sink0_endofpacket
	wire          fifo_dummy64_out_in_csr_burst_adapter_source0_valid;                                           // fifo_dummy64_out_in_csr_burst_adapter:source0_valid -> fifo_dummy64_out_in_csr_agent:cp_valid
	wire  [136:0] fifo_dummy64_out_in_csr_burst_adapter_source0_data;                                            // fifo_dummy64_out_in_csr_burst_adapter:source0_data -> fifo_dummy64_out_in_csr_agent:cp_data
	wire          fifo_dummy64_out_in_csr_burst_adapter_source0_ready;                                           // fifo_dummy64_out_in_csr_agent:cp_ready -> fifo_dummy64_out_in_csr_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy64_out_in_csr_burst_adapter_source0_channel;                                         // fifo_dummy64_out_in_csr_burst_adapter:source0_channel -> fifo_dummy64_out_in_csr_agent:cp_channel
	wire          fifo_dummy64_out_in_csr_burst_adapter_source0_startofpacket;                                   // fifo_dummy64_out_in_csr_burst_adapter:source0_startofpacket -> fifo_dummy64_out_in_csr_agent:cp_startofpacket
	wire          fifo_dummy64_out_in_csr_burst_adapter_source0_endofpacket;                                     // fifo_dummy64_out_in_csr_burst_adapter:source0_endofpacket -> fifo_dummy64_out_in_csr_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                         // cmd_mux_004:src_valid -> fifo_dummy_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_004_src_data;                                                                          // cmd_mux_004:src_data -> fifo_dummy_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                         // fifo_dummy_in_csr_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [44:0] cmd_mux_004_src_channel;                                                                       // cmd_mux_004:src_channel -> fifo_dummy_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                 // cmd_mux_004:src_startofpacket -> fifo_dummy_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                   // cmd_mux_004:src_endofpacket -> fifo_dummy_in_csr_burst_adapter:sink0_endofpacket
	wire          fifo_dummy_in_csr_burst_adapter_source0_valid;                                                 // fifo_dummy_in_csr_burst_adapter:source0_valid -> fifo_dummy_in_csr_agent:cp_valid
	wire  [136:0] fifo_dummy_in_csr_burst_adapter_source0_data;                                                  // fifo_dummy_in_csr_burst_adapter:source0_data -> fifo_dummy_in_csr_agent:cp_data
	wire          fifo_dummy_in_csr_burst_adapter_source0_ready;                                                 // fifo_dummy_in_csr_agent:cp_ready -> fifo_dummy_in_csr_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy_in_csr_burst_adapter_source0_channel;                                               // fifo_dummy_in_csr_burst_adapter:source0_channel -> fifo_dummy_in_csr_agent:cp_channel
	wire          fifo_dummy_in_csr_burst_adapter_source0_startofpacket;                                         // fifo_dummy_in_csr_burst_adapter:source0_startofpacket -> fifo_dummy_in_csr_agent:cp_startofpacket
	wire          fifo_dummy_in_csr_burst_adapter_source0_endofpacket;                                           // fifo_dummy_in_csr_burst_adapter:source0_endofpacket -> fifo_dummy_in_csr_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                         // cmd_mux_005:src_valid -> fifo_dummy64_out_out_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_005_src_data;                                                                          // cmd_mux_005:src_data -> fifo_dummy64_out_out_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                         // fifo_dummy64_out_out_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [44:0] cmd_mux_005_src_channel;                                                                       // cmd_mux_005:src_channel -> fifo_dummy64_out_out_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                                 // cmd_mux_005:src_startofpacket -> fifo_dummy64_out_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                   // cmd_mux_005:src_endofpacket -> fifo_dummy64_out_out_burst_adapter:sink0_endofpacket
	wire          fifo_dummy64_out_out_burst_adapter_source0_valid;                                              // fifo_dummy64_out_out_burst_adapter:source0_valid -> fifo_dummy64_out_out_agent:cp_valid
	wire  [136:0] fifo_dummy64_out_out_burst_adapter_source0_data;                                               // fifo_dummy64_out_out_burst_adapter:source0_data -> fifo_dummy64_out_out_agent:cp_data
	wire          fifo_dummy64_out_out_burst_adapter_source0_ready;                                              // fifo_dummy64_out_out_agent:cp_ready -> fifo_dummy64_out_out_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy64_out_out_burst_adapter_source0_channel;                                            // fifo_dummy64_out_out_burst_adapter:source0_channel -> fifo_dummy64_out_out_agent:cp_channel
	wire          fifo_dummy64_out_out_burst_adapter_source0_startofpacket;                                      // fifo_dummy64_out_out_burst_adapter:source0_startofpacket -> fifo_dummy64_out_out_agent:cp_startofpacket
	wire          fifo_dummy64_out_out_burst_adapter_source0_endofpacket;                                        // fifo_dummy64_out_out_burst_adapter:source0_endofpacket -> fifo_dummy64_out_out_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                         // cmd_mux_006:src_valid -> fifo_dummy_out_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_006_src_data;                                                                          // cmd_mux_006:src_data -> fifo_dummy_out_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                         // fifo_dummy_out_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [44:0] cmd_mux_006_src_channel;                                                                       // cmd_mux_006:src_channel -> fifo_dummy_out_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                                 // cmd_mux_006:src_startofpacket -> fifo_dummy_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                   // cmd_mux_006:src_endofpacket -> fifo_dummy_out_burst_adapter:sink0_endofpacket
	wire          fifo_dummy_out_burst_adapter_source0_valid;                                                    // fifo_dummy_out_burst_adapter:source0_valid -> fifo_dummy_out_agent:cp_valid
	wire  [136:0] fifo_dummy_out_burst_adapter_source0_data;                                                     // fifo_dummy_out_burst_adapter:source0_data -> fifo_dummy_out_agent:cp_data
	wire          fifo_dummy_out_burst_adapter_source0_ready;                                                    // fifo_dummy_out_agent:cp_ready -> fifo_dummy_out_burst_adapter:source0_ready
	wire   [44:0] fifo_dummy_out_burst_adapter_source0_channel;                                                  // fifo_dummy_out_burst_adapter:source0_channel -> fifo_dummy_out_agent:cp_channel
	wire          fifo_dummy_out_burst_adapter_source0_startofpacket;                                            // fifo_dummy_out_burst_adapter:source0_startofpacket -> fifo_dummy_out_agent:cp_startofpacket
	wire          fifo_dummy_out_burst_adapter_source0_endofpacket;                                              // fifo_dummy_out_burst_adapter:source0_endofpacket -> fifo_dummy_out_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                         // cmd_mux_007:src_valid -> switches_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_007_src_data;                                                                          // cmd_mux_007:src_data -> switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                         // switches_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [44:0] cmd_mux_007_src_channel;                                                                       // cmd_mux_007:src_channel -> switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                                 // cmd_mux_007:src_startofpacket -> switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                   // cmd_mux_007:src_endofpacket -> switches_s1_burst_adapter:sink0_endofpacket
	wire          switches_s1_burst_adapter_source0_valid;                                                       // switches_s1_burst_adapter:source0_valid -> switches_s1_agent:cp_valid
	wire  [136:0] switches_s1_burst_adapter_source0_data;                                                        // switches_s1_burst_adapter:source0_data -> switches_s1_agent:cp_data
	wire          switches_s1_burst_adapter_source0_ready;                                                       // switches_s1_agent:cp_ready -> switches_s1_burst_adapter:source0_ready
	wire   [44:0] switches_s1_burst_adapter_source0_channel;                                                     // switches_s1_burst_adapter:source0_channel -> switches_s1_agent:cp_channel
	wire          switches_s1_burst_adapter_source0_startofpacket;                                               // switches_s1_burst_adapter:source0_startofpacket -> switches_s1_agent:cp_startofpacket
	wire          switches_s1_burst_adapter_source0_endofpacket;                                                 // switches_s1_burst_adapter:source0_endofpacket -> switches_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                         // cmd_mux_008:src_valid -> sdram_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_008_src_data;                                                                          // cmd_mux_008:src_data -> sdram_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                         // sdram_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [44:0] cmd_mux_008_src_channel;                                                                       // cmd_mux_008:src_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                                 // cmd_mux_008:src_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                   // cmd_mux_008:src_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                          // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire  [118:0] sdram_s1_burst_adapter_source0_data;                                                           // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                          // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire   [44:0] sdram_s1_burst_adapter_source0_channel;                                                        // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                  // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                    // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                         // cmd_mux_009:src_valid -> adc_fifo_mem_out_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_009_src_data;                                                                          // cmd_mux_009:src_data -> adc_fifo_mem_out_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                         // adc_fifo_mem_out_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [44:0] cmd_mux_009_src_channel;                                                                       // cmd_mux_009:src_channel -> adc_fifo_mem_out_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                                 // cmd_mux_009:src_startofpacket -> adc_fifo_mem_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                   // cmd_mux_009:src_endofpacket -> adc_fifo_mem_out_burst_adapter:sink0_endofpacket
	wire          adc_fifo_mem_out_burst_adapter_source0_valid;                                                  // adc_fifo_mem_out_burst_adapter:source0_valid -> adc_fifo_mem_out_agent:cp_valid
	wire  [136:0] adc_fifo_mem_out_burst_adapter_source0_data;                                                   // adc_fifo_mem_out_burst_adapter:source0_data -> adc_fifo_mem_out_agent:cp_data
	wire          adc_fifo_mem_out_burst_adapter_source0_ready;                                                  // adc_fifo_mem_out_agent:cp_ready -> adc_fifo_mem_out_burst_adapter:source0_ready
	wire   [44:0] adc_fifo_mem_out_burst_adapter_source0_channel;                                                // adc_fifo_mem_out_burst_adapter:source0_channel -> adc_fifo_mem_out_agent:cp_channel
	wire          adc_fifo_mem_out_burst_adapter_source0_startofpacket;                                          // adc_fifo_mem_out_burst_adapter:source0_startofpacket -> adc_fifo_mem_out_agent:cp_startofpacket
	wire          adc_fifo_mem_out_burst_adapter_source0_endofpacket;                                            // adc_fifo_mem_out_burst_adapter:source0_endofpacket -> adc_fifo_mem_out_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                         // cmd_mux_010:src_valid -> nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_010_src_data;                                                                          // cmd_mux_010:src_data -> nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                         // nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [44:0] cmd_mux_010_src_channel;                                                                       // cmd_mux_010:src_channel -> nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                                 // cmd_mux_010:src_startofpacket -> nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                   // cmd_mux_010:src_endofpacket -> nmr_parameters_adc_val_sub_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_adc_val_sub_s1_burst_adapter_source0_valid;                                     // nmr_parameters_adc_val_sub_s1_burst_adapter:source0_valid -> nmr_parameters_adc_val_sub_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_adc_val_sub_s1_burst_adapter_source0_data;                                      // nmr_parameters_adc_val_sub_s1_burst_adapter:source0_data -> nmr_parameters_adc_val_sub_s1_agent:cp_data
	wire          nmr_parameters_adc_val_sub_s1_burst_adapter_source0_ready;                                     // nmr_parameters_adc_val_sub_s1_agent:cp_ready -> nmr_parameters_adc_val_sub_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_adc_val_sub_s1_burst_adapter_source0_channel;                                   // nmr_parameters_adc_val_sub_s1_burst_adapter:source0_channel -> nmr_parameters_adc_val_sub_s1_agent:cp_channel
	wire          nmr_parameters_adc_val_sub_s1_burst_adapter_source0_startofpacket;                             // nmr_parameters_adc_val_sub_s1_burst_adapter:source0_startofpacket -> nmr_parameters_adc_val_sub_s1_agent:cp_startofpacket
	wire          nmr_parameters_adc_val_sub_s1_burst_adapter_source0_endofpacket;                               // nmr_parameters_adc_val_sub_s1_burst_adapter:source0_endofpacket -> nmr_parameters_adc_val_sub_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                         // cmd_mux_011:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_011_src_data;                                                                          // cmd_mux_011:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                         // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [44:0] cmd_mux_011_src_channel;                                                                       // cmd_mux_011:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                                 // cmd_mux_011:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                   // cmd_mux_011:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                                       // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [136:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                                        // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                                       // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [44:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                                     // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                               // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                                 // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                         // cmd_mux_012:src_valid -> dconv_fir_avalon_mm_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_012_src_data;                                                                          // cmd_mux_012:src_data -> dconv_fir_avalon_mm_slave_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                         // dconv_fir_avalon_mm_slave_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [44:0] cmd_mux_012_src_channel;                                                                       // cmd_mux_012:src_channel -> dconv_fir_avalon_mm_slave_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                                 // cmd_mux_012:src_startofpacket -> dconv_fir_avalon_mm_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                   // cmd_mux_012:src_endofpacket -> dconv_fir_avalon_mm_slave_burst_adapter:sink0_endofpacket
	wire          dconv_fir_avalon_mm_slave_burst_adapter_source0_valid;                                         // dconv_fir_avalon_mm_slave_burst_adapter:source0_valid -> dconv_fir_avalon_mm_slave_agent:cp_valid
	wire  [118:0] dconv_fir_avalon_mm_slave_burst_adapter_source0_data;                                          // dconv_fir_avalon_mm_slave_burst_adapter:source0_data -> dconv_fir_avalon_mm_slave_agent:cp_data
	wire          dconv_fir_avalon_mm_slave_burst_adapter_source0_ready;                                         // dconv_fir_avalon_mm_slave_agent:cp_ready -> dconv_fir_avalon_mm_slave_burst_adapter:source0_ready
	wire   [44:0] dconv_fir_avalon_mm_slave_burst_adapter_source0_channel;                                       // dconv_fir_avalon_mm_slave_burst_adapter:source0_channel -> dconv_fir_avalon_mm_slave_agent:cp_channel
	wire          dconv_fir_avalon_mm_slave_burst_adapter_source0_startofpacket;                                 // dconv_fir_avalon_mm_slave_burst_adapter:source0_startofpacket -> dconv_fir_avalon_mm_slave_agent:cp_startofpacket
	wire          dconv_fir_avalon_mm_slave_burst_adapter_source0_endofpacket;                                   // dconv_fir_avalon_mm_slave_burst_adapter:source0_endofpacket -> dconv_fir_avalon_mm_slave_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                         // cmd_mux_013:src_valid -> dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_013_src_data;                                                                          // cmd_mux_013:src_data -> dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                                         // dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [44:0] cmd_mux_013_src_channel;                                                                       // cmd_mux_013:src_channel -> dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                                 // cmd_mux_013:src_startofpacket -> dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                   // cmd_mux_013:src_endofpacket -> dconv_fir_q_avalon_mm_slave_burst_adapter:sink0_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_burst_adapter_source0_valid;                                       // dconv_fir_q_avalon_mm_slave_burst_adapter:source0_valid -> dconv_fir_q_avalon_mm_slave_agent:cp_valid
	wire  [118:0] dconv_fir_q_avalon_mm_slave_burst_adapter_source0_data;                                        // dconv_fir_q_avalon_mm_slave_burst_adapter:source0_data -> dconv_fir_q_avalon_mm_slave_agent:cp_data
	wire          dconv_fir_q_avalon_mm_slave_burst_adapter_source0_ready;                                       // dconv_fir_q_avalon_mm_slave_agent:cp_ready -> dconv_fir_q_avalon_mm_slave_burst_adapter:source0_ready
	wire   [44:0] dconv_fir_q_avalon_mm_slave_burst_adapter_source0_channel;                                     // dconv_fir_q_avalon_mm_slave_burst_adapter:source0_channel -> dconv_fir_q_avalon_mm_slave_agent:cp_channel
	wire          dconv_fir_q_avalon_mm_slave_burst_adapter_source0_startofpacket;                               // dconv_fir_q_avalon_mm_slave_burst_adapter:source0_startofpacket -> dconv_fir_q_avalon_mm_slave_agent:cp_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_burst_adapter_source0_endofpacket;                                 // dconv_fir_q_avalon_mm_slave_burst_adapter:source0_endofpacket -> dconv_fir_q_avalon_mm_slave_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                         // cmd_mux_014:src_valid -> alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_014_src_data;                                                                          // cmd_mux_014:src_data -> alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                                         // alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [44:0] cmd_mux_014_src_channel;                                                                       // cmd_mux_014:src_channel -> alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                                 // cmd_mux_014:src_startofpacket -> alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                   // cmd_mux_014:src_endofpacket -> alt_vip_vfr_vga_avalon_slave_burst_adapter:sink0_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_valid;                                      // alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_valid -> alt_vip_vfr_vga_avalon_slave_agent:cp_valid
	wire  [136:0] alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_data;                                       // alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_data -> alt_vip_vfr_vga_avalon_slave_agent:cp_data
	wire          alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_ready;                                      // alt_vip_vfr_vga_avalon_slave_agent:cp_ready -> alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_ready
	wire   [44:0] alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_channel;                                    // alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_channel -> alt_vip_vfr_vga_avalon_slave_agent:cp_channel
	wire          alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_startofpacket;                              // alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent:cp_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_endofpacket;                                // alt_vip_vfr_vga_avalon_slave_burst_adapter:source0_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                         // cmd_mux_015:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_015_src_data;                                                                          // cmd_mux_015:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                         // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [44:0] cmd_mux_015_src_channel;                                                                       // cmd_mux_015:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                                 // cmd_mux_015:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                   // cmd_mux_015:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                                          // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [136:0] sysid_qsys_control_slave_burst_adapter_source0_data;                                           // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                                          // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire   [44:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                                        // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;                                  // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;                                    // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                                         // cmd_mux_016:src_valid -> i2c_int_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_016_src_data;                                                                          // cmd_mux_016:src_data -> i2c_int_csr_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                                         // i2c_int_csr_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [44:0] cmd_mux_016_src_channel;                                                                       // cmd_mux_016:src_channel -> i2c_int_csr_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                                 // cmd_mux_016:src_startofpacket -> i2c_int_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                   // cmd_mux_016:src_endofpacket -> i2c_int_csr_burst_adapter:sink0_endofpacket
	wire          i2c_int_csr_burst_adapter_source0_valid;                                                       // i2c_int_csr_burst_adapter:source0_valid -> i2c_int_csr_agent:cp_valid
	wire  [136:0] i2c_int_csr_burst_adapter_source0_data;                                                        // i2c_int_csr_burst_adapter:source0_data -> i2c_int_csr_agent:cp_data
	wire          i2c_int_csr_burst_adapter_source0_ready;                                                       // i2c_int_csr_agent:cp_ready -> i2c_int_csr_burst_adapter:source0_ready
	wire   [44:0] i2c_int_csr_burst_adapter_source0_channel;                                                     // i2c_int_csr_burst_adapter:source0_channel -> i2c_int_csr_agent:cp_channel
	wire          i2c_int_csr_burst_adapter_source0_startofpacket;                                               // i2c_int_csr_burst_adapter:source0_startofpacket -> i2c_int_csr_agent:cp_startofpacket
	wire          i2c_int_csr_burst_adapter_source0_endofpacket;                                                 // i2c_int_csr_burst_adapter:source0_endofpacket -> i2c_int_csr_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                                         // cmd_mux_017:src_valid -> i2c_ext_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_017_src_data;                                                                          // cmd_mux_017:src_data -> i2c_ext_csr_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                                         // i2c_ext_csr_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [44:0] cmd_mux_017_src_channel;                                                                       // cmd_mux_017:src_channel -> i2c_ext_csr_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                                                 // cmd_mux_017:src_startofpacket -> i2c_ext_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                   // cmd_mux_017:src_endofpacket -> i2c_ext_csr_burst_adapter:sink0_endofpacket
	wire          i2c_ext_csr_burst_adapter_source0_valid;                                                       // i2c_ext_csr_burst_adapter:source0_valid -> i2c_ext_csr_agent:cp_valid
	wire  [136:0] i2c_ext_csr_burst_adapter_source0_data;                                                        // i2c_ext_csr_burst_adapter:source0_data -> i2c_ext_csr_agent:cp_data
	wire          i2c_ext_csr_burst_adapter_source0_ready;                                                       // i2c_ext_csr_agent:cp_ready -> i2c_ext_csr_burst_adapter:source0_ready
	wire   [44:0] i2c_ext_csr_burst_adapter_source0_channel;                                                     // i2c_ext_csr_burst_adapter:source0_channel -> i2c_ext_csr_agent:cp_channel
	wire          i2c_ext_csr_burst_adapter_source0_startofpacket;                                               // i2c_ext_csr_burst_adapter:source0_startofpacket -> i2c_ext_csr_agent:cp_startofpacket
	wire          i2c_ext_csr_burst_adapter_source0_endofpacket;                                                 // i2c_ext_csr_burst_adapter:source0_endofpacket -> i2c_ext_csr_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                                         // cmd_mux_018:src_valid -> nmr_parameters_delay_nosig_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_018_src_data;                                                                          // cmd_mux_018:src_data -> nmr_parameters_delay_nosig_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                                         // nmr_parameters_delay_nosig_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [44:0] cmd_mux_018_src_channel;                                                                       // cmd_mux_018:src_channel -> nmr_parameters_delay_nosig_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                                                 // cmd_mux_018:src_startofpacket -> nmr_parameters_delay_nosig_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                   // cmd_mux_018:src_endofpacket -> nmr_parameters_delay_nosig_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_delay_nosig_s1_burst_adapter_source0_valid;                                     // nmr_parameters_delay_nosig_s1_burst_adapter:source0_valid -> nmr_parameters_delay_nosig_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_delay_nosig_s1_burst_adapter_source0_data;                                      // nmr_parameters_delay_nosig_s1_burst_adapter:source0_data -> nmr_parameters_delay_nosig_s1_agent:cp_data
	wire          nmr_parameters_delay_nosig_s1_burst_adapter_source0_ready;                                     // nmr_parameters_delay_nosig_s1_agent:cp_ready -> nmr_parameters_delay_nosig_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_delay_nosig_s1_burst_adapter_source0_channel;                                   // nmr_parameters_delay_nosig_s1_burst_adapter:source0_channel -> nmr_parameters_delay_nosig_s1_agent:cp_channel
	wire          nmr_parameters_delay_nosig_s1_burst_adapter_source0_startofpacket;                             // nmr_parameters_delay_nosig_s1_burst_adapter:source0_startofpacket -> nmr_parameters_delay_nosig_s1_agent:cp_startofpacket
	wire          nmr_parameters_delay_nosig_s1_burst_adapter_source0_endofpacket;                               // nmr_parameters_delay_nosig_s1_burst_adapter:source0_endofpacket -> nmr_parameters_delay_nosig_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                                         // cmd_mux_019:src_valid -> nmr_parameters_delay_sig_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_019_src_data;                                                                          // cmd_mux_019:src_data -> nmr_parameters_delay_sig_s1_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                                         // nmr_parameters_delay_sig_s1_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [44:0] cmd_mux_019_src_channel;                                                                       // cmd_mux_019:src_channel -> nmr_parameters_delay_sig_s1_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                                                 // cmd_mux_019:src_startofpacket -> nmr_parameters_delay_sig_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                   // cmd_mux_019:src_endofpacket -> nmr_parameters_delay_sig_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_delay_sig_s1_burst_adapter_source0_valid;                                       // nmr_parameters_delay_sig_s1_burst_adapter:source0_valid -> nmr_parameters_delay_sig_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_delay_sig_s1_burst_adapter_source0_data;                                        // nmr_parameters_delay_sig_s1_burst_adapter:source0_data -> nmr_parameters_delay_sig_s1_agent:cp_data
	wire          nmr_parameters_delay_sig_s1_burst_adapter_source0_ready;                                       // nmr_parameters_delay_sig_s1_agent:cp_ready -> nmr_parameters_delay_sig_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_delay_sig_s1_burst_adapter_source0_channel;                                     // nmr_parameters_delay_sig_s1_burst_adapter:source0_channel -> nmr_parameters_delay_sig_s1_agent:cp_channel
	wire          nmr_parameters_delay_sig_s1_burst_adapter_source0_startofpacket;                               // nmr_parameters_delay_sig_s1_burst_adapter:source0_startofpacket -> nmr_parameters_delay_sig_s1_agent:cp_startofpacket
	wire          nmr_parameters_delay_sig_s1_burst_adapter_source0_endofpacket;                                 // nmr_parameters_delay_sig_s1_burst_adapter:source0_endofpacket -> nmr_parameters_delay_sig_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                                         // cmd_mux_020:src_valid -> nmr_parameters_delay_t1_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_020_src_data;                                                                          // cmd_mux_020:src_data -> nmr_parameters_delay_t1_s1_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                                         // nmr_parameters_delay_t1_s1_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [44:0] cmd_mux_020_src_channel;                                                                       // cmd_mux_020:src_channel -> nmr_parameters_delay_t1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                                                 // cmd_mux_020:src_startofpacket -> nmr_parameters_delay_t1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                   // cmd_mux_020:src_endofpacket -> nmr_parameters_delay_t1_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_delay_t1_s1_burst_adapter_source0_valid;                                        // nmr_parameters_delay_t1_s1_burst_adapter:source0_valid -> nmr_parameters_delay_t1_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_delay_t1_s1_burst_adapter_source0_data;                                         // nmr_parameters_delay_t1_s1_burst_adapter:source0_data -> nmr_parameters_delay_t1_s1_agent:cp_data
	wire          nmr_parameters_delay_t1_s1_burst_adapter_source0_ready;                                        // nmr_parameters_delay_t1_s1_agent:cp_ready -> nmr_parameters_delay_t1_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_delay_t1_s1_burst_adapter_source0_channel;                                      // nmr_parameters_delay_t1_s1_burst_adapter:source0_channel -> nmr_parameters_delay_t1_s1_agent:cp_channel
	wire          nmr_parameters_delay_t1_s1_burst_adapter_source0_startofpacket;                                // nmr_parameters_delay_t1_s1_burst_adapter:source0_startofpacket -> nmr_parameters_delay_t1_s1_agent:cp_startofpacket
	wire          nmr_parameters_delay_t1_s1_burst_adapter_source0_endofpacket;                                  // nmr_parameters_delay_t1_s1_burst_adapter:source0_endofpacket -> nmr_parameters_delay_t1_s1_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                                         // cmd_mux_021:src_valid -> nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_021_src_data;                                                                          // cmd_mux_021:src_data -> nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                                         // nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [44:0] cmd_mux_021_src_channel;                                                                       // cmd_mux_021:src_channel -> nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                                                 // cmd_mux_021:src_startofpacket -> nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                   // cmd_mux_021:src_endofpacket -> nmr_parameters_echoes_per_scan_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_valid;                                 // nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_valid -> nmr_parameters_echoes_per_scan_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_data;                                  // nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_data -> nmr_parameters_echoes_per_scan_s1_agent:cp_data
	wire          nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_ready;                                 // nmr_parameters_echoes_per_scan_s1_agent:cp_ready -> nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_channel;                               // nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_channel -> nmr_parameters_echoes_per_scan_s1_agent:cp_channel
	wire          nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_startofpacket;                         // nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_startofpacket -> nmr_parameters_echoes_per_scan_s1_agent:cp_startofpacket
	wire          nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_endofpacket;                           // nmr_parameters_echoes_per_scan_s1_burst_adapter:source0_endofpacket -> nmr_parameters_echoes_per_scan_s1_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                                         // cmd_mux_022:src_valid -> adc_fifo_mem_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_022_src_data;                                                                          // cmd_mux_022:src_data -> adc_fifo_mem_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                                         // adc_fifo_mem_in_csr_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [44:0] cmd_mux_022_src_channel;                                                                       // cmd_mux_022:src_channel -> adc_fifo_mem_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                                                 // cmd_mux_022:src_startofpacket -> adc_fifo_mem_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                   // cmd_mux_022:src_endofpacket -> adc_fifo_mem_in_csr_burst_adapter:sink0_endofpacket
	wire          adc_fifo_mem_in_csr_burst_adapter_source0_valid;                                               // adc_fifo_mem_in_csr_burst_adapter:source0_valid -> adc_fifo_mem_in_csr_agent:cp_valid
	wire  [136:0] adc_fifo_mem_in_csr_burst_adapter_source0_data;                                                // adc_fifo_mem_in_csr_burst_adapter:source0_data -> adc_fifo_mem_in_csr_agent:cp_data
	wire          adc_fifo_mem_in_csr_burst_adapter_source0_ready;                                               // adc_fifo_mem_in_csr_agent:cp_ready -> adc_fifo_mem_in_csr_burst_adapter:source0_ready
	wire   [44:0] adc_fifo_mem_in_csr_burst_adapter_source0_channel;                                             // adc_fifo_mem_in_csr_burst_adapter:source0_channel -> adc_fifo_mem_in_csr_agent:cp_channel
	wire          adc_fifo_mem_in_csr_burst_adapter_source0_startofpacket;                                       // adc_fifo_mem_in_csr_burst_adapter:source0_startofpacket -> adc_fifo_mem_in_csr_agent:cp_startofpacket
	wire          adc_fifo_mem_in_csr_burst_adapter_source0_endofpacket;                                         // adc_fifo_mem_in_csr_burst_adapter:source0_endofpacket -> adc_fifo_mem_in_csr_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                                         // cmd_mux_023:src_valid -> dconv_fifo_mem_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_023_src_data;                                                                          // cmd_mux_023:src_data -> dconv_fifo_mem_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                                         // dconv_fifo_mem_in_csr_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [44:0] cmd_mux_023_src_channel;                                                                       // cmd_mux_023:src_channel -> dconv_fifo_mem_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                                                 // cmd_mux_023:src_startofpacket -> dconv_fifo_mem_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                   // cmd_mux_023:src_endofpacket -> dconv_fifo_mem_in_csr_burst_adapter:sink0_endofpacket
	wire          dconv_fifo_mem_in_csr_burst_adapter_source0_valid;                                             // dconv_fifo_mem_in_csr_burst_adapter:source0_valid -> dconv_fifo_mem_in_csr_agent:cp_valid
	wire  [136:0] dconv_fifo_mem_in_csr_burst_adapter_source0_data;                                              // dconv_fifo_mem_in_csr_burst_adapter:source0_data -> dconv_fifo_mem_in_csr_agent:cp_data
	wire          dconv_fifo_mem_in_csr_burst_adapter_source0_ready;                                             // dconv_fifo_mem_in_csr_agent:cp_ready -> dconv_fifo_mem_in_csr_burst_adapter:source0_ready
	wire   [44:0] dconv_fifo_mem_in_csr_burst_adapter_source0_channel;                                           // dconv_fifo_mem_in_csr_burst_adapter:source0_channel -> dconv_fifo_mem_in_csr_agent:cp_channel
	wire          dconv_fifo_mem_in_csr_burst_adapter_source0_startofpacket;                                     // dconv_fifo_mem_in_csr_burst_adapter:source0_startofpacket -> dconv_fifo_mem_in_csr_agent:cp_startofpacket
	wire          dconv_fifo_mem_in_csr_burst_adapter_source0_endofpacket;                                       // dconv_fifo_mem_in_csr_burst_adapter:source0_endofpacket -> dconv_fifo_mem_in_csr_agent:cp_endofpacket
	wire          cmd_mux_024_src_valid;                                                                         // cmd_mux_024:src_valid -> dconv_fifo_mem_q_in_csr_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_024_src_data;                                                                          // cmd_mux_024:src_data -> dconv_fifo_mem_q_in_csr_burst_adapter:sink0_data
	wire          cmd_mux_024_src_ready;                                                                         // dconv_fifo_mem_q_in_csr_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire   [44:0] cmd_mux_024_src_channel;                                                                       // cmd_mux_024:src_channel -> dconv_fifo_mem_q_in_csr_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_startofpacket;                                                                 // cmd_mux_024:src_startofpacket -> dconv_fifo_mem_q_in_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                   // cmd_mux_024:src_endofpacket -> dconv_fifo_mem_q_in_csr_burst_adapter:sink0_endofpacket
	wire          dconv_fifo_mem_q_in_csr_burst_adapter_source0_valid;                                           // dconv_fifo_mem_q_in_csr_burst_adapter:source0_valid -> dconv_fifo_mem_q_in_csr_agent:cp_valid
	wire  [136:0] dconv_fifo_mem_q_in_csr_burst_adapter_source0_data;                                            // dconv_fifo_mem_q_in_csr_burst_adapter:source0_data -> dconv_fifo_mem_q_in_csr_agent:cp_data
	wire          dconv_fifo_mem_q_in_csr_burst_adapter_source0_ready;                                           // dconv_fifo_mem_q_in_csr_agent:cp_ready -> dconv_fifo_mem_q_in_csr_burst_adapter:source0_ready
	wire   [44:0] dconv_fifo_mem_q_in_csr_burst_adapter_source0_channel;                                         // dconv_fifo_mem_q_in_csr_burst_adapter:source0_channel -> dconv_fifo_mem_q_in_csr_agent:cp_channel
	wire          dconv_fifo_mem_q_in_csr_burst_adapter_source0_startofpacket;                                   // dconv_fifo_mem_q_in_csr_burst_adapter:source0_startofpacket -> dconv_fifo_mem_q_in_csr_agent:cp_startofpacket
	wire          dconv_fifo_mem_q_in_csr_burst_adapter_source0_endofpacket;                                     // dconv_fifo_mem_q_in_csr_burst_adapter:source0_endofpacket -> dconv_fifo_mem_q_in_csr_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                                         // cmd_mux_025:src_valid -> nmr_parameters_init_delay_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_025_src_data;                                                                          // cmd_mux_025:src_data -> nmr_parameters_init_delay_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                                         // nmr_parameters_init_delay_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [44:0] cmd_mux_025_src_channel;                                                                       // cmd_mux_025:src_channel -> nmr_parameters_init_delay_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                                                 // cmd_mux_025:src_startofpacket -> nmr_parameters_init_delay_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                                   // cmd_mux_025:src_endofpacket -> nmr_parameters_init_delay_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_init_delay_s1_burst_adapter_source0_valid;                                      // nmr_parameters_init_delay_s1_burst_adapter:source0_valid -> nmr_parameters_init_delay_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_init_delay_s1_burst_adapter_source0_data;                                       // nmr_parameters_init_delay_s1_burst_adapter:source0_data -> nmr_parameters_init_delay_s1_agent:cp_data
	wire          nmr_parameters_init_delay_s1_burst_adapter_source0_ready;                                      // nmr_parameters_init_delay_s1_agent:cp_ready -> nmr_parameters_init_delay_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_init_delay_s1_burst_adapter_source0_channel;                                    // nmr_parameters_init_delay_s1_burst_adapter:source0_channel -> nmr_parameters_init_delay_s1_agent:cp_channel
	wire          nmr_parameters_init_delay_s1_burst_adapter_source0_startofpacket;                              // nmr_parameters_init_delay_s1_burst_adapter:source0_startofpacket -> nmr_parameters_init_delay_s1_agent:cp_startofpacket
	wire          nmr_parameters_init_delay_s1_burst_adapter_source0_endofpacket;                                // nmr_parameters_init_delay_s1_burst_adapter:source0_endofpacket -> nmr_parameters_init_delay_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                                         // cmd_mux_026:src_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_026_src_data;                                                                          // cmd_mux_026:src_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                                         // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [44:0] cmd_mux_026_src_channel;                                                                       // cmd_mux_026:src_channel -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                                                 // cmd_mux_026:src_startofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                                   // cmd_mux_026:src_endofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_endofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid;                            // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_valid
	wire  [136:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data;                             // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready;                            // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_ready
	wire   [44:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel;                          // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_channel -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_channel
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket;                    // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_startofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_startofpacket
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket;                      // nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_endofpacket -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_027_src_valid;                                                                         // cmd_mux_027:src_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_027_src_data;                                                                          // cmd_mux_027:src_data -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_027_src_ready;                                                                         // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire   [44:0] cmd_mux_027_src_channel;                                                                       // cmd_mux_027:src_channel -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_startofpacket;                                                                 // cmd_mux_027:src_startofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                                   // cmd_mux_027:src_endofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:sink0_endofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid;                           // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_valid
	wire  [136:0] analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data;                            // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_data -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready;                           // analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_ready
	wire   [44:0] analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel;                         // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_channel -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_channel
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket;                   // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_startofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_startofpacket
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket;                     // analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter:source0_endofpacket -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                                         // cmd_mux_028:src_valid -> dconv_fifo_mem_out_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_028_src_data;                                                                          // cmd_mux_028:src_data -> dconv_fifo_mem_out_burst_adapter:sink0_data
	wire          cmd_mux_028_src_ready;                                                                         // dconv_fifo_mem_out_burst_adapter:sink0_ready -> cmd_mux_028:src_ready
	wire   [44:0] cmd_mux_028_src_channel;                                                                       // cmd_mux_028:src_channel -> dconv_fifo_mem_out_burst_adapter:sink0_channel
	wire          cmd_mux_028_src_startofpacket;                                                                 // cmd_mux_028:src_startofpacket -> dconv_fifo_mem_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                                   // cmd_mux_028:src_endofpacket -> dconv_fifo_mem_out_burst_adapter:sink0_endofpacket
	wire          dconv_fifo_mem_out_burst_adapter_source0_valid;                                                // dconv_fifo_mem_out_burst_adapter:source0_valid -> dconv_fifo_mem_out_agent:cp_valid
	wire  [136:0] dconv_fifo_mem_out_burst_adapter_source0_data;                                                 // dconv_fifo_mem_out_burst_adapter:source0_data -> dconv_fifo_mem_out_agent:cp_data
	wire          dconv_fifo_mem_out_burst_adapter_source0_ready;                                                // dconv_fifo_mem_out_agent:cp_ready -> dconv_fifo_mem_out_burst_adapter:source0_ready
	wire   [44:0] dconv_fifo_mem_out_burst_adapter_source0_channel;                                              // dconv_fifo_mem_out_burst_adapter:source0_channel -> dconv_fifo_mem_out_agent:cp_channel
	wire          dconv_fifo_mem_out_burst_adapter_source0_startofpacket;                                        // dconv_fifo_mem_out_burst_adapter:source0_startofpacket -> dconv_fifo_mem_out_agent:cp_startofpacket
	wire          dconv_fifo_mem_out_burst_adapter_source0_endofpacket;                                          // dconv_fifo_mem_out_burst_adapter:source0_endofpacket -> dconv_fifo_mem_out_agent:cp_endofpacket
	wire          cmd_mux_029_src_valid;                                                                         // cmd_mux_029:src_valid -> dconv_fifo_mem_q_out_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_029_src_data;                                                                          // cmd_mux_029:src_data -> dconv_fifo_mem_q_out_burst_adapter:sink0_data
	wire          cmd_mux_029_src_ready;                                                                         // dconv_fifo_mem_q_out_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire   [44:0] cmd_mux_029_src_channel;                                                                       // cmd_mux_029:src_channel -> dconv_fifo_mem_q_out_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_startofpacket;                                                                 // cmd_mux_029:src_startofpacket -> dconv_fifo_mem_q_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                                   // cmd_mux_029:src_endofpacket -> dconv_fifo_mem_q_out_burst_adapter:sink0_endofpacket
	wire          dconv_fifo_mem_q_out_burst_adapter_source0_valid;                                              // dconv_fifo_mem_q_out_burst_adapter:source0_valid -> dconv_fifo_mem_q_out_agent:cp_valid
	wire  [136:0] dconv_fifo_mem_q_out_burst_adapter_source0_data;                                               // dconv_fifo_mem_q_out_burst_adapter:source0_data -> dconv_fifo_mem_q_out_agent:cp_data
	wire          dconv_fifo_mem_q_out_burst_adapter_source0_ready;                                              // dconv_fifo_mem_q_out_agent:cp_ready -> dconv_fifo_mem_q_out_burst_adapter:source0_ready
	wire   [44:0] dconv_fifo_mem_q_out_burst_adapter_source0_channel;                                            // dconv_fifo_mem_q_out_burst_adapter:source0_channel -> dconv_fifo_mem_q_out_agent:cp_channel
	wire          dconv_fifo_mem_q_out_burst_adapter_source0_startofpacket;                                      // dconv_fifo_mem_q_out_burst_adapter:source0_startofpacket -> dconv_fifo_mem_q_out_agent:cp_startofpacket
	wire          dconv_fifo_mem_q_out_burst_adapter_source0_endofpacket;                                        // dconv_fifo_mem_q_out_burst_adapter:source0_endofpacket -> dconv_fifo_mem_q_out_agent:cp_endofpacket
	wire          cmd_mux_030_src_valid;                                                                         // cmd_mux_030:src_valid -> nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_030_src_data;                                                                          // cmd_mux_030:src_data -> nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                                         // nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [44:0] cmd_mux_030_src_channel;                                                                       // cmd_mux_030:src_channel -> nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                                                 // cmd_mux_030:src_startofpacket -> nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                                   // cmd_mux_030:src_endofpacket -> nmr_parameters_pulse_180deg_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_pulse_180deg_s1_burst_adapter_source0_valid;                                    // nmr_parameters_pulse_180deg_s1_burst_adapter:source0_valid -> nmr_parameters_pulse_180deg_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_pulse_180deg_s1_burst_adapter_source0_data;                                     // nmr_parameters_pulse_180deg_s1_burst_adapter:source0_data -> nmr_parameters_pulse_180deg_s1_agent:cp_data
	wire          nmr_parameters_pulse_180deg_s1_burst_adapter_source0_ready;                                    // nmr_parameters_pulse_180deg_s1_agent:cp_ready -> nmr_parameters_pulse_180deg_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_pulse_180deg_s1_burst_adapter_source0_channel;                                  // nmr_parameters_pulse_180deg_s1_burst_adapter:source0_channel -> nmr_parameters_pulse_180deg_s1_agent:cp_channel
	wire          nmr_parameters_pulse_180deg_s1_burst_adapter_source0_startofpacket;                            // nmr_parameters_pulse_180deg_s1_burst_adapter:source0_startofpacket -> nmr_parameters_pulse_180deg_s1_agent:cp_startofpacket
	wire          nmr_parameters_pulse_180deg_s1_burst_adapter_source0_endofpacket;                              // nmr_parameters_pulse_180deg_s1_burst_adapter:source0_endofpacket -> nmr_parameters_pulse_180deg_s1_agent:cp_endofpacket
	wire          cmd_mux_031_src_valid;                                                                         // cmd_mux_031:src_valid -> nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_031_src_data;                                                                          // cmd_mux_031:src_data -> nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_data
	wire          cmd_mux_031_src_ready;                                                                         // nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_ready -> cmd_mux_031:src_ready
	wire   [44:0] cmd_mux_031_src_channel;                                                                       // cmd_mux_031:src_channel -> nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_channel
	wire          cmd_mux_031_src_startofpacket;                                                                 // cmd_mux_031:src_startofpacket -> nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                                   // cmd_mux_031:src_endofpacket -> nmr_parameters_pulse_90deg_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_pulse_90deg_s1_burst_adapter_source0_valid;                                     // nmr_parameters_pulse_90deg_s1_burst_adapter:source0_valid -> nmr_parameters_pulse_90deg_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_pulse_90deg_s1_burst_adapter_source0_data;                                      // nmr_parameters_pulse_90deg_s1_burst_adapter:source0_data -> nmr_parameters_pulse_90deg_s1_agent:cp_data
	wire          nmr_parameters_pulse_90deg_s1_burst_adapter_source0_ready;                                     // nmr_parameters_pulse_90deg_s1_agent:cp_ready -> nmr_parameters_pulse_90deg_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_pulse_90deg_s1_burst_adapter_source0_channel;                                   // nmr_parameters_pulse_90deg_s1_burst_adapter:source0_channel -> nmr_parameters_pulse_90deg_s1_agent:cp_channel
	wire          nmr_parameters_pulse_90deg_s1_burst_adapter_source0_startofpacket;                             // nmr_parameters_pulse_90deg_s1_burst_adapter:source0_startofpacket -> nmr_parameters_pulse_90deg_s1_agent:cp_startofpacket
	wire          nmr_parameters_pulse_90deg_s1_burst_adapter_source0_endofpacket;                               // nmr_parameters_pulse_90deg_s1_burst_adapter:source0_endofpacket -> nmr_parameters_pulse_90deg_s1_agent:cp_endofpacket
	wire          cmd_mux_032_src_valid;                                                                         // cmd_mux_032:src_valid -> nmr_parameters_pulse_t1_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_032_src_data;                                                                          // cmd_mux_032:src_data -> nmr_parameters_pulse_t1_s1_burst_adapter:sink0_data
	wire          cmd_mux_032_src_ready;                                                                         // nmr_parameters_pulse_t1_s1_burst_adapter:sink0_ready -> cmd_mux_032:src_ready
	wire   [44:0] cmd_mux_032_src_channel;                                                                       // cmd_mux_032:src_channel -> nmr_parameters_pulse_t1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_032_src_startofpacket;                                                                 // cmd_mux_032:src_startofpacket -> nmr_parameters_pulse_t1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                                   // cmd_mux_032:src_endofpacket -> nmr_parameters_pulse_t1_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_pulse_t1_s1_burst_adapter_source0_valid;                                        // nmr_parameters_pulse_t1_s1_burst_adapter:source0_valid -> nmr_parameters_pulse_t1_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_pulse_t1_s1_burst_adapter_source0_data;                                         // nmr_parameters_pulse_t1_s1_burst_adapter:source0_data -> nmr_parameters_pulse_t1_s1_agent:cp_data
	wire          nmr_parameters_pulse_t1_s1_burst_adapter_source0_ready;                                        // nmr_parameters_pulse_t1_s1_agent:cp_ready -> nmr_parameters_pulse_t1_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_pulse_t1_s1_burst_adapter_source0_channel;                                      // nmr_parameters_pulse_t1_s1_burst_adapter:source0_channel -> nmr_parameters_pulse_t1_s1_agent:cp_channel
	wire          nmr_parameters_pulse_t1_s1_burst_adapter_source0_startofpacket;                                // nmr_parameters_pulse_t1_s1_burst_adapter:source0_startofpacket -> nmr_parameters_pulse_t1_s1_agent:cp_startofpacket
	wire          nmr_parameters_pulse_t1_s1_burst_adapter_source0_endofpacket;                                  // nmr_parameters_pulse_t1_s1_burst_adapter:source0_endofpacket -> nmr_parameters_pulse_t1_s1_agent:cp_endofpacket
	wire          cmd_mux_033_src_valid;                                                                         // cmd_mux_033:src_valid -> nmr_parameters_rx_delay_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_033_src_data;                                                                          // cmd_mux_033:src_data -> nmr_parameters_rx_delay_s1_burst_adapter:sink0_data
	wire          cmd_mux_033_src_ready;                                                                         // nmr_parameters_rx_delay_s1_burst_adapter:sink0_ready -> cmd_mux_033:src_ready
	wire   [44:0] cmd_mux_033_src_channel;                                                                       // cmd_mux_033:src_channel -> nmr_parameters_rx_delay_s1_burst_adapter:sink0_channel
	wire          cmd_mux_033_src_startofpacket;                                                                 // cmd_mux_033:src_startofpacket -> nmr_parameters_rx_delay_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                                   // cmd_mux_033:src_endofpacket -> nmr_parameters_rx_delay_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_rx_delay_s1_burst_adapter_source0_valid;                                        // nmr_parameters_rx_delay_s1_burst_adapter:source0_valid -> nmr_parameters_rx_delay_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_rx_delay_s1_burst_adapter_source0_data;                                         // nmr_parameters_rx_delay_s1_burst_adapter:source0_data -> nmr_parameters_rx_delay_s1_agent:cp_data
	wire          nmr_parameters_rx_delay_s1_burst_adapter_source0_ready;                                        // nmr_parameters_rx_delay_s1_agent:cp_ready -> nmr_parameters_rx_delay_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_rx_delay_s1_burst_adapter_source0_channel;                                      // nmr_parameters_rx_delay_s1_burst_adapter:source0_channel -> nmr_parameters_rx_delay_s1_agent:cp_channel
	wire          nmr_parameters_rx_delay_s1_burst_adapter_source0_startofpacket;                                // nmr_parameters_rx_delay_s1_burst_adapter:source0_startofpacket -> nmr_parameters_rx_delay_s1_agent:cp_startofpacket
	wire          nmr_parameters_rx_delay_s1_burst_adapter_source0_endofpacket;                                  // nmr_parameters_rx_delay_s1_burst_adapter:source0_endofpacket -> nmr_parameters_rx_delay_s1_agent:cp_endofpacket
	wire          cmd_mux_034_src_valid;                                                                         // cmd_mux_034:src_valid -> ctrl_out_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_034_src_data;                                                                          // cmd_mux_034:src_data -> ctrl_out_s1_burst_adapter:sink0_data
	wire          cmd_mux_034_src_ready;                                                                         // ctrl_out_s1_burst_adapter:sink0_ready -> cmd_mux_034:src_ready
	wire   [44:0] cmd_mux_034_src_channel;                                                                       // cmd_mux_034:src_channel -> ctrl_out_s1_burst_adapter:sink0_channel
	wire          cmd_mux_034_src_startofpacket;                                                                 // cmd_mux_034:src_startofpacket -> ctrl_out_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                                   // cmd_mux_034:src_endofpacket -> ctrl_out_s1_burst_adapter:sink0_endofpacket
	wire          ctrl_out_s1_burst_adapter_source0_valid;                                                       // ctrl_out_s1_burst_adapter:source0_valid -> ctrl_out_s1_agent:cp_valid
	wire  [136:0] ctrl_out_s1_burst_adapter_source0_data;                                                        // ctrl_out_s1_burst_adapter:source0_data -> ctrl_out_s1_agent:cp_data
	wire          ctrl_out_s1_burst_adapter_source0_ready;                                                       // ctrl_out_s1_agent:cp_ready -> ctrl_out_s1_burst_adapter:source0_ready
	wire   [44:0] ctrl_out_s1_burst_adapter_source0_channel;                                                     // ctrl_out_s1_burst_adapter:source0_channel -> ctrl_out_s1_agent:cp_channel
	wire          ctrl_out_s1_burst_adapter_source0_startofpacket;                                               // ctrl_out_s1_burst_adapter:source0_startofpacket -> ctrl_out_s1_agent:cp_startofpacket
	wire          ctrl_out_s1_burst_adapter_source0_endofpacket;                                                 // ctrl_out_s1_burst_adapter:source0_endofpacket -> ctrl_out_s1_agent:cp_endofpacket
	wire          cmd_mux_035_src_valid;                                                                         // cmd_mux_035:src_valid -> ctrl_in_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_035_src_data;                                                                          // cmd_mux_035:src_data -> ctrl_in_s1_burst_adapter:sink0_data
	wire          cmd_mux_035_src_ready;                                                                         // ctrl_in_s1_burst_adapter:sink0_ready -> cmd_mux_035:src_ready
	wire   [44:0] cmd_mux_035_src_channel;                                                                       // cmd_mux_035:src_channel -> ctrl_in_s1_burst_adapter:sink0_channel
	wire          cmd_mux_035_src_startofpacket;                                                                 // cmd_mux_035:src_startofpacket -> ctrl_in_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                                   // cmd_mux_035:src_endofpacket -> ctrl_in_s1_burst_adapter:sink0_endofpacket
	wire          ctrl_in_s1_burst_adapter_source0_valid;                                                        // ctrl_in_s1_burst_adapter:source0_valid -> ctrl_in_s1_agent:cp_valid
	wire  [136:0] ctrl_in_s1_burst_adapter_source0_data;                                                         // ctrl_in_s1_burst_adapter:source0_data -> ctrl_in_s1_agent:cp_data
	wire          ctrl_in_s1_burst_adapter_source0_ready;                                                        // ctrl_in_s1_agent:cp_ready -> ctrl_in_s1_burst_adapter:source0_ready
	wire   [44:0] ctrl_in_s1_burst_adapter_source0_channel;                                                      // ctrl_in_s1_burst_adapter:source0_channel -> ctrl_in_s1_agent:cp_channel
	wire          ctrl_in_s1_burst_adapter_source0_startofpacket;                                                // ctrl_in_s1_burst_adapter:source0_startofpacket -> ctrl_in_s1_agent:cp_startofpacket
	wire          ctrl_in_s1_burst_adapter_source0_endofpacket;                                                  // ctrl_in_s1_burst_adapter:source0_endofpacket -> ctrl_in_s1_agent:cp_endofpacket
	wire          cmd_mux_036_src_valid;                                                                         // cmd_mux_036:src_valid -> aux_cnt_out_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_036_src_data;                                                                          // cmd_mux_036:src_data -> aux_cnt_out_s1_burst_adapter:sink0_data
	wire          cmd_mux_036_src_ready;                                                                         // aux_cnt_out_s1_burst_adapter:sink0_ready -> cmd_mux_036:src_ready
	wire   [44:0] cmd_mux_036_src_channel;                                                                       // cmd_mux_036:src_channel -> aux_cnt_out_s1_burst_adapter:sink0_channel
	wire          cmd_mux_036_src_startofpacket;                                                                 // cmd_mux_036:src_startofpacket -> aux_cnt_out_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                                   // cmd_mux_036:src_endofpacket -> aux_cnt_out_s1_burst_adapter:sink0_endofpacket
	wire          aux_cnt_out_s1_burst_adapter_source0_valid;                                                    // aux_cnt_out_s1_burst_adapter:source0_valid -> aux_cnt_out_s1_agent:cp_valid
	wire  [136:0] aux_cnt_out_s1_burst_adapter_source0_data;                                                     // aux_cnt_out_s1_burst_adapter:source0_data -> aux_cnt_out_s1_agent:cp_data
	wire          aux_cnt_out_s1_burst_adapter_source0_ready;                                                    // aux_cnt_out_s1_agent:cp_ready -> aux_cnt_out_s1_burst_adapter:source0_ready
	wire   [44:0] aux_cnt_out_s1_burst_adapter_source0_channel;                                                  // aux_cnt_out_s1_burst_adapter:source0_channel -> aux_cnt_out_s1_agent:cp_channel
	wire          aux_cnt_out_s1_burst_adapter_source0_startofpacket;                                            // aux_cnt_out_s1_burst_adapter:source0_startofpacket -> aux_cnt_out_s1_agent:cp_startofpacket
	wire          aux_cnt_out_s1_burst_adapter_source0_endofpacket;                                              // aux_cnt_out_s1_burst_adapter:source0_endofpacket -> aux_cnt_out_s1_agent:cp_endofpacket
	wire          cmd_mux_037_src_valid;                                                                         // cmd_mux_037:src_valid -> nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_037_src_data;                                                                          // cmd_mux_037:src_data -> nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_data
	wire          cmd_mux_037_src_ready;                                                                         // nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_ready -> cmd_mux_037:src_ready
	wire   [44:0] cmd_mux_037_src_channel;                                                                       // cmd_mux_037:src_channel -> nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_channel
	wire          cmd_mux_037_src_startofpacket;                                                                 // cmd_mux_037:src_startofpacket -> nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                                   // cmd_mux_037:src_endofpacket -> nmr_parameters_samples_per_echo_s1_burst_adapter:sink0_endofpacket
	wire          nmr_parameters_samples_per_echo_s1_burst_adapter_source0_valid;                                // nmr_parameters_samples_per_echo_s1_burst_adapter:source0_valid -> nmr_parameters_samples_per_echo_s1_agent:cp_valid
	wire  [136:0] nmr_parameters_samples_per_echo_s1_burst_adapter_source0_data;                                 // nmr_parameters_samples_per_echo_s1_burst_adapter:source0_data -> nmr_parameters_samples_per_echo_s1_agent:cp_data
	wire          nmr_parameters_samples_per_echo_s1_burst_adapter_source0_ready;                                // nmr_parameters_samples_per_echo_s1_agent:cp_ready -> nmr_parameters_samples_per_echo_s1_burst_adapter:source0_ready
	wire   [44:0] nmr_parameters_samples_per_echo_s1_burst_adapter_source0_channel;                              // nmr_parameters_samples_per_echo_s1_burst_adapter:source0_channel -> nmr_parameters_samples_per_echo_s1_agent:cp_channel
	wire          nmr_parameters_samples_per_echo_s1_burst_adapter_source0_startofpacket;                        // nmr_parameters_samples_per_echo_s1_burst_adapter:source0_startofpacket -> nmr_parameters_samples_per_echo_s1_agent:cp_startofpacket
	wire          nmr_parameters_samples_per_echo_s1_burst_adapter_source0_endofpacket;                          // nmr_parameters_samples_per_echo_s1_burst_adapter:source0_endofpacket -> nmr_parameters_samples_per_echo_s1_agent:cp_endofpacket
	wire          cmd_mux_038_src_valid;                                                                         // cmd_mux_038:src_valid -> dac_grad_spi_control_port_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_038_src_data;                                                                          // cmd_mux_038:src_data -> dac_grad_spi_control_port_burst_adapter:sink0_data
	wire          cmd_mux_038_src_ready;                                                                         // dac_grad_spi_control_port_burst_adapter:sink0_ready -> cmd_mux_038:src_ready
	wire   [44:0] cmd_mux_038_src_channel;                                                                       // cmd_mux_038:src_channel -> dac_grad_spi_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_038_src_startofpacket;                                                                 // cmd_mux_038:src_startofpacket -> dac_grad_spi_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                                   // cmd_mux_038:src_endofpacket -> dac_grad_spi_control_port_burst_adapter:sink0_endofpacket
	wire          dac_grad_spi_control_port_burst_adapter_source0_valid;                                         // dac_grad_spi_control_port_burst_adapter:source0_valid -> dac_grad_spi_control_port_agent:cp_valid
	wire  [136:0] dac_grad_spi_control_port_burst_adapter_source0_data;                                          // dac_grad_spi_control_port_burst_adapter:source0_data -> dac_grad_spi_control_port_agent:cp_data
	wire          dac_grad_spi_control_port_burst_adapter_source0_ready;                                         // dac_grad_spi_control_port_agent:cp_ready -> dac_grad_spi_control_port_burst_adapter:source0_ready
	wire   [44:0] dac_grad_spi_control_port_burst_adapter_source0_channel;                                       // dac_grad_spi_control_port_burst_adapter:source0_channel -> dac_grad_spi_control_port_agent:cp_channel
	wire          dac_grad_spi_control_port_burst_adapter_source0_startofpacket;                                 // dac_grad_spi_control_port_burst_adapter:source0_startofpacket -> dac_grad_spi_control_port_agent:cp_startofpacket
	wire          dac_grad_spi_control_port_burst_adapter_source0_endofpacket;                                   // dac_grad_spi_control_port_burst_adapter:source0_endofpacket -> dac_grad_spi_control_port_agent:cp_endofpacket
	wire          cmd_mux_039_src_valid;                                                                         // cmd_mux_039:src_valid -> spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_039_src_data;                                                                          // cmd_mux_039:src_data -> spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_data
	wire          cmd_mux_039_src_ready;                                                                         // spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_ready -> cmd_mux_039:src_ready
	wire   [44:0] cmd_mux_039_src_channel;                                                                       // cmd_mux_039:src_channel -> spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_039_src_startofpacket;                                                                 // cmd_mux_039:src_startofpacket -> spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                                   // cmd_mux_039:src_endofpacket -> spi_mtch_ntwrk_spi_control_port_burst_adapter:sink0_endofpacket
	wire          spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_valid;                                   // spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_valid -> spi_mtch_ntwrk_spi_control_port_agent:cp_valid
	wire  [136:0] spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_data;                                    // spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_data -> spi_mtch_ntwrk_spi_control_port_agent:cp_data
	wire          spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_ready;                                   // spi_mtch_ntwrk_spi_control_port_agent:cp_ready -> spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_ready
	wire   [44:0] spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_channel;                                 // spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_channel -> spi_mtch_ntwrk_spi_control_port_agent:cp_channel
	wire          spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_startofpacket;                           // spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_startofpacket -> spi_mtch_ntwrk_spi_control_port_agent:cp_startofpacket
	wire          spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_endofpacket;                             // spi_mtch_ntwrk_spi_control_port_burst_adapter:source0_endofpacket -> spi_mtch_ntwrk_spi_control_port_agent:cp_endofpacket
	wire          cmd_mux_040_src_valid;                                                                         // cmd_mux_040:src_valid -> spi_afe_relays_spi_control_port_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_040_src_data;                                                                          // cmd_mux_040:src_data -> spi_afe_relays_spi_control_port_burst_adapter:sink0_data
	wire          cmd_mux_040_src_ready;                                                                         // spi_afe_relays_spi_control_port_burst_adapter:sink0_ready -> cmd_mux_040:src_ready
	wire   [44:0] cmd_mux_040_src_channel;                                                                       // cmd_mux_040:src_channel -> spi_afe_relays_spi_control_port_burst_adapter:sink0_channel
	wire          cmd_mux_040_src_startofpacket;                                                                 // cmd_mux_040:src_startofpacket -> spi_afe_relays_spi_control_port_burst_adapter:sink0_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                                   // cmd_mux_040:src_endofpacket -> spi_afe_relays_spi_control_port_burst_adapter:sink0_endofpacket
	wire          spi_afe_relays_spi_control_port_burst_adapter_source0_valid;                                   // spi_afe_relays_spi_control_port_burst_adapter:source0_valid -> spi_afe_relays_spi_control_port_agent:cp_valid
	wire  [136:0] spi_afe_relays_spi_control_port_burst_adapter_source0_data;                                    // spi_afe_relays_spi_control_port_burst_adapter:source0_data -> spi_afe_relays_spi_control_port_agent:cp_data
	wire          spi_afe_relays_spi_control_port_burst_adapter_source0_ready;                                   // spi_afe_relays_spi_control_port_agent:cp_ready -> spi_afe_relays_spi_control_port_burst_adapter:source0_ready
	wire   [44:0] spi_afe_relays_spi_control_port_burst_adapter_source0_channel;                                 // spi_afe_relays_spi_control_port_burst_adapter:source0_channel -> spi_afe_relays_spi_control_port_agent:cp_channel
	wire          spi_afe_relays_spi_control_port_burst_adapter_source0_startofpacket;                           // spi_afe_relays_spi_control_port_burst_adapter:source0_startofpacket -> spi_afe_relays_spi_control_port_agent:cp_startofpacket
	wire          spi_afe_relays_spi_control_port_burst_adapter_source0_endofpacket;                             // spi_afe_relays_spi_control_port_burst_adapter:source0_endofpacket -> spi_afe_relays_spi_control_port_agent:cp_endofpacket
	wire          cmd_mux_041_src_valid;                                                                         // cmd_mux_041:src_valid -> dma_fifo_control_port_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_041_src_data;                                                                          // cmd_mux_041:src_data -> dma_fifo_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_041_src_ready;                                                                         // dma_fifo_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_041:src_ready
	wire   [44:0] cmd_mux_041_src_channel;                                                                       // cmd_mux_041:src_channel -> dma_fifo_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_041_src_startofpacket;                                                                 // cmd_mux_041:src_startofpacket -> dma_fifo_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                                   // cmd_mux_041:src_endofpacket -> dma_fifo_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_fifo_control_port_slave_burst_adapter_source0_valid;                                       // dma_fifo_control_port_slave_burst_adapter:source0_valid -> dma_fifo_control_port_slave_agent:cp_valid
	wire  [136:0] dma_fifo_control_port_slave_burst_adapter_source0_data;                                        // dma_fifo_control_port_slave_burst_adapter:source0_data -> dma_fifo_control_port_slave_agent:cp_data
	wire          dma_fifo_control_port_slave_burst_adapter_source0_ready;                                       // dma_fifo_control_port_slave_agent:cp_ready -> dma_fifo_control_port_slave_burst_adapter:source0_ready
	wire   [44:0] dma_fifo_control_port_slave_burst_adapter_source0_channel;                                     // dma_fifo_control_port_slave_burst_adapter:source0_channel -> dma_fifo_control_port_slave_agent:cp_channel
	wire          dma_fifo_control_port_slave_burst_adapter_source0_startofpacket;                               // dma_fifo_control_port_slave_burst_adapter:source0_startofpacket -> dma_fifo_control_port_slave_agent:cp_startofpacket
	wire          dma_fifo_control_port_slave_burst_adapter_source0_endofpacket;                                 // dma_fifo_control_port_slave_burst_adapter:source0_endofpacket -> dma_fifo_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_042_src_valid;                                                                         // cmd_mux_042:src_valid -> dma_dconvi_control_port_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_042_src_data;                                                                          // cmd_mux_042:src_data -> dma_dconvi_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_042_src_ready;                                                                         // dma_dconvi_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_042:src_ready
	wire   [44:0] cmd_mux_042_src_channel;                                                                       // cmd_mux_042:src_channel -> dma_dconvi_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_042_src_startofpacket;                                                                 // cmd_mux_042:src_startofpacket -> dma_dconvi_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                                   // cmd_mux_042:src_endofpacket -> dma_dconvi_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_dconvi_control_port_slave_burst_adapter_source0_valid;                                     // dma_dconvi_control_port_slave_burst_adapter:source0_valid -> dma_dconvi_control_port_slave_agent:cp_valid
	wire  [136:0] dma_dconvi_control_port_slave_burst_adapter_source0_data;                                      // dma_dconvi_control_port_slave_burst_adapter:source0_data -> dma_dconvi_control_port_slave_agent:cp_data
	wire          dma_dconvi_control_port_slave_burst_adapter_source0_ready;                                     // dma_dconvi_control_port_slave_agent:cp_ready -> dma_dconvi_control_port_slave_burst_adapter:source0_ready
	wire   [44:0] dma_dconvi_control_port_slave_burst_adapter_source0_channel;                                   // dma_dconvi_control_port_slave_burst_adapter:source0_channel -> dma_dconvi_control_port_slave_agent:cp_channel
	wire          dma_dconvi_control_port_slave_burst_adapter_source0_startofpacket;                             // dma_dconvi_control_port_slave_burst_adapter:source0_startofpacket -> dma_dconvi_control_port_slave_agent:cp_startofpacket
	wire          dma_dconvi_control_port_slave_burst_adapter_source0_endofpacket;                               // dma_dconvi_control_port_slave_burst_adapter:source0_endofpacket -> dma_dconvi_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_043_src_valid;                                                                         // cmd_mux_043:src_valid -> dma_dconvq_control_port_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_043_src_data;                                                                          // cmd_mux_043:src_data -> dma_dconvq_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_043_src_ready;                                                                         // dma_dconvq_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_043:src_ready
	wire   [44:0] cmd_mux_043_src_channel;                                                                       // cmd_mux_043:src_channel -> dma_dconvq_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_043_src_startofpacket;                                                                 // cmd_mux_043:src_startofpacket -> dma_dconvq_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                                   // cmd_mux_043:src_endofpacket -> dma_dconvq_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_dconvq_control_port_slave_burst_adapter_source0_valid;                                     // dma_dconvq_control_port_slave_burst_adapter:source0_valid -> dma_dconvq_control_port_slave_agent:cp_valid
	wire  [136:0] dma_dconvq_control_port_slave_burst_adapter_source0_data;                                      // dma_dconvq_control_port_slave_burst_adapter:source0_data -> dma_dconvq_control_port_slave_agent:cp_data
	wire          dma_dconvq_control_port_slave_burst_adapter_source0_ready;                                     // dma_dconvq_control_port_slave_agent:cp_ready -> dma_dconvq_control_port_slave_burst_adapter:source0_ready
	wire   [44:0] dma_dconvq_control_port_slave_burst_adapter_source0_channel;                                   // dma_dconvq_control_port_slave_burst_adapter:source0_channel -> dma_dconvq_control_port_slave_agent:cp_channel
	wire          dma_dconvq_control_port_slave_burst_adapter_source0_startofpacket;                             // dma_dconvq_control_port_slave_burst_adapter:source0_startofpacket -> dma_dconvq_control_port_slave_agent:cp_startofpacket
	wire          dma_dconvq_control_port_slave_burst_adapter_source0_endofpacket;                               // dma_dconvq_control_port_slave_burst_adapter:source0_endofpacket -> dma_dconvq_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_044_src_valid;                                                                         // cmd_mux_044:src_valid -> dma_dummy_control_port_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_044_src_data;                                                                          // cmd_mux_044:src_data -> dma_dummy_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_044_src_ready;                                                                         // dma_dummy_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_044:src_ready
	wire   [44:0] cmd_mux_044_src_channel;                                                                       // cmd_mux_044:src_channel -> dma_dummy_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_044_src_startofpacket;                                                                 // cmd_mux_044:src_startofpacket -> dma_dummy_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                                   // cmd_mux_044:src_endofpacket -> dma_dummy_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_dummy_control_port_slave_burst_adapter_source0_valid;                                      // dma_dummy_control_port_slave_burst_adapter:source0_valid -> dma_dummy_control_port_slave_agent:cp_valid
	wire  [136:0] dma_dummy_control_port_slave_burst_adapter_source0_data;                                       // dma_dummy_control_port_slave_burst_adapter:source0_data -> dma_dummy_control_port_slave_agent:cp_data
	wire          dma_dummy_control_port_slave_burst_adapter_source0_ready;                                      // dma_dummy_control_port_slave_agent:cp_ready -> dma_dummy_control_port_slave_burst_adapter:source0_ready
	wire   [44:0] dma_dummy_control_port_slave_burst_adapter_source0_channel;                                    // dma_dummy_control_port_slave_burst_adapter:source0_channel -> dma_dummy_control_port_slave_agent:cp_channel
	wire          dma_dummy_control_port_slave_burst_adapter_source0_startofpacket;                              // dma_dummy_control_port_slave_burst_adapter:source0_startofpacket -> dma_dummy_control_port_slave_agent:cp_startofpacket
	wire          dma_dummy_control_port_slave_burst_adapter_source0_endofpacket;                                // dma_dummy_control_port_slave_burst_adapter:source0_endofpacket -> dma_dummy_control_port_slave_agent:cp_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                      // cmd_demux_006:src0_valid -> cmd_mux_007:sink2_valid
	wire  [136:0] cmd_demux_006_src0_data;                                                                       // cmd_demux_006:src0_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_006_src0_ready;                                                                      // cmd_mux_007:sink2_ready -> cmd_demux_006:src0_ready
	wire   [44:0] cmd_demux_006_src0_channel;                                                                    // cmd_demux_006:src0_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_006_src0_startofpacket;                                                              // cmd_demux_006:src0_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                                // cmd_demux_006:src0_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_006_src1_valid;                                                                      // cmd_demux_006:src1_valid -> cmd_mux_009:sink0_valid
	wire  [136:0] cmd_demux_006_src1_data;                                                                       // cmd_demux_006:src1_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_006_src1_ready;                                                                      // cmd_mux_009:sink0_ready -> cmd_demux_006:src1_ready
	wire   [44:0] cmd_demux_006_src1_channel;                                                                    // cmd_demux_006:src1_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_006_src1_startofpacket;                                                              // cmd_demux_006:src1_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                                // cmd_demux_006:src1_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                      // cmd_demux_007:src0_valid -> cmd_mux_009:sink1_valid
	wire  [136:0] cmd_demux_007_src0_data;                                                                       // cmd_demux_007:src0_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_007_src0_ready;                                                                      // cmd_mux_009:sink1_ready -> cmd_demux_007:src0_ready
	wire   [44:0] cmd_demux_007_src0_channel;                                                                    // cmd_demux_007:src0_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_007_src0_startofpacket;                                                              // cmd_demux_007:src0_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                                // cmd_demux_007:src0_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_007_src1_valid;                                                                      // cmd_demux_007:src1_valid -> cmd_mux_010:sink0_valid
	wire  [136:0] cmd_demux_007_src1_data;                                                                       // cmd_demux_007:src1_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_007_src1_ready;                                                                      // cmd_mux_010:sink0_ready -> cmd_demux_007:src1_ready
	wire   [44:0] cmd_demux_007_src1_channel;                                                                    // cmd_demux_007:src1_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_007_src1_startofpacket;                                                              // cmd_demux_007:src1_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                                // cmd_demux_007:src1_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_007_src2_valid;                                                                      // cmd_demux_007:src2_valid -> cmd_mux_011:sink0_valid
	wire  [136:0] cmd_demux_007_src2_data;                                                                       // cmd_demux_007:src2_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_007_src2_ready;                                                                      // cmd_mux_011:sink0_ready -> cmd_demux_007:src2_ready
	wire   [44:0] cmd_demux_007_src2_channel;                                                                    // cmd_demux_007:src2_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_007_src2_startofpacket;                                                              // cmd_demux_007:src2_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_007_src2_endofpacket;                                                                // cmd_demux_007:src2_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_007_src6_valid;                                                                      // cmd_demux_007:src6_valid -> cmd_mux_015:sink0_valid
	wire  [136:0] cmd_demux_007_src6_data;                                                                       // cmd_demux_007:src6_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_007_src6_ready;                                                                      // cmd_mux_015:sink0_ready -> cmd_demux_007:src6_ready
	wire   [44:0] cmd_demux_007_src6_channel;                                                                    // cmd_demux_007:src6_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_007_src6_startofpacket;                                                              // cmd_demux_007:src6_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_007_src6_endofpacket;                                                                // cmd_demux_007:src6_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_007_src7_valid;                                                                      // cmd_demux_007:src7_valid -> cmd_mux_016:sink0_valid
	wire  [136:0] cmd_demux_007_src7_data;                                                                       // cmd_demux_007:src7_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_007_src7_ready;                                                                      // cmd_mux_016:sink0_ready -> cmd_demux_007:src7_ready
	wire   [44:0] cmd_demux_007_src7_channel;                                                                    // cmd_demux_007:src7_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_007_src7_startofpacket;                                                              // cmd_demux_007:src7_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_007_src7_endofpacket;                                                                // cmd_demux_007:src7_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_007_src8_valid;                                                                      // cmd_demux_007:src8_valid -> cmd_mux_017:sink0_valid
	wire  [136:0] cmd_demux_007_src8_data;                                                                       // cmd_demux_007:src8_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_007_src8_ready;                                                                      // cmd_mux_017:sink0_ready -> cmd_demux_007:src8_ready
	wire   [44:0] cmd_demux_007_src8_channel;                                                                    // cmd_demux_007:src8_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_007_src8_startofpacket;                                                              // cmd_demux_007:src8_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_007_src8_endofpacket;                                                                // cmd_demux_007:src8_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_007_src9_valid;                                                                      // cmd_demux_007:src9_valid -> cmd_mux_018:sink0_valid
	wire  [136:0] cmd_demux_007_src9_data;                                                                       // cmd_demux_007:src9_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_007_src9_ready;                                                                      // cmd_mux_018:sink0_ready -> cmd_demux_007:src9_ready
	wire   [44:0] cmd_demux_007_src9_channel;                                                                    // cmd_demux_007:src9_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_007_src9_startofpacket;                                                              // cmd_demux_007:src9_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_007_src9_endofpacket;                                                                // cmd_demux_007:src9_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_007_src10_valid;                                                                     // cmd_demux_007:src10_valid -> cmd_mux_019:sink0_valid
	wire  [136:0] cmd_demux_007_src10_data;                                                                      // cmd_demux_007:src10_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_007_src10_ready;                                                                     // cmd_mux_019:sink0_ready -> cmd_demux_007:src10_ready
	wire   [44:0] cmd_demux_007_src10_channel;                                                                   // cmd_demux_007:src10_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_007_src10_startofpacket;                                                             // cmd_demux_007:src10_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_007_src10_endofpacket;                                                               // cmd_demux_007:src10_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_007_src11_valid;                                                                     // cmd_demux_007:src11_valid -> cmd_mux_020:sink0_valid
	wire  [136:0] cmd_demux_007_src11_data;                                                                      // cmd_demux_007:src11_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_007_src11_ready;                                                                     // cmd_mux_020:sink0_ready -> cmd_demux_007:src11_ready
	wire   [44:0] cmd_demux_007_src11_channel;                                                                   // cmd_demux_007:src11_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_007_src11_startofpacket;                                                             // cmd_demux_007:src11_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_007_src11_endofpacket;                                                               // cmd_demux_007:src11_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_007_src12_valid;                                                                     // cmd_demux_007:src12_valid -> cmd_mux_021:sink0_valid
	wire  [136:0] cmd_demux_007_src12_data;                                                                      // cmd_demux_007:src12_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_007_src12_ready;                                                                     // cmd_mux_021:sink0_ready -> cmd_demux_007:src12_ready
	wire   [44:0] cmd_demux_007_src12_channel;                                                                   // cmd_demux_007:src12_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_007_src12_startofpacket;                                                             // cmd_demux_007:src12_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_007_src12_endofpacket;                                                               // cmd_demux_007:src12_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_007_src13_valid;                                                                     // cmd_demux_007:src13_valid -> cmd_mux_022:sink0_valid
	wire  [136:0] cmd_demux_007_src13_data;                                                                      // cmd_demux_007:src13_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_007_src13_ready;                                                                     // cmd_mux_022:sink0_ready -> cmd_demux_007:src13_ready
	wire   [44:0] cmd_demux_007_src13_channel;                                                                   // cmd_demux_007:src13_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_007_src13_startofpacket;                                                             // cmd_demux_007:src13_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_007_src13_endofpacket;                                                               // cmd_demux_007:src13_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_007_src14_valid;                                                                     // cmd_demux_007:src14_valid -> cmd_mux_023:sink0_valid
	wire  [136:0] cmd_demux_007_src14_data;                                                                      // cmd_demux_007:src14_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_007_src14_ready;                                                                     // cmd_mux_023:sink0_ready -> cmd_demux_007:src14_ready
	wire   [44:0] cmd_demux_007_src14_channel;                                                                   // cmd_demux_007:src14_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_007_src14_startofpacket;                                                             // cmd_demux_007:src14_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_007_src14_endofpacket;                                                               // cmd_demux_007:src14_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_007_src15_valid;                                                                     // cmd_demux_007:src15_valid -> cmd_mux_024:sink0_valid
	wire  [136:0] cmd_demux_007_src15_data;                                                                      // cmd_demux_007:src15_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_007_src15_ready;                                                                     // cmd_mux_024:sink0_ready -> cmd_demux_007:src15_ready
	wire   [44:0] cmd_demux_007_src15_channel;                                                                   // cmd_demux_007:src15_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_007_src15_startofpacket;                                                             // cmd_demux_007:src15_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_007_src15_endofpacket;                                                               // cmd_demux_007:src15_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_007_src16_valid;                                                                     // cmd_demux_007:src16_valid -> cmd_mux_025:sink0_valid
	wire  [136:0] cmd_demux_007_src16_data;                                                                      // cmd_demux_007:src16_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_007_src16_ready;                                                                     // cmd_mux_025:sink0_ready -> cmd_demux_007:src16_ready
	wire   [44:0] cmd_demux_007_src16_channel;                                                                   // cmd_demux_007:src16_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_007_src16_startofpacket;                                                             // cmd_demux_007:src16_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_007_src16_endofpacket;                                                               // cmd_demux_007:src16_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_007_src17_valid;                                                                     // cmd_demux_007:src17_valid -> cmd_mux_026:sink0_valid
	wire  [136:0] cmd_demux_007_src17_data;                                                                      // cmd_demux_007:src17_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_007_src17_ready;                                                                     // cmd_mux_026:sink0_ready -> cmd_demux_007:src17_ready
	wire   [44:0] cmd_demux_007_src17_channel;                                                                   // cmd_demux_007:src17_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_007_src17_startofpacket;                                                             // cmd_demux_007:src17_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_007_src17_endofpacket;                                                               // cmd_demux_007:src17_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_007_src18_valid;                                                                     // cmd_demux_007:src18_valid -> cmd_mux_027:sink0_valid
	wire  [136:0] cmd_demux_007_src18_data;                                                                      // cmd_demux_007:src18_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_007_src18_ready;                                                                     // cmd_mux_027:sink0_ready -> cmd_demux_007:src18_ready
	wire   [44:0] cmd_demux_007_src18_channel;                                                                   // cmd_demux_007:src18_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_007_src18_startofpacket;                                                             // cmd_demux_007:src18_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_007_src18_endofpacket;                                                               // cmd_demux_007:src18_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_007_src19_valid;                                                                     // cmd_demux_007:src19_valid -> cmd_mux_028:sink0_valid
	wire  [136:0] cmd_demux_007_src19_data;                                                                      // cmd_demux_007:src19_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_007_src19_ready;                                                                     // cmd_mux_028:sink0_ready -> cmd_demux_007:src19_ready
	wire   [44:0] cmd_demux_007_src19_channel;                                                                   // cmd_demux_007:src19_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_007_src19_startofpacket;                                                             // cmd_demux_007:src19_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_007_src19_endofpacket;                                                               // cmd_demux_007:src19_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_007_src20_valid;                                                                     // cmd_demux_007:src20_valid -> cmd_mux_029:sink0_valid
	wire  [136:0] cmd_demux_007_src20_data;                                                                      // cmd_demux_007:src20_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_007_src20_ready;                                                                     // cmd_mux_029:sink0_ready -> cmd_demux_007:src20_ready
	wire   [44:0] cmd_demux_007_src20_channel;                                                                   // cmd_demux_007:src20_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_007_src20_startofpacket;                                                             // cmd_demux_007:src20_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_007_src20_endofpacket;                                                               // cmd_demux_007:src20_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_007_src21_valid;                                                                     // cmd_demux_007:src21_valid -> cmd_mux_030:sink0_valid
	wire  [136:0] cmd_demux_007_src21_data;                                                                      // cmd_demux_007:src21_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_007_src21_ready;                                                                     // cmd_mux_030:sink0_ready -> cmd_demux_007:src21_ready
	wire   [44:0] cmd_demux_007_src21_channel;                                                                   // cmd_demux_007:src21_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_007_src21_startofpacket;                                                             // cmd_demux_007:src21_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_007_src21_endofpacket;                                                               // cmd_demux_007:src21_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_007_src22_valid;                                                                     // cmd_demux_007:src22_valid -> cmd_mux_031:sink0_valid
	wire  [136:0] cmd_demux_007_src22_data;                                                                      // cmd_demux_007:src22_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_007_src22_ready;                                                                     // cmd_mux_031:sink0_ready -> cmd_demux_007:src22_ready
	wire   [44:0] cmd_demux_007_src22_channel;                                                                   // cmd_demux_007:src22_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_007_src22_startofpacket;                                                             // cmd_demux_007:src22_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_007_src22_endofpacket;                                                               // cmd_demux_007:src22_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_007_src23_valid;                                                                     // cmd_demux_007:src23_valid -> cmd_mux_032:sink0_valid
	wire  [136:0] cmd_demux_007_src23_data;                                                                      // cmd_demux_007:src23_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_007_src23_ready;                                                                     // cmd_mux_032:sink0_ready -> cmd_demux_007:src23_ready
	wire   [44:0] cmd_demux_007_src23_channel;                                                                   // cmd_demux_007:src23_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_007_src23_startofpacket;                                                             // cmd_demux_007:src23_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_007_src23_endofpacket;                                                               // cmd_demux_007:src23_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_007_src24_valid;                                                                     // cmd_demux_007:src24_valid -> cmd_mux_033:sink0_valid
	wire  [136:0] cmd_demux_007_src24_data;                                                                      // cmd_demux_007:src24_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_007_src24_ready;                                                                     // cmd_mux_033:sink0_ready -> cmd_demux_007:src24_ready
	wire   [44:0] cmd_demux_007_src24_channel;                                                                   // cmd_demux_007:src24_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_007_src24_startofpacket;                                                             // cmd_demux_007:src24_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_007_src24_endofpacket;                                                               // cmd_demux_007:src24_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_007_src25_valid;                                                                     // cmd_demux_007:src25_valid -> cmd_mux_034:sink0_valid
	wire  [136:0] cmd_demux_007_src25_data;                                                                      // cmd_demux_007:src25_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_007_src25_ready;                                                                     // cmd_mux_034:sink0_ready -> cmd_demux_007:src25_ready
	wire   [44:0] cmd_demux_007_src25_channel;                                                                   // cmd_demux_007:src25_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_007_src25_startofpacket;                                                             // cmd_demux_007:src25_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_007_src25_endofpacket;                                                               // cmd_demux_007:src25_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_007_src26_valid;                                                                     // cmd_demux_007:src26_valid -> cmd_mux_035:sink0_valid
	wire  [136:0] cmd_demux_007_src26_data;                                                                      // cmd_demux_007:src26_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_007_src26_ready;                                                                     // cmd_mux_035:sink0_ready -> cmd_demux_007:src26_ready
	wire   [44:0] cmd_demux_007_src26_channel;                                                                   // cmd_demux_007:src26_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_007_src26_startofpacket;                                                             // cmd_demux_007:src26_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_007_src26_endofpacket;                                                               // cmd_demux_007:src26_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_007_src27_valid;                                                                     // cmd_demux_007:src27_valid -> cmd_mux_036:sink0_valid
	wire  [136:0] cmd_demux_007_src27_data;                                                                      // cmd_demux_007:src27_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_007_src27_ready;                                                                     // cmd_mux_036:sink0_ready -> cmd_demux_007:src27_ready
	wire   [44:0] cmd_demux_007_src27_channel;                                                                   // cmd_demux_007:src27_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_007_src27_startofpacket;                                                             // cmd_demux_007:src27_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_007_src27_endofpacket;                                                               // cmd_demux_007:src27_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_007_src28_valid;                                                                     // cmd_demux_007:src28_valid -> cmd_mux_037:sink0_valid
	wire  [136:0] cmd_demux_007_src28_data;                                                                      // cmd_demux_007:src28_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_007_src28_ready;                                                                     // cmd_mux_037:sink0_ready -> cmd_demux_007:src28_ready
	wire   [44:0] cmd_demux_007_src28_channel;                                                                   // cmd_demux_007:src28_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_007_src28_startofpacket;                                                             // cmd_demux_007:src28_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_007_src28_endofpacket;                                                               // cmd_demux_007:src28_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_007_src29_valid;                                                                     // cmd_demux_007:src29_valid -> cmd_mux_038:sink0_valid
	wire  [136:0] cmd_demux_007_src29_data;                                                                      // cmd_demux_007:src29_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_007_src29_ready;                                                                     // cmd_mux_038:sink0_ready -> cmd_demux_007:src29_ready
	wire   [44:0] cmd_demux_007_src29_channel;                                                                   // cmd_demux_007:src29_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_007_src29_startofpacket;                                                             // cmd_demux_007:src29_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_007_src29_endofpacket;                                                               // cmd_demux_007:src29_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_007_src30_valid;                                                                     // cmd_demux_007:src30_valid -> cmd_mux_039:sink0_valid
	wire  [136:0] cmd_demux_007_src30_data;                                                                      // cmd_demux_007:src30_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_007_src30_ready;                                                                     // cmd_mux_039:sink0_ready -> cmd_demux_007:src30_ready
	wire   [44:0] cmd_demux_007_src30_channel;                                                                   // cmd_demux_007:src30_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_007_src30_startofpacket;                                                             // cmd_demux_007:src30_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_007_src30_endofpacket;                                                               // cmd_demux_007:src30_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_007_src31_valid;                                                                     // cmd_demux_007:src31_valid -> cmd_mux_040:sink0_valid
	wire  [136:0] cmd_demux_007_src31_data;                                                                      // cmd_demux_007:src31_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_007_src31_ready;                                                                     // cmd_mux_040:sink0_ready -> cmd_demux_007:src31_ready
	wire   [44:0] cmd_demux_007_src31_channel;                                                                   // cmd_demux_007:src31_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_007_src31_startofpacket;                                                             // cmd_demux_007:src31_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_007_src31_endofpacket;                                                               // cmd_demux_007:src31_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_007_src32_valid;                                                                     // cmd_demux_007:src32_valid -> cmd_mux_041:sink0_valid
	wire  [136:0] cmd_demux_007_src32_data;                                                                      // cmd_demux_007:src32_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_007_src32_ready;                                                                     // cmd_mux_041:sink0_ready -> cmd_demux_007:src32_ready
	wire   [44:0] cmd_demux_007_src32_channel;                                                                   // cmd_demux_007:src32_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_007_src32_startofpacket;                                                             // cmd_demux_007:src32_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_007_src32_endofpacket;                                                               // cmd_demux_007:src32_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_007_src33_valid;                                                                     // cmd_demux_007:src33_valid -> cmd_mux_042:sink0_valid
	wire  [136:0] cmd_demux_007_src33_data;                                                                      // cmd_demux_007:src33_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_007_src33_ready;                                                                     // cmd_mux_042:sink0_ready -> cmd_demux_007:src33_ready
	wire   [44:0] cmd_demux_007_src33_channel;                                                                   // cmd_demux_007:src33_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_007_src33_startofpacket;                                                             // cmd_demux_007:src33_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_007_src33_endofpacket;                                                               // cmd_demux_007:src33_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_007_src34_valid;                                                                     // cmd_demux_007:src34_valid -> cmd_mux_043:sink0_valid
	wire  [136:0] cmd_demux_007_src34_data;                                                                      // cmd_demux_007:src34_data -> cmd_mux_043:sink0_data
	wire          cmd_demux_007_src34_ready;                                                                     // cmd_mux_043:sink0_ready -> cmd_demux_007:src34_ready
	wire   [44:0] cmd_demux_007_src34_channel;                                                                   // cmd_demux_007:src34_channel -> cmd_mux_043:sink0_channel
	wire          cmd_demux_007_src34_startofpacket;                                                             // cmd_demux_007:src34_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          cmd_demux_007_src34_endofpacket;                                                               // cmd_demux_007:src34_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_007_src35_valid;                                                                     // cmd_demux_007:src35_valid -> cmd_mux_044:sink0_valid
	wire  [136:0] cmd_demux_007_src35_data;                                                                      // cmd_demux_007:src35_data -> cmd_mux_044:sink0_data
	wire          cmd_demux_007_src35_ready;                                                                     // cmd_mux_044:sink0_ready -> cmd_demux_007:src35_ready
	wire   [44:0] cmd_demux_007_src35_channel;                                                                   // cmd_demux_007:src35_channel -> cmd_mux_044:sink0_channel
	wire          cmd_demux_007_src35_startofpacket;                                                             // cmd_demux_007:src35_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          cmd_demux_007_src35_endofpacket;                                                               // cmd_demux_007:src35_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_008_src0_valid;                                                                      // cmd_demux_008:src0_valid -> cmd_mux_009:sink2_valid
	wire  [136:0] cmd_demux_008_src0_data;                                                                       // cmd_demux_008:src0_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_008_src0_ready;                                                                      // cmd_mux_009:sink2_ready -> cmd_demux_008:src0_ready
	wire   [44:0] cmd_demux_008_src0_channel;                                                                    // cmd_demux_008:src0_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_008_src0_startofpacket;                                                              // cmd_demux_008:src0_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                                // cmd_demux_008:src0_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_008_src1_valid;                                                                      // cmd_demux_008:src1_valid -> cmd_mux_010:sink1_valid
	wire  [136:0] cmd_demux_008_src1_data;                                                                       // cmd_demux_008:src1_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_008_src1_ready;                                                                      // cmd_mux_010:sink1_ready -> cmd_demux_008:src1_ready
	wire   [44:0] cmd_demux_008_src1_channel;                                                                    // cmd_demux_008:src1_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_008_src1_startofpacket;                                                              // cmd_demux_008:src1_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_008_src1_endofpacket;                                                                // cmd_demux_008:src1_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_008_src2_valid;                                                                      // cmd_demux_008:src2_valid -> cmd_mux_011:sink1_valid
	wire  [136:0] cmd_demux_008_src2_data;                                                                       // cmd_demux_008:src2_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_008_src2_ready;                                                                      // cmd_mux_011:sink1_ready -> cmd_demux_008:src2_ready
	wire   [44:0] cmd_demux_008_src2_channel;                                                                    // cmd_demux_008:src2_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_008_src2_startofpacket;                                                              // cmd_demux_008:src2_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_008_src2_endofpacket;                                                                // cmd_demux_008:src2_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_008_src6_valid;                                                                      // cmd_demux_008:src6_valid -> cmd_mux_015:sink1_valid
	wire  [136:0] cmd_demux_008_src6_data;                                                                       // cmd_demux_008:src6_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_008_src6_ready;                                                                      // cmd_mux_015:sink1_ready -> cmd_demux_008:src6_ready
	wire   [44:0] cmd_demux_008_src6_channel;                                                                    // cmd_demux_008:src6_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_008_src6_startofpacket;                                                              // cmd_demux_008:src6_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_008_src6_endofpacket;                                                                // cmd_demux_008:src6_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_008_src7_valid;                                                                      // cmd_demux_008:src7_valid -> cmd_mux_016:sink1_valid
	wire  [136:0] cmd_demux_008_src7_data;                                                                       // cmd_demux_008:src7_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_008_src7_ready;                                                                      // cmd_mux_016:sink1_ready -> cmd_demux_008:src7_ready
	wire   [44:0] cmd_demux_008_src7_channel;                                                                    // cmd_demux_008:src7_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_008_src7_startofpacket;                                                              // cmd_demux_008:src7_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_008_src7_endofpacket;                                                                // cmd_demux_008:src7_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_008_src8_valid;                                                                      // cmd_demux_008:src8_valid -> cmd_mux_017:sink1_valid
	wire  [136:0] cmd_demux_008_src8_data;                                                                       // cmd_demux_008:src8_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_008_src8_ready;                                                                      // cmd_mux_017:sink1_ready -> cmd_demux_008:src8_ready
	wire   [44:0] cmd_demux_008_src8_channel;                                                                    // cmd_demux_008:src8_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_008_src8_startofpacket;                                                              // cmd_demux_008:src8_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_008_src8_endofpacket;                                                                // cmd_demux_008:src8_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_008_src9_valid;                                                                      // cmd_demux_008:src9_valid -> cmd_mux_018:sink1_valid
	wire  [136:0] cmd_demux_008_src9_data;                                                                       // cmd_demux_008:src9_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_008_src9_ready;                                                                      // cmd_mux_018:sink1_ready -> cmd_demux_008:src9_ready
	wire   [44:0] cmd_demux_008_src9_channel;                                                                    // cmd_demux_008:src9_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_008_src9_startofpacket;                                                              // cmd_demux_008:src9_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_008_src9_endofpacket;                                                                // cmd_demux_008:src9_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_008_src10_valid;                                                                     // cmd_demux_008:src10_valid -> cmd_mux_019:sink1_valid
	wire  [136:0] cmd_demux_008_src10_data;                                                                      // cmd_demux_008:src10_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_008_src10_ready;                                                                     // cmd_mux_019:sink1_ready -> cmd_demux_008:src10_ready
	wire   [44:0] cmd_demux_008_src10_channel;                                                                   // cmd_demux_008:src10_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_008_src10_startofpacket;                                                             // cmd_demux_008:src10_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_008_src10_endofpacket;                                                               // cmd_demux_008:src10_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_008_src11_valid;                                                                     // cmd_demux_008:src11_valid -> cmd_mux_020:sink1_valid
	wire  [136:0] cmd_demux_008_src11_data;                                                                      // cmd_demux_008:src11_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_008_src11_ready;                                                                     // cmd_mux_020:sink1_ready -> cmd_demux_008:src11_ready
	wire   [44:0] cmd_demux_008_src11_channel;                                                                   // cmd_demux_008:src11_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_008_src11_startofpacket;                                                             // cmd_demux_008:src11_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_008_src11_endofpacket;                                                               // cmd_demux_008:src11_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_008_src12_valid;                                                                     // cmd_demux_008:src12_valid -> cmd_mux_021:sink1_valid
	wire  [136:0] cmd_demux_008_src12_data;                                                                      // cmd_demux_008:src12_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_008_src12_ready;                                                                     // cmd_mux_021:sink1_ready -> cmd_demux_008:src12_ready
	wire   [44:0] cmd_demux_008_src12_channel;                                                                   // cmd_demux_008:src12_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_008_src12_startofpacket;                                                             // cmd_demux_008:src12_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_008_src12_endofpacket;                                                               // cmd_demux_008:src12_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_008_src13_valid;                                                                     // cmd_demux_008:src13_valid -> cmd_mux_022:sink1_valid
	wire  [136:0] cmd_demux_008_src13_data;                                                                      // cmd_demux_008:src13_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_008_src13_ready;                                                                     // cmd_mux_022:sink1_ready -> cmd_demux_008:src13_ready
	wire   [44:0] cmd_demux_008_src13_channel;                                                                   // cmd_demux_008:src13_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_008_src13_startofpacket;                                                             // cmd_demux_008:src13_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_008_src13_endofpacket;                                                               // cmd_demux_008:src13_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_008_src14_valid;                                                                     // cmd_demux_008:src14_valid -> cmd_mux_023:sink1_valid
	wire  [136:0] cmd_demux_008_src14_data;                                                                      // cmd_demux_008:src14_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_008_src14_ready;                                                                     // cmd_mux_023:sink1_ready -> cmd_demux_008:src14_ready
	wire   [44:0] cmd_demux_008_src14_channel;                                                                   // cmd_demux_008:src14_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_008_src14_startofpacket;                                                             // cmd_demux_008:src14_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_008_src14_endofpacket;                                                               // cmd_demux_008:src14_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_008_src15_valid;                                                                     // cmd_demux_008:src15_valid -> cmd_mux_024:sink1_valid
	wire  [136:0] cmd_demux_008_src15_data;                                                                      // cmd_demux_008:src15_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_008_src15_ready;                                                                     // cmd_mux_024:sink1_ready -> cmd_demux_008:src15_ready
	wire   [44:0] cmd_demux_008_src15_channel;                                                                   // cmd_demux_008:src15_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_008_src15_startofpacket;                                                             // cmd_demux_008:src15_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_008_src15_endofpacket;                                                               // cmd_demux_008:src15_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_008_src16_valid;                                                                     // cmd_demux_008:src16_valid -> cmd_mux_025:sink1_valid
	wire  [136:0] cmd_demux_008_src16_data;                                                                      // cmd_demux_008:src16_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_008_src16_ready;                                                                     // cmd_mux_025:sink1_ready -> cmd_demux_008:src16_ready
	wire   [44:0] cmd_demux_008_src16_channel;                                                                   // cmd_demux_008:src16_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_008_src16_startofpacket;                                                             // cmd_demux_008:src16_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_008_src16_endofpacket;                                                               // cmd_demux_008:src16_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_008_src17_valid;                                                                     // cmd_demux_008:src17_valid -> cmd_mux_026:sink1_valid
	wire  [136:0] cmd_demux_008_src17_data;                                                                      // cmd_demux_008:src17_data -> cmd_mux_026:sink1_data
	wire          cmd_demux_008_src17_ready;                                                                     // cmd_mux_026:sink1_ready -> cmd_demux_008:src17_ready
	wire   [44:0] cmd_demux_008_src17_channel;                                                                   // cmd_demux_008:src17_channel -> cmd_mux_026:sink1_channel
	wire          cmd_demux_008_src17_startofpacket;                                                             // cmd_demux_008:src17_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          cmd_demux_008_src17_endofpacket;                                                               // cmd_demux_008:src17_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          cmd_demux_008_src18_valid;                                                                     // cmd_demux_008:src18_valid -> cmd_mux_027:sink1_valid
	wire  [136:0] cmd_demux_008_src18_data;                                                                      // cmd_demux_008:src18_data -> cmd_mux_027:sink1_data
	wire          cmd_demux_008_src18_ready;                                                                     // cmd_mux_027:sink1_ready -> cmd_demux_008:src18_ready
	wire   [44:0] cmd_demux_008_src18_channel;                                                                   // cmd_demux_008:src18_channel -> cmd_mux_027:sink1_channel
	wire          cmd_demux_008_src18_startofpacket;                                                             // cmd_demux_008:src18_startofpacket -> cmd_mux_027:sink1_startofpacket
	wire          cmd_demux_008_src18_endofpacket;                                                               // cmd_demux_008:src18_endofpacket -> cmd_mux_027:sink1_endofpacket
	wire          cmd_demux_008_src19_valid;                                                                     // cmd_demux_008:src19_valid -> cmd_mux_028:sink1_valid
	wire  [136:0] cmd_demux_008_src19_data;                                                                      // cmd_demux_008:src19_data -> cmd_mux_028:sink1_data
	wire          cmd_demux_008_src19_ready;                                                                     // cmd_mux_028:sink1_ready -> cmd_demux_008:src19_ready
	wire   [44:0] cmd_demux_008_src19_channel;                                                                   // cmd_demux_008:src19_channel -> cmd_mux_028:sink1_channel
	wire          cmd_demux_008_src19_startofpacket;                                                             // cmd_demux_008:src19_startofpacket -> cmd_mux_028:sink1_startofpacket
	wire          cmd_demux_008_src19_endofpacket;                                                               // cmd_demux_008:src19_endofpacket -> cmd_mux_028:sink1_endofpacket
	wire          cmd_demux_008_src20_valid;                                                                     // cmd_demux_008:src20_valid -> cmd_mux_029:sink1_valid
	wire  [136:0] cmd_demux_008_src20_data;                                                                      // cmd_demux_008:src20_data -> cmd_mux_029:sink1_data
	wire          cmd_demux_008_src20_ready;                                                                     // cmd_mux_029:sink1_ready -> cmd_demux_008:src20_ready
	wire   [44:0] cmd_demux_008_src20_channel;                                                                   // cmd_demux_008:src20_channel -> cmd_mux_029:sink1_channel
	wire          cmd_demux_008_src20_startofpacket;                                                             // cmd_demux_008:src20_startofpacket -> cmd_mux_029:sink1_startofpacket
	wire          cmd_demux_008_src20_endofpacket;                                                               // cmd_demux_008:src20_endofpacket -> cmd_mux_029:sink1_endofpacket
	wire          cmd_demux_008_src21_valid;                                                                     // cmd_demux_008:src21_valid -> cmd_mux_030:sink1_valid
	wire  [136:0] cmd_demux_008_src21_data;                                                                      // cmd_demux_008:src21_data -> cmd_mux_030:sink1_data
	wire          cmd_demux_008_src21_ready;                                                                     // cmd_mux_030:sink1_ready -> cmd_demux_008:src21_ready
	wire   [44:0] cmd_demux_008_src21_channel;                                                                   // cmd_demux_008:src21_channel -> cmd_mux_030:sink1_channel
	wire          cmd_demux_008_src21_startofpacket;                                                             // cmd_demux_008:src21_startofpacket -> cmd_mux_030:sink1_startofpacket
	wire          cmd_demux_008_src21_endofpacket;                                                               // cmd_demux_008:src21_endofpacket -> cmd_mux_030:sink1_endofpacket
	wire          cmd_demux_008_src22_valid;                                                                     // cmd_demux_008:src22_valid -> cmd_mux_031:sink1_valid
	wire  [136:0] cmd_demux_008_src22_data;                                                                      // cmd_demux_008:src22_data -> cmd_mux_031:sink1_data
	wire          cmd_demux_008_src22_ready;                                                                     // cmd_mux_031:sink1_ready -> cmd_demux_008:src22_ready
	wire   [44:0] cmd_demux_008_src22_channel;                                                                   // cmd_demux_008:src22_channel -> cmd_mux_031:sink1_channel
	wire          cmd_demux_008_src22_startofpacket;                                                             // cmd_demux_008:src22_startofpacket -> cmd_mux_031:sink1_startofpacket
	wire          cmd_demux_008_src22_endofpacket;                                                               // cmd_demux_008:src22_endofpacket -> cmd_mux_031:sink1_endofpacket
	wire          cmd_demux_008_src23_valid;                                                                     // cmd_demux_008:src23_valid -> cmd_mux_032:sink1_valid
	wire  [136:0] cmd_demux_008_src23_data;                                                                      // cmd_demux_008:src23_data -> cmd_mux_032:sink1_data
	wire          cmd_demux_008_src23_ready;                                                                     // cmd_mux_032:sink1_ready -> cmd_demux_008:src23_ready
	wire   [44:0] cmd_demux_008_src23_channel;                                                                   // cmd_demux_008:src23_channel -> cmd_mux_032:sink1_channel
	wire          cmd_demux_008_src23_startofpacket;                                                             // cmd_demux_008:src23_startofpacket -> cmd_mux_032:sink1_startofpacket
	wire          cmd_demux_008_src23_endofpacket;                                                               // cmd_demux_008:src23_endofpacket -> cmd_mux_032:sink1_endofpacket
	wire          cmd_demux_008_src24_valid;                                                                     // cmd_demux_008:src24_valid -> cmd_mux_033:sink1_valid
	wire  [136:0] cmd_demux_008_src24_data;                                                                      // cmd_demux_008:src24_data -> cmd_mux_033:sink1_data
	wire          cmd_demux_008_src24_ready;                                                                     // cmd_mux_033:sink1_ready -> cmd_demux_008:src24_ready
	wire   [44:0] cmd_demux_008_src24_channel;                                                                   // cmd_demux_008:src24_channel -> cmd_mux_033:sink1_channel
	wire          cmd_demux_008_src24_startofpacket;                                                             // cmd_demux_008:src24_startofpacket -> cmd_mux_033:sink1_startofpacket
	wire          cmd_demux_008_src24_endofpacket;                                                               // cmd_demux_008:src24_endofpacket -> cmd_mux_033:sink1_endofpacket
	wire          cmd_demux_008_src25_valid;                                                                     // cmd_demux_008:src25_valid -> cmd_mux_034:sink1_valid
	wire  [136:0] cmd_demux_008_src25_data;                                                                      // cmd_demux_008:src25_data -> cmd_mux_034:sink1_data
	wire          cmd_demux_008_src25_ready;                                                                     // cmd_mux_034:sink1_ready -> cmd_demux_008:src25_ready
	wire   [44:0] cmd_demux_008_src25_channel;                                                                   // cmd_demux_008:src25_channel -> cmd_mux_034:sink1_channel
	wire          cmd_demux_008_src25_startofpacket;                                                             // cmd_demux_008:src25_startofpacket -> cmd_mux_034:sink1_startofpacket
	wire          cmd_demux_008_src25_endofpacket;                                                               // cmd_demux_008:src25_endofpacket -> cmd_mux_034:sink1_endofpacket
	wire          cmd_demux_008_src26_valid;                                                                     // cmd_demux_008:src26_valid -> cmd_mux_035:sink1_valid
	wire  [136:0] cmd_demux_008_src26_data;                                                                      // cmd_demux_008:src26_data -> cmd_mux_035:sink1_data
	wire          cmd_demux_008_src26_ready;                                                                     // cmd_mux_035:sink1_ready -> cmd_demux_008:src26_ready
	wire   [44:0] cmd_demux_008_src26_channel;                                                                   // cmd_demux_008:src26_channel -> cmd_mux_035:sink1_channel
	wire          cmd_demux_008_src26_startofpacket;                                                             // cmd_demux_008:src26_startofpacket -> cmd_mux_035:sink1_startofpacket
	wire          cmd_demux_008_src26_endofpacket;                                                               // cmd_demux_008:src26_endofpacket -> cmd_mux_035:sink1_endofpacket
	wire          cmd_demux_008_src27_valid;                                                                     // cmd_demux_008:src27_valid -> cmd_mux_036:sink1_valid
	wire  [136:0] cmd_demux_008_src27_data;                                                                      // cmd_demux_008:src27_data -> cmd_mux_036:sink1_data
	wire          cmd_demux_008_src27_ready;                                                                     // cmd_mux_036:sink1_ready -> cmd_demux_008:src27_ready
	wire   [44:0] cmd_demux_008_src27_channel;                                                                   // cmd_demux_008:src27_channel -> cmd_mux_036:sink1_channel
	wire          cmd_demux_008_src27_startofpacket;                                                             // cmd_demux_008:src27_startofpacket -> cmd_mux_036:sink1_startofpacket
	wire          cmd_demux_008_src27_endofpacket;                                                               // cmd_demux_008:src27_endofpacket -> cmd_mux_036:sink1_endofpacket
	wire          cmd_demux_008_src28_valid;                                                                     // cmd_demux_008:src28_valid -> cmd_mux_037:sink1_valid
	wire  [136:0] cmd_demux_008_src28_data;                                                                      // cmd_demux_008:src28_data -> cmd_mux_037:sink1_data
	wire          cmd_demux_008_src28_ready;                                                                     // cmd_mux_037:sink1_ready -> cmd_demux_008:src28_ready
	wire   [44:0] cmd_demux_008_src28_channel;                                                                   // cmd_demux_008:src28_channel -> cmd_mux_037:sink1_channel
	wire          cmd_demux_008_src28_startofpacket;                                                             // cmd_demux_008:src28_startofpacket -> cmd_mux_037:sink1_startofpacket
	wire          cmd_demux_008_src28_endofpacket;                                                               // cmd_demux_008:src28_endofpacket -> cmd_mux_037:sink1_endofpacket
	wire          cmd_demux_008_src29_valid;                                                                     // cmd_demux_008:src29_valid -> cmd_mux_038:sink1_valid
	wire  [136:0] cmd_demux_008_src29_data;                                                                      // cmd_demux_008:src29_data -> cmd_mux_038:sink1_data
	wire          cmd_demux_008_src29_ready;                                                                     // cmd_mux_038:sink1_ready -> cmd_demux_008:src29_ready
	wire   [44:0] cmd_demux_008_src29_channel;                                                                   // cmd_demux_008:src29_channel -> cmd_mux_038:sink1_channel
	wire          cmd_demux_008_src29_startofpacket;                                                             // cmd_demux_008:src29_startofpacket -> cmd_mux_038:sink1_startofpacket
	wire          cmd_demux_008_src29_endofpacket;                                                               // cmd_demux_008:src29_endofpacket -> cmd_mux_038:sink1_endofpacket
	wire          cmd_demux_008_src30_valid;                                                                     // cmd_demux_008:src30_valid -> cmd_mux_039:sink1_valid
	wire  [136:0] cmd_demux_008_src30_data;                                                                      // cmd_demux_008:src30_data -> cmd_mux_039:sink1_data
	wire          cmd_demux_008_src30_ready;                                                                     // cmd_mux_039:sink1_ready -> cmd_demux_008:src30_ready
	wire   [44:0] cmd_demux_008_src30_channel;                                                                   // cmd_demux_008:src30_channel -> cmd_mux_039:sink1_channel
	wire          cmd_demux_008_src30_startofpacket;                                                             // cmd_demux_008:src30_startofpacket -> cmd_mux_039:sink1_startofpacket
	wire          cmd_demux_008_src30_endofpacket;                                                               // cmd_demux_008:src30_endofpacket -> cmd_mux_039:sink1_endofpacket
	wire          cmd_demux_008_src31_valid;                                                                     // cmd_demux_008:src31_valid -> cmd_mux_040:sink1_valid
	wire  [136:0] cmd_demux_008_src31_data;                                                                      // cmd_demux_008:src31_data -> cmd_mux_040:sink1_data
	wire          cmd_demux_008_src31_ready;                                                                     // cmd_mux_040:sink1_ready -> cmd_demux_008:src31_ready
	wire   [44:0] cmd_demux_008_src31_channel;                                                                   // cmd_demux_008:src31_channel -> cmd_mux_040:sink1_channel
	wire          cmd_demux_008_src31_startofpacket;                                                             // cmd_demux_008:src31_startofpacket -> cmd_mux_040:sink1_startofpacket
	wire          cmd_demux_008_src31_endofpacket;                                                               // cmd_demux_008:src31_endofpacket -> cmd_mux_040:sink1_endofpacket
	wire          cmd_demux_008_src32_valid;                                                                     // cmd_demux_008:src32_valid -> cmd_mux_041:sink1_valid
	wire  [136:0] cmd_demux_008_src32_data;                                                                      // cmd_demux_008:src32_data -> cmd_mux_041:sink1_data
	wire          cmd_demux_008_src32_ready;                                                                     // cmd_mux_041:sink1_ready -> cmd_demux_008:src32_ready
	wire   [44:0] cmd_demux_008_src32_channel;                                                                   // cmd_demux_008:src32_channel -> cmd_mux_041:sink1_channel
	wire          cmd_demux_008_src32_startofpacket;                                                             // cmd_demux_008:src32_startofpacket -> cmd_mux_041:sink1_startofpacket
	wire          cmd_demux_008_src32_endofpacket;                                                               // cmd_demux_008:src32_endofpacket -> cmd_mux_041:sink1_endofpacket
	wire          cmd_demux_008_src33_valid;                                                                     // cmd_demux_008:src33_valid -> cmd_mux_042:sink1_valid
	wire  [136:0] cmd_demux_008_src33_data;                                                                      // cmd_demux_008:src33_data -> cmd_mux_042:sink1_data
	wire          cmd_demux_008_src33_ready;                                                                     // cmd_mux_042:sink1_ready -> cmd_demux_008:src33_ready
	wire   [44:0] cmd_demux_008_src33_channel;                                                                   // cmd_demux_008:src33_channel -> cmd_mux_042:sink1_channel
	wire          cmd_demux_008_src33_startofpacket;                                                             // cmd_demux_008:src33_startofpacket -> cmd_mux_042:sink1_startofpacket
	wire          cmd_demux_008_src33_endofpacket;                                                               // cmd_demux_008:src33_endofpacket -> cmd_mux_042:sink1_endofpacket
	wire          cmd_demux_008_src34_valid;                                                                     // cmd_demux_008:src34_valid -> cmd_mux_043:sink1_valid
	wire  [136:0] cmd_demux_008_src34_data;                                                                      // cmd_demux_008:src34_data -> cmd_mux_043:sink1_data
	wire          cmd_demux_008_src34_ready;                                                                     // cmd_mux_043:sink1_ready -> cmd_demux_008:src34_ready
	wire   [44:0] cmd_demux_008_src34_channel;                                                                   // cmd_demux_008:src34_channel -> cmd_mux_043:sink1_channel
	wire          cmd_demux_008_src34_startofpacket;                                                             // cmd_demux_008:src34_startofpacket -> cmd_mux_043:sink1_startofpacket
	wire          cmd_demux_008_src34_endofpacket;                                                               // cmd_demux_008:src34_endofpacket -> cmd_mux_043:sink1_endofpacket
	wire          cmd_demux_008_src35_valid;                                                                     // cmd_demux_008:src35_valid -> cmd_mux_044:sink1_valid
	wire  [136:0] cmd_demux_008_src35_data;                                                                      // cmd_demux_008:src35_data -> cmd_mux_044:sink1_data
	wire          cmd_demux_008_src35_ready;                                                                     // cmd_mux_044:sink1_ready -> cmd_demux_008:src35_ready
	wire   [44:0] cmd_demux_008_src35_channel;                                                                   // cmd_demux_008:src35_channel -> cmd_mux_044:sink1_channel
	wire          cmd_demux_008_src35_startofpacket;                                                             // cmd_demux_008:src35_startofpacket -> cmd_mux_044:sink1_startofpacket
	wire          cmd_demux_008_src35_endofpacket;                                                               // cmd_demux_008:src35_endofpacket -> cmd_mux_044:sink1_endofpacket
	wire          cmd_demux_009_src0_valid;                                                                      // cmd_demux_009:src0_valid -> cmd_mux_009:sink3_valid
	wire  [136:0] cmd_demux_009_src0_data;                                                                       // cmd_demux_009:src0_data -> cmd_mux_009:sink3_data
	wire          cmd_demux_009_src0_ready;                                                                      // cmd_mux_009:sink3_ready -> cmd_demux_009:src0_ready
	wire   [44:0] cmd_demux_009_src0_channel;                                                                    // cmd_demux_009:src0_channel -> cmd_mux_009:sink3_channel
	wire          cmd_demux_009_src0_startofpacket;                                                              // cmd_demux_009:src0_startofpacket -> cmd_mux_009:sink3_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                                // cmd_demux_009:src0_endofpacket -> cmd_mux_009:sink3_endofpacket
	wire          cmd_demux_009_src1_valid;                                                                      // cmd_demux_009:src1_valid -> cmd_mux_010:sink2_valid
	wire  [136:0] cmd_demux_009_src1_data;                                                                       // cmd_demux_009:src1_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_009_src1_ready;                                                                      // cmd_mux_010:sink2_ready -> cmd_demux_009:src1_ready
	wire   [44:0] cmd_demux_009_src1_channel;                                                                    // cmd_demux_009:src1_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_009_src1_startofpacket;                                                              // cmd_demux_009:src1_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_009_src1_endofpacket;                                                                // cmd_demux_009:src1_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_009_src2_valid;                                                                      // cmd_demux_009:src2_valid -> cmd_mux_011:sink2_valid
	wire  [136:0] cmd_demux_009_src2_data;                                                                       // cmd_demux_009:src2_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_009_src2_ready;                                                                      // cmd_mux_011:sink2_ready -> cmd_demux_009:src2_ready
	wire   [44:0] cmd_demux_009_src2_channel;                                                                    // cmd_demux_009:src2_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_009_src2_startofpacket;                                                              // cmd_demux_009:src2_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_009_src2_endofpacket;                                                                // cmd_demux_009:src2_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_009_src6_valid;                                                                      // cmd_demux_009:src6_valid -> cmd_mux_015:sink2_valid
	wire  [136:0] cmd_demux_009_src6_data;                                                                       // cmd_demux_009:src6_data -> cmd_mux_015:sink2_data
	wire          cmd_demux_009_src6_ready;                                                                      // cmd_mux_015:sink2_ready -> cmd_demux_009:src6_ready
	wire   [44:0] cmd_demux_009_src6_channel;                                                                    // cmd_demux_009:src6_channel -> cmd_mux_015:sink2_channel
	wire          cmd_demux_009_src6_startofpacket;                                                              // cmd_demux_009:src6_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          cmd_demux_009_src6_endofpacket;                                                                // cmd_demux_009:src6_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          cmd_demux_009_src7_valid;                                                                      // cmd_demux_009:src7_valid -> cmd_mux_016:sink2_valid
	wire  [136:0] cmd_demux_009_src7_data;                                                                       // cmd_demux_009:src7_data -> cmd_mux_016:sink2_data
	wire          cmd_demux_009_src7_ready;                                                                      // cmd_mux_016:sink2_ready -> cmd_demux_009:src7_ready
	wire   [44:0] cmd_demux_009_src7_channel;                                                                    // cmd_demux_009:src7_channel -> cmd_mux_016:sink2_channel
	wire          cmd_demux_009_src7_startofpacket;                                                              // cmd_demux_009:src7_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          cmd_demux_009_src7_endofpacket;                                                                // cmd_demux_009:src7_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          cmd_demux_009_src8_valid;                                                                      // cmd_demux_009:src8_valid -> cmd_mux_017:sink2_valid
	wire  [136:0] cmd_demux_009_src8_data;                                                                       // cmd_demux_009:src8_data -> cmd_mux_017:sink2_data
	wire          cmd_demux_009_src8_ready;                                                                      // cmd_mux_017:sink2_ready -> cmd_demux_009:src8_ready
	wire   [44:0] cmd_demux_009_src8_channel;                                                                    // cmd_demux_009:src8_channel -> cmd_mux_017:sink2_channel
	wire          cmd_demux_009_src8_startofpacket;                                                              // cmd_demux_009:src8_startofpacket -> cmd_mux_017:sink2_startofpacket
	wire          cmd_demux_009_src8_endofpacket;                                                                // cmd_demux_009:src8_endofpacket -> cmd_mux_017:sink2_endofpacket
	wire          cmd_demux_009_src9_valid;                                                                      // cmd_demux_009:src9_valid -> cmd_mux_018:sink2_valid
	wire  [136:0] cmd_demux_009_src9_data;                                                                       // cmd_demux_009:src9_data -> cmd_mux_018:sink2_data
	wire          cmd_demux_009_src9_ready;                                                                      // cmd_mux_018:sink2_ready -> cmd_demux_009:src9_ready
	wire   [44:0] cmd_demux_009_src9_channel;                                                                    // cmd_demux_009:src9_channel -> cmd_mux_018:sink2_channel
	wire          cmd_demux_009_src9_startofpacket;                                                              // cmd_demux_009:src9_startofpacket -> cmd_mux_018:sink2_startofpacket
	wire          cmd_demux_009_src9_endofpacket;                                                                // cmd_demux_009:src9_endofpacket -> cmd_mux_018:sink2_endofpacket
	wire          cmd_demux_009_src10_valid;                                                                     // cmd_demux_009:src10_valid -> cmd_mux_019:sink2_valid
	wire  [136:0] cmd_demux_009_src10_data;                                                                      // cmd_demux_009:src10_data -> cmd_mux_019:sink2_data
	wire          cmd_demux_009_src10_ready;                                                                     // cmd_mux_019:sink2_ready -> cmd_demux_009:src10_ready
	wire   [44:0] cmd_demux_009_src10_channel;                                                                   // cmd_demux_009:src10_channel -> cmd_mux_019:sink2_channel
	wire          cmd_demux_009_src10_startofpacket;                                                             // cmd_demux_009:src10_startofpacket -> cmd_mux_019:sink2_startofpacket
	wire          cmd_demux_009_src10_endofpacket;                                                               // cmd_demux_009:src10_endofpacket -> cmd_mux_019:sink2_endofpacket
	wire          cmd_demux_009_src11_valid;                                                                     // cmd_demux_009:src11_valid -> cmd_mux_020:sink2_valid
	wire  [136:0] cmd_demux_009_src11_data;                                                                      // cmd_demux_009:src11_data -> cmd_mux_020:sink2_data
	wire          cmd_demux_009_src11_ready;                                                                     // cmd_mux_020:sink2_ready -> cmd_demux_009:src11_ready
	wire   [44:0] cmd_demux_009_src11_channel;                                                                   // cmd_demux_009:src11_channel -> cmd_mux_020:sink2_channel
	wire          cmd_demux_009_src11_startofpacket;                                                             // cmd_demux_009:src11_startofpacket -> cmd_mux_020:sink2_startofpacket
	wire          cmd_demux_009_src11_endofpacket;                                                               // cmd_demux_009:src11_endofpacket -> cmd_mux_020:sink2_endofpacket
	wire          cmd_demux_009_src12_valid;                                                                     // cmd_demux_009:src12_valid -> cmd_mux_021:sink2_valid
	wire  [136:0] cmd_demux_009_src12_data;                                                                      // cmd_demux_009:src12_data -> cmd_mux_021:sink2_data
	wire          cmd_demux_009_src12_ready;                                                                     // cmd_mux_021:sink2_ready -> cmd_demux_009:src12_ready
	wire   [44:0] cmd_demux_009_src12_channel;                                                                   // cmd_demux_009:src12_channel -> cmd_mux_021:sink2_channel
	wire          cmd_demux_009_src12_startofpacket;                                                             // cmd_demux_009:src12_startofpacket -> cmd_mux_021:sink2_startofpacket
	wire          cmd_demux_009_src12_endofpacket;                                                               // cmd_demux_009:src12_endofpacket -> cmd_mux_021:sink2_endofpacket
	wire          cmd_demux_009_src13_valid;                                                                     // cmd_demux_009:src13_valid -> cmd_mux_022:sink2_valid
	wire  [136:0] cmd_demux_009_src13_data;                                                                      // cmd_demux_009:src13_data -> cmd_mux_022:sink2_data
	wire          cmd_demux_009_src13_ready;                                                                     // cmd_mux_022:sink2_ready -> cmd_demux_009:src13_ready
	wire   [44:0] cmd_demux_009_src13_channel;                                                                   // cmd_demux_009:src13_channel -> cmd_mux_022:sink2_channel
	wire          cmd_demux_009_src13_startofpacket;                                                             // cmd_demux_009:src13_startofpacket -> cmd_mux_022:sink2_startofpacket
	wire          cmd_demux_009_src13_endofpacket;                                                               // cmd_demux_009:src13_endofpacket -> cmd_mux_022:sink2_endofpacket
	wire          cmd_demux_009_src14_valid;                                                                     // cmd_demux_009:src14_valid -> cmd_mux_023:sink2_valid
	wire  [136:0] cmd_demux_009_src14_data;                                                                      // cmd_demux_009:src14_data -> cmd_mux_023:sink2_data
	wire          cmd_demux_009_src14_ready;                                                                     // cmd_mux_023:sink2_ready -> cmd_demux_009:src14_ready
	wire   [44:0] cmd_demux_009_src14_channel;                                                                   // cmd_demux_009:src14_channel -> cmd_mux_023:sink2_channel
	wire          cmd_demux_009_src14_startofpacket;                                                             // cmd_demux_009:src14_startofpacket -> cmd_mux_023:sink2_startofpacket
	wire          cmd_demux_009_src14_endofpacket;                                                               // cmd_demux_009:src14_endofpacket -> cmd_mux_023:sink2_endofpacket
	wire          cmd_demux_009_src15_valid;                                                                     // cmd_demux_009:src15_valid -> cmd_mux_024:sink2_valid
	wire  [136:0] cmd_demux_009_src15_data;                                                                      // cmd_demux_009:src15_data -> cmd_mux_024:sink2_data
	wire          cmd_demux_009_src15_ready;                                                                     // cmd_mux_024:sink2_ready -> cmd_demux_009:src15_ready
	wire   [44:0] cmd_demux_009_src15_channel;                                                                   // cmd_demux_009:src15_channel -> cmd_mux_024:sink2_channel
	wire          cmd_demux_009_src15_startofpacket;                                                             // cmd_demux_009:src15_startofpacket -> cmd_mux_024:sink2_startofpacket
	wire          cmd_demux_009_src15_endofpacket;                                                               // cmd_demux_009:src15_endofpacket -> cmd_mux_024:sink2_endofpacket
	wire          cmd_demux_009_src16_valid;                                                                     // cmd_demux_009:src16_valid -> cmd_mux_025:sink2_valid
	wire  [136:0] cmd_demux_009_src16_data;                                                                      // cmd_demux_009:src16_data -> cmd_mux_025:sink2_data
	wire          cmd_demux_009_src16_ready;                                                                     // cmd_mux_025:sink2_ready -> cmd_demux_009:src16_ready
	wire   [44:0] cmd_demux_009_src16_channel;                                                                   // cmd_demux_009:src16_channel -> cmd_mux_025:sink2_channel
	wire          cmd_demux_009_src16_startofpacket;                                                             // cmd_demux_009:src16_startofpacket -> cmd_mux_025:sink2_startofpacket
	wire          cmd_demux_009_src16_endofpacket;                                                               // cmd_demux_009:src16_endofpacket -> cmd_mux_025:sink2_endofpacket
	wire          cmd_demux_009_src17_valid;                                                                     // cmd_demux_009:src17_valid -> cmd_mux_026:sink2_valid
	wire  [136:0] cmd_demux_009_src17_data;                                                                      // cmd_demux_009:src17_data -> cmd_mux_026:sink2_data
	wire          cmd_demux_009_src17_ready;                                                                     // cmd_mux_026:sink2_ready -> cmd_demux_009:src17_ready
	wire   [44:0] cmd_demux_009_src17_channel;                                                                   // cmd_demux_009:src17_channel -> cmd_mux_026:sink2_channel
	wire          cmd_demux_009_src17_startofpacket;                                                             // cmd_demux_009:src17_startofpacket -> cmd_mux_026:sink2_startofpacket
	wire          cmd_demux_009_src17_endofpacket;                                                               // cmd_demux_009:src17_endofpacket -> cmd_mux_026:sink2_endofpacket
	wire          cmd_demux_009_src18_valid;                                                                     // cmd_demux_009:src18_valid -> cmd_mux_027:sink2_valid
	wire  [136:0] cmd_demux_009_src18_data;                                                                      // cmd_demux_009:src18_data -> cmd_mux_027:sink2_data
	wire          cmd_demux_009_src18_ready;                                                                     // cmd_mux_027:sink2_ready -> cmd_demux_009:src18_ready
	wire   [44:0] cmd_demux_009_src18_channel;                                                                   // cmd_demux_009:src18_channel -> cmd_mux_027:sink2_channel
	wire          cmd_demux_009_src18_startofpacket;                                                             // cmd_demux_009:src18_startofpacket -> cmd_mux_027:sink2_startofpacket
	wire          cmd_demux_009_src18_endofpacket;                                                               // cmd_demux_009:src18_endofpacket -> cmd_mux_027:sink2_endofpacket
	wire          cmd_demux_009_src19_valid;                                                                     // cmd_demux_009:src19_valid -> cmd_mux_028:sink2_valid
	wire  [136:0] cmd_demux_009_src19_data;                                                                      // cmd_demux_009:src19_data -> cmd_mux_028:sink2_data
	wire          cmd_demux_009_src19_ready;                                                                     // cmd_mux_028:sink2_ready -> cmd_demux_009:src19_ready
	wire   [44:0] cmd_demux_009_src19_channel;                                                                   // cmd_demux_009:src19_channel -> cmd_mux_028:sink2_channel
	wire          cmd_demux_009_src19_startofpacket;                                                             // cmd_demux_009:src19_startofpacket -> cmd_mux_028:sink2_startofpacket
	wire          cmd_demux_009_src19_endofpacket;                                                               // cmd_demux_009:src19_endofpacket -> cmd_mux_028:sink2_endofpacket
	wire          cmd_demux_009_src20_valid;                                                                     // cmd_demux_009:src20_valid -> cmd_mux_029:sink2_valid
	wire  [136:0] cmd_demux_009_src20_data;                                                                      // cmd_demux_009:src20_data -> cmd_mux_029:sink2_data
	wire          cmd_demux_009_src20_ready;                                                                     // cmd_mux_029:sink2_ready -> cmd_demux_009:src20_ready
	wire   [44:0] cmd_demux_009_src20_channel;                                                                   // cmd_demux_009:src20_channel -> cmd_mux_029:sink2_channel
	wire          cmd_demux_009_src20_startofpacket;                                                             // cmd_demux_009:src20_startofpacket -> cmd_mux_029:sink2_startofpacket
	wire          cmd_demux_009_src20_endofpacket;                                                               // cmd_demux_009:src20_endofpacket -> cmd_mux_029:sink2_endofpacket
	wire          cmd_demux_009_src21_valid;                                                                     // cmd_demux_009:src21_valid -> cmd_mux_030:sink2_valid
	wire  [136:0] cmd_demux_009_src21_data;                                                                      // cmd_demux_009:src21_data -> cmd_mux_030:sink2_data
	wire          cmd_demux_009_src21_ready;                                                                     // cmd_mux_030:sink2_ready -> cmd_demux_009:src21_ready
	wire   [44:0] cmd_demux_009_src21_channel;                                                                   // cmd_demux_009:src21_channel -> cmd_mux_030:sink2_channel
	wire          cmd_demux_009_src21_startofpacket;                                                             // cmd_demux_009:src21_startofpacket -> cmd_mux_030:sink2_startofpacket
	wire          cmd_demux_009_src21_endofpacket;                                                               // cmd_demux_009:src21_endofpacket -> cmd_mux_030:sink2_endofpacket
	wire          cmd_demux_009_src22_valid;                                                                     // cmd_demux_009:src22_valid -> cmd_mux_031:sink2_valid
	wire  [136:0] cmd_demux_009_src22_data;                                                                      // cmd_demux_009:src22_data -> cmd_mux_031:sink2_data
	wire          cmd_demux_009_src22_ready;                                                                     // cmd_mux_031:sink2_ready -> cmd_demux_009:src22_ready
	wire   [44:0] cmd_demux_009_src22_channel;                                                                   // cmd_demux_009:src22_channel -> cmd_mux_031:sink2_channel
	wire          cmd_demux_009_src22_startofpacket;                                                             // cmd_demux_009:src22_startofpacket -> cmd_mux_031:sink2_startofpacket
	wire          cmd_demux_009_src22_endofpacket;                                                               // cmd_demux_009:src22_endofpacket -> cmd_mux_031:sink2_endofpacket
	wire          cmd_demux_009_src23_valid;                                                                     // cmd_demux_009:src23_valid -> cmd_mux_032:sink2_valid
	wire  [136:0] cmd_demux_009_src23_data;                                                                      // cmd_demux_009:src23_data -> cmd_mux_032:sink2_data
	wire          cmd_demux_009_src23_ready;                                                                     // cmd_mux_032:sink2_ready -> cmd_demux_009:src23_ready
	wire   [44:0] cmd_demux_009_src23_channel;                                                                   // cmd_demux_009:src23_channel -> cmd_mux_032:sink2_channel
	wire          cmd_demux_009_src23_startofpacket;                                                             // cmd_demux_009:src23_startofpacket -> cmd_mux_032:sink2_startofpacket
	wire          cmd_demux_009_src23_endofpacket;                                                               // cmd_demux_009:src23_endofpacket -> cmd_mux_032:sink2_endofpacket
	wire          cmd_demux_009_src24_valid;                                                                     // cmd_demux_009:src24_valid -> cmd_mux_033:sink2_valid
	wire  [136:0] cmd_demux_009_src24_data;                                                                      // cmd_demux_009:src24_data -> cmd_mux_033:sink2_data
	wire          cmd_demux_009_src24_ready;                                                                     // cmd_mux_033:sink2_ready -> cmd_demux_009:src24_ready
	wire   [44:0] cmd_demux_009_src24_channel;                                                                   // cmd_demux_009:src24_channel -> cmd_mux_033:sink2_channel
	wire          cmd_demux_009_src24_startofpacket;                                                             // cmd_demux_009:src24_startofpacket -> cmd_mux_033:sink2_startofpacket
	wire          cmd_demux_009_src24_endofpacket;                                                               // cmd_demux_009:src24_endofpacket -> cmd_mux_033:sink2_endofpacket
	wire          cmd_demux_009_src25_valid;                                                                     // cmd_demux_009:src25_valid -> cmd_mux_034:sink2_valid
	wire  [136:0] cmd_demux_009_src25_data;                                                                      // cmd_demux_009:src25_data -> cmd_mux_034:sink2_data
	wire          cmd_demux_009_src25_ready;                                                                     // cmd_mux_034:sink2_ready -> cmd_demux_009:src25_ready
	wire   [44:0] cmd_demux_009_src25_channel;                                                                   // cmd_demux_009:src25_channel -> cmd_mux_034:sink2_channel
	wire          cmd_demux_009_src25_startofpacket;                                                             // cmd_demux_009:src25_startofpacket -> cmd_mux_034:sink2_startofpacket
	wire          cmd_demux_009_src25_endofpacket;                                                               // cmd_demux_009:src25_endofpacket -> cmd_mux_034:sink2_endofpacket
	wire          cmd_demux_009_src26_valid;                                                                     // cmd_demux_009:src26_valid -> cmd_mux_035:sink2_valid
	wire  [136:0] cmd_demux_009_src26_data;                                                                      // cmd_demux_009:src26_data -> cmd_mux_035:sink2_data
	wire          cmd_demux_009_src26_ready;                                                                     // cmd_mux_035:sink2_ready -> cmd_demux_009:src26_ready
	wire   [44:0] cmd_demux_009_src26_channel;                                                                   // cmd_demux_009:src26_channel -> cmd_mux_035:sink2_channel
	wire          cmd_demux_009_src26_startofpacket;                                                             // cmd_demux_009:src26_startofpacket -> cmd_mux_035:sink2_startofpacket
	wire          cmd_demux_009_src26_endofpacket;                                                               // cmd_demux_009:src26_endofpacket -> cmd_mux_035:sink2_endofpacket
	wire          cmd_demux_009_src27_valid;                                                                     // cmd_demux_009:src27_valid -> cmd_mux_036:sink2_valid
	wire  [136:0] cmd_demux_009_src27_data;                                                                      // cmd_demux_009:src27_data -> cmd_mux_036:sink2_data
	wire          cmd_demux_009_src27_ready;                                                                     // cmd_mux_036:sink2_ready -> cmd_demux_009:src27_ready
	wire   [44:0] cmd_demux_009_src27_channel;                                                                   // cmd_demux_009:src27_channel -> cmd_mux_036:sink2_channel
	wire          cmd_demux_009_src27_startofpacket;                                                             // cmd_demux_009:src27_startofpacket -> cmd_mux_036:sink2_startofpacket
	wire          cmd_demux_009_src27_endofpacket;                                                               // cmd_demux_009:src27_endofpacket -> cmd_mux_036:sink2_endofpacket
	wire          cmd_demux_009_src28_valid;                                                                     // cmd_demux_009:src28_valid -> cmd_mux_037:sink2_valid
	wire  [136:0] cmd_demux_009_src28_data;                                                                      // cmd_demux_009:src28_data -> cmd_mux_037:sink2_data
	wire          cmd_demux_009_src28_ready;                                                                     // cmd_mux_037:sink2_ready -> cmd_demux_009:src28_ready
	wire   [44:0] cmd_demux_009_src28_channel;                                                                   // cmd_demux_009:src28_channel -> cmd_mux_037:sink2_channel
	wire          cmd_demux_009_src28_startofpacket;                                                             // cmd_demux_009:src28_startofpacket -> cmd_mux_037:sink2_startofpacket
	wire          cmd_demux_009_src28_endofpacket;                                                               // cmd_demux_009:src28_endofpacket -> cmd_mux_037:sink2_endofpacket
	wire          cmd_demux_009_src29_valid;                                                                     // cmd_demux_009:src29_valid -> cmd_mux_038:sink2_valid
	wire  [136:0] cmd_demux_009_src29_data;                                                                      // cmd_demux_009:src29_data -> cmd_mux_038:sink2_data
	wire          cmd_demux_009_src29_ready;                                                                     // cmd_mux_038:sink2_ready -> cmd_demux_009:src29_ready
	wire   [44:0] cmd_demux_009_src29_channel;                                                                   // cmd_demux_009:src29_channel -> cmd_mux_038:sink2_channel
	wire          cmd_demux_009_src29_startofpacket;                                                             // cmd_demux_009:src29_startofpacket -> cmd_mux_038:sink2_startofpacket
	wire          cmd_demux_009_src29_endofpacket;                                                               // cmd_demux_009:src29_endofpacket -> cmd_mux_038:sink2_endofpacket
	wire          cmd_demux_009_src30_valid;                                                                     // cmd_demux_009:src30_valid -> cmd_mux_039:sink2_valid
	wire  [136:0] cmd_demux_009_src30_data;                                                                      // cmd_demux_009:src30_data -> cmd_mux_039:sink2_data
	wire          cmd_demux_009_src30_ready;                                                                     // cmd_mux_039:sink2_ready -> cmd_demux_009:src30_ready
	wire   [44:0] cmd_demux_009_src30_channel;                                                                   // cmd_demux_009:src30_channel -> cmd_mux_039:sink2_channel
	wire          cmd_demux_009_src30_startofpacket;                                                             // cmd_demux_009:src30_startofpacket -> cmd_mux_039:sink2_startofpacket
	wire          cmd_demux_009_src30_endofpacket;                                                               // cmd_demux_009:src30_endofpacket -> cmd_mux_039:sink2_endofpacket
	wire          cmd_demux_009_src31_valid;                                                                     // cmd_demux_009:src31_valid -> cmd_mux_040:sink2_valid
	wire  [136:0] cmd_demux_009_src31_data;                                                                      // cmd_demux_009:src31_data -> cmd_mux_040:sink2_data
	wire          cmd_demux_009_src31_ready;                                                                     // cmd_mux_040:sink2_ready -> cmd_demux_009:src31_ready
	wire   [44:0] cmd_demux_009_src31_channel;                                                                   // cmd_demux_009:src31_channel -> cmd_mux_040:sink2_channel
	wire          cmd_demux_009_src31_startofpacket;                                                             // cmd_demux_009:src31_startofpacket -> cmd_mux_040:sink2_startofpacket
	wire          cmd_demux_009_src31_endofpacket;                                                               // cmd_demux_009:src31_endofpacket -> cmd_mux_040:sink2_endofpacket
	wire          cmd_demux_010_src0_valid;                                                                      // cmd_demux_010:src0_valid -> cmd_mux_029:sink3_valid
	wire  [136:0] cmd_demux_010_src0_data;                                                                       // cmd_demux_010:src0_data -> cmd_mux_029:sink3_data
	wire          cmd_demux_010_src0_ready;                                                                      // cmd_mux_029:sink3_ready -> cmd_demux_010:src0_ready
	wire   [44:0] cmd_demux_010_src0_channel;                                                                    // cmd_demux_010:src0_channel -> cmd_mux_029:sink3_channel
	wire          cmd_demux_010_src0_startofpacket;                                                              // cmd_demux_010:src0_startofpacket -> cmd_mux_029:sink3_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                                                // cmd_demux_010:src0_endofpacket -> cmd_mux_029:sink3_endofpacket
	wire          cmd_demux_011_src0_valid;                                                                      // cmd_demux_011:src0_valid -> cmd_mux_028:sink3_valid
	wire  [136:0] cmd_demux_011_src0_data;                                                                       // cmd_demux_011:src0_data -> cmd_mux_028:sink3_data
	wire          cmd_demux_011_src0_ready;                                                                      // cmd_mux_028:sink3_ready -> cmd_demux_011:src0_ready
	wire   [44:0] cmd_demux_011_src0_channel;                                                                    // cmd_demux_011:src0_channel -> cmd_mux_028:sink3_channel
	wire          cmd_demux_011_src0_startofpacket;                                                              // cmd_demux_011:src0_startofpacket -> cmd_mux_028:sink3_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                                                // cmd_demux_011:src0_endofpacket -> cmd_mux_028:sink3_endofpacket
	wire          cmd_demux_012_src0_valid;                                                                      // cmd_demux_012:src0_valid -> cmd_mux_005:sink2_valid
	wire  [136:0] cmd_demux_012_src0_data;                                                                       // cmd_demux_012:src0_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_012_src0_ready;                                                                      // cmd_mux_005:sink2_ready -> cmd_demux_012:src0_ready
	wire   [44:0] cmd_demux_012_src0_channel;                                                                    // cmd_demux_012:src0_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_012_src0_startofpacket;                                                              // cmd_demux_012:src0_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_012_src0_endofpacket;                                                                // cmd_demux_012:src0_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                      // rsp_demux_005:src2_valid -> rsp_mux_012:sink0_valid
	wire  [136:0] rsp_demux_005_src2_data;                                                                       // rsp_demux_005:src2_data -> rsp_mux_012:sink0_data
	wire          rsp_demux_005_src2_ready;                                                                      // rsp_mux_012:sink0_ready -> rsp_demux_005:src2_ready
	wire   [44:0] rsp_demux_005_src2_channel;                                                                    // rsp_demux_005:src2_channel -> rsp_mux_012:sink0_channel
	wire          rsp_demux_005_src2_startofpacket;                                                              // rsp_demux_005:src2_startofpacket -> rsp_mux_012:sink0_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                                // rsp_demux_005:src2_endofpacket -> rsp_mux_012:sink0_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                      // rsp_demux_007:src2_valid -> rsp_mux_006:sink0_valid
	wire  [136:0] rsp_demux_007_src2_data;                                                                       // rsp_demux_007:src2_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_007_src2_ready;                                                                      // rsp_mux_006:sink0_ready -> rsp_demux_007:src2_ready
	wire   [44:0] rsp_demux_007_src2_channel;                                                                    // rsp_demux_007:src2_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_007_src2_startofpacket;                                                              // rsp_demux_007:src2_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                                // rsp_demux_007:src2_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                      // rsp_demux_009:src0_valid -> rsp_mux_006:sink1_valid
	wire  [136:0] rsp_demux_009_src0_data;                                                                       // rsp_demux_009:src0_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_009_src0_ready;                                                                      // rsp_mux_006:sink1_ready -> rsp_demux_009:src0_ready
	wire   [44:0] rsp_demux_009_src0_channel;                                                                    // rsp_demux_009:src0_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_009_src0_startofpacket;                                                              // rsp_demux_009:src0_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                // rsp_demux_009:src0_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                      // rsp_demux_009:src1_valid -> rsp_mux_007:sink0_valid
	wire  [136:0] rsp_demux_009_src1_data;                                                                       // rsp_demux_009:src1_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_009_src1_ready;                                                                      // rsp_mux_007:sink0_ready -> rsp_demux_009:src1_ready
	wire   [44:0] rsp_demux_009_src1_channel;                                                                    // rsp_demux_009:src1_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_009_src1_startofpacket;                                                              // rsp_demux_009:src1_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                                // rsp_demux_009:src1_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                      // rsp_demux_009:src2_valid -> rsp_mux_008:sink0_valid
	wire  [136:0] rsp_demux_009_src2_data;                                                                       // rsp_demux_009:src2_data -> rsp_mux_008:sink0_data
	wire          rsp_demux_009_src2_ready;                                                                      // rsp_mux_008:sink0_ready -> rsp_demux_009:src2_ready
	wire   [44:0] rsp_demux_009_src2_channel;                                                                    // rsp_demux_009:src2_channel -> rsp_mux_008:sink0_channel
	wire          rsp_demux_009_src2_startofpacket;                                                              // rsp_demux_009:src2_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                                // rsp_demux_009:src2_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_009_src3_valid;                                                                      // rsp_demux_009:src3_valid -> rsp_mux_009:sink0_valid
	wire  [136:0] rsp_demux_009_src3_data;                                                                       // rsp_demux_009:src3_data -> rsp_mux_009:sink0_data
	wire          rsp_demux_009_src3_ready;                                                                      // rsp_mux_009:sink0_ready -> rsp_demux_009:src3_ready
	wire   [44:0] rsp_demux_009_src3_channel;                                                                    // rsp_demux_009:src3_channel -> rsp_mux_009:sink0_channel
	wire          rsp_demux_009_src3_startofpacket;                                                              // rsp_demux_009:src3_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          rsp_demux_009_src3_endofpacket;                                                                // rsp_demux_009:src3_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                      // rsp_demux_010:src0_valid -> rsp_mux_007:sink1_valid
	wire  [136:0] rsp_demux_010_src0_data;                                                                       // rsp_demux_010:src0_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_010_src0_ready;                                                                      // rsp_mux_007:sink1_ready -> rsp_demux_010:src0_ready
	wire   [44:0] rsp_demux_010_src0_channel;                                                                    // rsp_demux_010:src0_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_010_src0_startofpacket;                                                              // rsp_demux_010:src0_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                // rsp_demux_010:src0_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                      // rsp_demux_010:src1_valid -> rsp_mux_008:sink1_valid
	wire  [136:0] rsp_demux_010_src1_data;                                                                       // rsp_demux_010:src1_data -> rsp_mux_008:sink1_data
	wire          rsp_demux_010_src1_ready;                                                                      // rsp_mux_008:sink1_ready -> rsp_demux_010:src1_ready
	wire   [44:0] rsp_demux_010_src1_channel;                                                                    // rsp_demux_010:src1_channel -> rsp_mux_008:sink1_channel
	wire          rsp_demux_010_src1_startofpacket;                                                              // rsp_demux_010:src1_startofpacket -> rsp_mux_008:sink1_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                                // rsp_demux_010:src1_endofpacket -> rsp_mux_008:sink1_endofpacket
	wire          rsp_demux_010_src2_valid;                                                                      // rsp_demux_010:src2_valid -> rsp_mux_009:sink1_valid
	wire  [136:0] rsp_demux_010_src2_data;                                                                       // rsp_demux_010:src2_data -> rsp_mux_009:sink1_data
	wire          rsp_demux_010_src2_ready;                                                                      // rsp_mux_009:sink1_ready -> rsp_demux_010:src2_ready
	wire   [44:0] rsp_demux_010_src2_channel;                                                                    // rsp_demux_010:src2_channel -> rsp_mux_009:sink1_channel
	wire          rsp_demux_010_src2_startofpacket;                                                              // rsp_demux_010:src2_startofpacket -> rsp_mux_009:sink1_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                                // rsp_demux_010:src2_endofpacket -> rsp_mux_009:sink1_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                      // rsp_demux_011:src0_valid -> rsp_mux_007:sink2_valid
	wire  [136:0] rsp_demux_011_src0_data;                                                                       // rsp_demux_011:src0_data -> rsp_mux_007:sink2_data
	wire          rsp_demux_011_src0_ready;                                                                      // rsp_mux_007:sink2_ready -> rsp_demux_011:src0_ready
	wire   [44:0] rsp_demux_011_src0_channel;                                                                    // rsp_demux_011:src0_channel -> rsp_mux_007:sink2_channel
	wire          rsp_demux_011_src0_startofpacket;                                                              // rsp_demux_011:src0_startofpacket -> rsp_mux_007:sink2_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                // rsp_demux_011:src0_endofpacket -> rsp_mux_007:sink2_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                      // rsp_demux_011:src1_valid -> rsp_mux_008:sink2_valid
	wire  [136:0] rsp_demux_011_src1_data;                                                                       // rsp_demux_011:src1_data -> rsp_mux_008:sink2_data
	wire          rsp_demux_011_src1_ready;                                                                      // rsp_mux_008:sink2_ready -> rsp_demux_011:src1_ready
	wire   [44:0] rsp_demux_011_src1_channel;                                                                    // rsp_demux_011:src1_channel -> rsp_mux_008:sink2_channel
	wire          rsp_demux_011_src1_startofpacket;                                                              // rsp_demux_011:src1_startofpacket -> rsp_mux_008:sink2_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                // rsp_demux_011:src1_endofpacket -> rsp_mux_008:sink2_endofpacket
	wire          rsp_demux_011_src2_valid;                                                                      // rsp_demux_011:src2_valid -> rsp_mux_009:sink2_valid
	wire  [136:0] rsp_demux_011_src2_data;                                                                       // rsp_demux_011:src2_data -> rsp_mux_009:sink2_data
	wire          rsp_demux_011_src2_ready;                                                                      // rsp_mux_009:sink2_ready -> rsp_demux_011:src2_ready
	wire   [44:0] rsp_demux_011_src2_channel;                                                                    // rsp_demux_011:src2_channel -> rsp_mux_009:sink2_channel
	wire          rsp_demux_011_src2_startofpacket;                                                              // rsp_demux_011:src2_startofpacket -> rsp_mux_009:sink2_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                                // rsp_demux_011:src2_endofpacket -> rsp_mux_009:sink2_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                      // rsp_demux_015:src0_valid -> rsp_mux_007:sink6_valid
	wire  [136:0] rsp_demux_015_src0_data;                                                                       // rsp_demux_015:src0_data -> rsp_mux_007:sink6_data
	wire          rsp_demux_015_src0_ready;                                                                      // rsp_mux_007:sink6_ready -> rsp_demux_015:src0_ready
	wire   [44:0] rsp_demux_015_src0_channel;                                                                    // rsp_demux_015:src0_channel -> rsp_mux_007:sink6_channel
	wire          rsp_demux_015_src0_startofpacket;                                                              // rsp_demux_015:src0_startofpacket -> rsp_mux_007:sink6_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                // rsp_demux_015:src0_endofpacket -> rsp_mux_007:sink6_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                      // rsp_demux_015:src1_valid -> rsp_mux_008:sink6_valid
	wire  [136:0] rsp_demux_015_src1_data;                                                                       // rsp_demux_015:src1_data -> rsp_mux_008:sink6_data
	wire          rsp_demux_015_src1_ready;                                                                      // rsp_mux_008:sink6_ready -> rsp_demux_015:src1_ready
	wire   [44:0] rsp_demux_015_src1_channel;                                                                    // rsp_demux_015:src1_channel -> rsp_mux_008:sink6_channel
	wire          rsp_demux_015_src1_startofpacket;                                                              // rsp_demux_015:src1_startofpacket -> rsp_mux_008:sink6_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                                // rsp_demux_015:src1_endofpacket -> rsp_mux_008:sink6_endofpacket
	wire          rsp_demux_015_src2_valid;                                                                      // rsp_demux_015:src2_valid -> rsp_mux_009:sink6_valid
	wire  [136:0] rsp_demux_015_src2_data;                                                                       // rsp_demux_015:src2_data -> rsp_mux_009:sink6_data
	wire          rsp_demux_015_src2_ready;                                                                      // rsp_mux_009:sink6_ready -> rsp_demux_015:src2_ready
	wire   [44:0] rsp_demux_015_src2_channel;                                                                    // rsp_demux_015:src2_channel -> rsp_mux_009:sink6_channel
	wire          rsp_demux_015_src2_startofpacket;                                                              // rsp_demux_015:src2_startofpacket -> rsp_mux_009:sink6_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                                // rsp_demux_015:src2_endofpacket -> rsp_mux_009:sink6_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                      // rsp_demux_016:src0_valid -> rsp_mux_007:sink7_valid
	wire  [136:0] rsp_demux_016_src0_data;                                                                       // rsp_demux_016:src0_data -> rsp_mux_007:sink7_data
	wire          rsp_demux_016_src0_ready;                                                                      // rsp_mux_007:sink7_ready -> rsp_demux_016:src0_ready
	wire   [44:0] rsp_demux_016_src0_channel;                                                                    // rsp_demux_016:src0_channel -> rsp_mux_007:sink7_channel
	wire          rsp_demux_016_src0_startofpacket;                                                              // rsp_demux_016:src0_startofpacket -> rsp_mux_007:sink7_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                // rsp_demux_016:src0_endofpacket -> rsp_mux_007:sink7_endofpacket
	wire          rsp_demux_016_src1_valid;                                                                      // rsp_demux_016:src1_valid -> rsp_mux_008:sink7_valid
	wire  [136:0] rsp_demux_016_src1_data;                                                                       // rsp_demux_016:src1_data -> rsp_mux_008:sink7_data
	wire          rsp_demux_016_src1_ready;                                                                      // rsp_mux_008:sink7_ready -> rsp_demux_016:src1_ready
	wire   [44:0] rsp_demux_016_src1_channel;                                                                    // rsp_demux_016:src1_channel -> rsp_mux_008:sink7_channel
	wire          rsp_demux_016_src1_startofpacket;                                                              // rsp_demux_016:src1_startofpacket -> rsp_mux_008:sink7_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                                // rsp_demux_016:src1_endofpacket -> rsp_mux_008:sink7_endofpacket
	wire          rsp_demux_016_src2_valid;                                                                      // rsp_demux_016:src2_valid -> rsp_mux_009:sink7_valid
	wire  [136:0] rsp_demux_016_src2_data;                                                                       // rsp_demux_016:src2_data -> rsp_mux_009:sink7_data
	wire          rsp_demux_016_src2_ready;                                                                      // rsp_mux_009:sink7_ready -> rsp_demux_016:src2_ready
	wire   [44:0] rsp_demux_016_src2_channel;                                                                    // rsp_demux_016:src2_channel -> rsp_mux_009:sink7_channel
	wire          rsp_demux_016_src2_startofpacket;                                                              // rsp_demux_016:src2_startofpacket -> rsp_mux_009:sink7_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                                // rsp_demux_016:src2_endofpacket -> rsp_mux_009:sink7_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                      // rsp_demux_017:src0_valid -> rsp_mux_007:sink8_valid
	wire  [136:0] rsp_demux_017_src0_data;                                                                       // rsp_demux_017:src0_data -> rsp_mux_007:sink8_data
	wire          rsp_demux_017_src0_ready;                                                                      // rsp_mux_007:sink8_ready -> rsp_demux_017:src0_ready
	wire   [44:0] rsp_demux_017_src0_channel;                                                                    // rsp_demux_017:src0_channel -> rsp_mux_007:sink8_channel
	wire          rsp_demux_017_src0_startofpacket;                                                              // rsp_demux_017:src0_startofpacket -> rsp_mux_007:sink8_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                // rsp_demux_017:src0_endofpacket -> rsp_mux_007:sink8_endofpacket
	wire          rsp_demux_017_src1_valid;                                                                      // rsp_demux_017:src1_valid -> rsp_mux_008:sink8_valid
	wire  [136:0] rsp_demux_017_src1_data;                                                                       // rsp_demux_017:src1_data -> rsp_mux_008:sink8_data
	wire          rsp_demux_017_src1_ready;                                                                      // rsp_mux_008:sink8_ready -> rsp_demux_017:src1_ready
	wire   [44:0] rsp_demux_017_src1_channel;                                                                    // rsp_demux_017:src1_channel -> rsp_mux_008:sink8_channel
	wire          rsp_demux_017_src1_startofpacket;                                                              // rsp_demux_017:src1_startofpacket -> rsp_mux_008:sink8_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                                // rsp_demux_017:src1_endofpacket -> rsp_mux_008:sink8_endofpacket
	wire          rsp_demux_017_src2_valid;                                                                      // rsp_demux_017:src2_valid -> rsp_mux_009:sink8_valid
	wire  [136:0] rsp_demux_017_src2_data;                                                                       // rsp_demux_017:src2_data -> rsp_mux_009:sink8_data
	wire          rsp_demux_017_src2_ready;                                                                      // rsp_mux_009:sink8_ready -> rsp_demux_017:src2_ready
	wire   [44:0] rsp_demux_017_src2_channel;                                                                    // rsp_demux_017:src2_channel -> rsp_mux_009:sink8_channel
	wire          rsp_demux_017_src2_startofpacket;                                                              // rsp_demux_017:src2_startofpacket -> rsp_mux_009:sink8_startofpacket
	wire          rsp_demux_017_src2_endofpacket;                                                                // rsp_demux_017:src2_endofpacket -> rsp_mux_009:sink8_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                      // rsp_demux_018:src0_valid -> rsp_mux_007:sink9_valid
	wire  [136:0] rsp_demux_018_src0_data;                                                                       // rsp_demux_018:src0_data -> rsp_mux_007:sink9_data
	wire          rsp_demux_018_src0_ready;                                                                      // rsp_mux_007:sink9_ready -> rsp_demux_018:src0_ready
	wire   [44:0] rsp_demux_018_src0_channel;                                                                    // rsp_demux_018:src0_channel -> rsp_mux_007:sink9_channel
	wire          rsp_demux_018_src0_startofpacket;                                                              // rsp_demux_018:src0_startofpacket -> rsp_mux_007:sink9_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                                // rsp_demux_018:src0_endofpacket -> rsp_mux_007:sink9_endofpacket
	wire          rsp_demux_018_src1_valid;                                                                      // rsp_demux_018:src1_valid -> rsp_mux_008:sink9_valid
	wire  [136:0] rsp_demux_018_src1_data;                                                                       // rsp_demux_018:src1_data -> rsp_mux_008:sink9_data
	wire          rsp_demux_018_src1_ready;                                                                      // rsp_mux_008:sink9_ready -> rsp_demux_018:src1_ready
	wire   [44:0] rsp_demux_018_src1_channel;                                                                    // rsp_demux_018:src1_channel -> rsp_mux_008:sink9_channel
	wire          rsp_demux_018_src1_startofpacket;                                                              // rsp_demux_018:src1_startofpacket -> rsp_mux_008:sink9_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                                // rsp_demux_018:src1_endofpacket -> rsp_mux_008:sink9_endofpacket
	wire          rsp_demux_018_src2_valid;                                                                      // rsp_demux_018:src2_valid -> rsp_mux_009:sink9_valid
	wire  [136:0] rsp_demux_018_src2_data;                                                                       // rsp_demux_018:src2_data -> rsp_mux_009:sink9_data
	wire          rsp_demux_018_src2_ready;                                                                      // rsp_mux_009:sink9_ready -> rsp_demux_018:src2_ready
	wire   [44:0] rsp_demux_018_src2_channel;                                                                    // rsp_demux_018:src2_channel -> rsp_mux_009:sink9_channel
	wire          rsp_demux_018_src2_startofpacket;                                                              // rsp_demux_018:src2_startofpacket -> rsp_mux_009:sink9_startofpacket
	wire          rsp_demux_018_src2_endofpacket;                                                                // rsp_demux_018:src2_endofpacket -> rsp_mux_009:sink9_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                      // rsp_demux_019:src0_valid -> rsp_mux_007:sink10_valid
	wire  [136:0] rsp_demux_019_src0_data;                                                                       // rsp_demux_019:src0_data -> rsp_mux_007:sink10_data
	wire          rsp_demux_019_src0_ready;                                                                      // rsp_mux_007:sink10_ready -> rsp_demux_019:src0_ready
	wire   [44:0] rsp_demux_019_src0_channel;                                                                    // rsp_demux_019:src0_channel -> rsp_mux_007:sink10_channel
	wire          rsp_demux_019_src0_startofpacket;                                                              // rsp_demux_019:src0_startofpacket -> rsp_mux_007:sink10_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                                // rsp_demux_019:src0_endofpacket -> rsp_mux_007:sink10_endofpacket
	wire          rsp_demux_019_src1_valid;                                                                      // rsp_demux_019:src1_valid -> rsp_mux_008:sink10_valid
	wire  [136:0] rsp_demux_019_src1_data;                                                                       // rsp_demux_019:src1_data -> rsp_mux_008:sink10_data
	wire          rsp_demux_019_src1_ready;                                                                      // rsp_mux_008:sink10_ready -> rsp_demux_019:src1_ready
	wire   [44:0] rsp_demux_019_src1_channel;                                                                    // rsp_demux_019:src1_channel -> rsp_mux_008:sink10_channel
	wire          rsp_demux_019_src1_startofpacket;                                                              // rsp_demux_019:src1_startofpacket -> rsp_mux_008:sink10_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                                // rsp_demux_019:src1_endofpacket -> rsp_mux_008:sink10_endofpacket
	wire          rsp_demux_019_src2_valid;                                                                      // rsp_demux_019:src2_valid -> rsp_mux_009:sink10_valid
	wire  [136:0] rsp_demux_019_src2_data;                                                                       // rsp_demux_019:src2_data -> rsp_mux_009:sink10_data
	wire          rsp_demux_019_src2_ready;                                                                      // rsp_mux_009:sink10_ready -> rsp_demux_019:src2_ready
	wire   [44:0] rsp_demux_019_src2_channel;                                                                    // rsp_demux_019:src2_channel -> rsp_mux_009:sink10_channel
	wire          rsp_demux_019_src2_startofpacket;                                                              // rsp_demux_019:src2_startofpacket -> rsp_mux_009:sink10_startofpacket
	wire          rsp_demux_019_src2_endofpacket;                                                                // rsp_demux_019:src2_endofpacket -> rsp_mux_009:sink10_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                      // rsp_demux_020:src0_valid -> rsp_mux_007:sink11_valid
	wire  [136:0] rsp_demux_020_src0_data;                                                                       // rsp_demux_020:src0_data -> rsp_mux_007:sink11_data
	wire          rsp_demux_020_src0_ready;                                                                      // rsp_mux_007:sink11_ready -> rsp_demux_020:src0_ready
	wire   [44:0] rsp_demux_020_src0_channel;                                                                    // rsp_demux_020:src0_channel -> rsp_mux_007:sink11_channel
	wire          rsp_demux_020_src0_startofpacket;                                                              // rsp_demux_020:src0_startofpacket -> rsp_mux_007:sink11_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                                // rsp_demux_020:src0_endofpacket -> rsp_mux_007:sink11_endofpacket
	wire          rsp_demux_020_src1_valid;                                                                      // rsp_demux_020:src1_valid -> rsp_mux_008:sink11_valid
	wire  [136:0] rsp_demux_020_src1_data;                                                                       // rsp_demux_020:src1_data -> rsp_mux_008:sink11_data
	wire          rsp_demux_020_src1_ready;                                                                      // rsp_mux_008:sink11_ready -> rsp_demux_020:src1_ready
	wire   [44:0] rsp_demux_020_src1_channel;                                                                    // rsp_demux_020:src1_channel -> rsp_mux_008:sink11_channel
	wire          rsp_demux_020_src1_startofpacket;                                                              // rsp_demux_020:src1_startofpacket -> rsp_mux_008:sink11_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                                // rsp_demux_020:src1_endofpacket -> rsp_mux_008:sink11_endofpacket
	wire          rsp_demux_020_src2_valid;                                                                      // rsp_demux_020:src2_valid -> rsp_mux_009:sink11_valid
	wire  [136:0] rsp_demux_020_src2_data;                                                                       // rsp_demux_020:src2_data -> rsp_mux_009:sink11_data
	wire          rsp_demux_020_src2_ready;                                                                      // rsp_mux_009:sink11_ready -> rsp_demux_020:src2_ready
	wire   [44:0] rsp_demux_020_src2_channel;                                                                    // rsp_demux_020:src2_channel -> rsp_mux_009:sink11_channel
	wire          rsp_demux_020_src2_startofpacket;                                                              // rsp_demux_020:src2_startofpacket -> rsp_mux_009:sink11_startofpacket
	wire          rsp_demux_020_src2_endofpacket;                                                                // rsp_demux_020:src2_endofpacket -> rsp_mux_009:sink11_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                      // rsp_demux_021:src0_valid -> rsp_mux_007:sink12_valid
	wire  [136:0] rsp_demux_021_src0_data;                                                                       // rsp_demux_021:src0_data -> rsp_mux_007:sink12_data
	wire          rsp_demux_021_src0_ready;                                                                      // rsp_mux_007:sink12_ready -> rsp_demux_021:src0_ready
	wire   [44:0] rsp_demux_021_src0_channel;                                                                    // rsp_demux_021:src0_channel -> rsp_mux_007:sink12_channel
	wire          rsp_demux_021_src0_startofpacket;                                                              // rsp_demux_021:src0_startofpacket -> rsp_mux_007:sink12_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                                // rsp_demux_021:src0_endofpacket -> rsp_mux_007:sink12_endofpacket
	wire          rsp_demux_021_src1_valid;                                                                      // rsp_demux_021:src1_valid -> rsp_mux_008:sink12_valid
	wire  [136:0] rsp_demux_021_src1_data;                                                                       // rsp_demux_021:src1_data -> rsp_mux_008:sink12_data
	wire          rsp_demux_021_src1_ready;                                                                      // rsp_mux_008:sink12_ready -> rsp_demux_021:src1_ready
	wire   [44:0] rsp_demux_021_src1_channel;                                                                    // rsp_demux_021:src1_channel -> rsp_mux_008:sink12_channel
	wire          rsp_demux_021_src1_startofpacket;                                                              // rsp_demux_021:src1_startofpacket -> rsp_mux_008:sink12_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                                // rsp_demux_021:src1_endofpacket -> rsp_mux_008:sink12_endofpacket
	wire          rsp_demux_021_src2_valid;                                                                      // rsp_demux_021:src2_valid -> rsp_mux_009:sink12_valid
	wire  [136:0] rsp_demux_021_src2_data;                                                                       // rsp_demux_021:src2_data -> rsp_mux_009:sink12_data
	wire          rsp_demux_021_src2_ready;                                                                      // rsp_mux_009:sink12_ready -> rsp_demux_021:src2_ready
	wire   [44:0] rsp_demux_021_src2_channel;                                                                    // rsp_demux_021:src2_channel -> rsp_mux_009:sink12_channel
	wire          rsp_demux_021_src2_startofpacket;                                                              // rsp_demux_021:src2_startofpacket -> rsp_mux_009:sink12_startofpacket
	wire          rsp_demux_021_src2_endofpacket;                                                                // rsp_demux_021:src2_endofpacket -> rsp_mux_009:sink12_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                      // rsp_demux_022:src0_valid -> rsp_mux_007:sink13_valid
	wire  [136:0] rsp_demux_022_src0_data;                                                                       // rsp_demux_022:src0_data -> rsp_mux_007:sink13_data
	wire          rsp_demux_022_src0_ready;                                                                      // rsp_mux_007:sink13_ready -> rsp_demux_022:src0_ready
	wire   [44:0] rsp_demux_022_src0_channel;                                                                    // rsp_demux_022:src0_channel -> rsp_mux_007:sink13_channel
	wire          rsp_demux_022_src0_startofpacket;                                                              // rsp_demux_022:src0_startofpacket -> rsp_mux_007:sink13_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                                // rsp_demux_022:src0_endofpacket -> rsp_mux_007:sink13_endofpacket
	wire          rsp_demux_022_src1_valid;                                                                      // rsp_demux_022:src1_valid -> rsp_mux_008:sink13_valid
	wire  [136:0] rsp_demux_022_src1_data;                                                                       // rsp_demux_022:src1_data -> rsp_mux_008:sink13_data
	wire          rsp_demux_022_src1_ready;                                                                      // rsp_mux_008:sink13_ready -> rsp_demux_022:src1_ready
	wire   [44:0] rsp_demux_022_src1_channel;                                                                    // rsp_demux_022:src1_channel -> rsp_mux_008:sink13_channel
	wire          rsp_demux_022_src1_startofpacket;                                                              // rsp_demux_022:src1_startofpacket -> rsp_mux_008:sink13_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                                // rsp_demux_022:src1_endofpacket -> rsp_mux_008:sink13_endofpacket
	wire          rsp_demux_022_src2_valid;                                                                      // rsp_demux_022:src2_valid -> rsp_mux_009:sink13_valid
	wire  [136:0] rsp_demux_022_src2_data;                                                                       // rsp_demux_022:src2_data -> rsp_mux_009:sink13_data
	wire          rsp_demux_022_src2_ready;                                                                      // rsp_mux_009:sink13_ready -> rsp_demux_022:src2_ready
	wire   [44:0] rsp_demux_022_src2_channel;                                                                    // rsp_demux_022:src2_channel -> rsp_mux_009:sink13_channel
	wire          rsp_demux_022_src2_startofpacket;                                                              // rsp_demux_022:src2_startofpacket -> rsp_mux_009:sink13_startofpacket
	wire          rsp_demux_022_src2_endofpacket;                                                                // rsp_demux_022:src2_endofpacket -> rsp_mux_009:sink13_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                      // rsp_demux_023:src0_valid -> rsp_mux_007:sink14_valid
	wire  [136:0] rsp_demux_023_src0_data;                                                                       // rsp_demux_023:src0_data -> rsp_mux_007:sink14_data
	wire          rsp_demux_023_src0_ready;                                                                      // rsp_mux_007:sink14_ready -> rsp_demux_023:src0_ready
	wire   [44:0] rsp_demux_023_src0_channel;                                                                    // rsp_demux_023:src0_channel -> rsp_mux_007:sink14_channel
	wire          rsp_demux_023_src0_startofpacket;                                                              // rsp_demux_023:src0_startofpacket -> rsp_mux_007:sink14_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                                // rsp_demux_023:src0_endofpacket -> rsp_mux_007:sink14_endofpacket
	wire          rsp_demux_023_src1_valid;                                                                      // rsp_demux_023:src1_valid -> rsp_mux_008:sink14_valid
	wire  [136:0] rsp_demux_023_src1_data;                                                                       // rsp_demux_023:src1_data -> rsp_mux_008:sink14_data
	wire          rsp_demux_023_src1_ready;                                                                      // rsp_mux_008:sink14_ready -> rsp_demux_023:src1_ready
	wire   [44:0] rsp_demux_023_src1_channel;                                                                    // rsp_demux_023:src1_channel -> rsp_mux_008:sink14_channel
	wire          rsp_demux_023_src1_startofpacket;                                                              // rsp_demux_023:src1_startofpacket -> rsp_mux_008:sink14_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                                // rsp_demux_023:src1_endofpacket -> rsp_mux_008:sink14_endofpacket
	wire          rsp_demux_023_src2_valid;                                                                      // rsp_demux_023:src2_valid -> rsp_mux_009:sink14_valid
	wire  [136:0] rsp_demux_023_src2_data;                                                                       // rsp_demux_023:src2_data -> rsp_mux_009:sink14_data
	wire          rsp_demux_023_src2_ready;                                                                      // rsp_mux_009:sink14_ready -> rsp_demux_023:src2_ready
	wire   [44:0] rsp_demux_023_src2_channel;                                                                    // rsp_demux_023:src2_channel -> rsp_mux_009:sink14_channel
	wire          rsp_demux_023_src2_startofpacket;                                                              // rsp_demux_023:src2_startofpacket -> rsp_mux_009:sink14_startofpacket
	wire          rsp_demux_023_src2_endofpacket;                                                                // rsp_demux_023:src2_endofpacket -> rsp_mux_009:sink14_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                      // rsp_demux_024:src0_valid -> rsp_mux_007:sink15_valid
	wire  [136:0] rsp_demux_024_src0_data;                                                                       // rsp_demux_024:src0_data -> rsp_mux_007:sink15_data
	wire          rsp_demux_024_src0_ready;                                                                      // rsp_mux_007:sink15_ready -> rsp_demux_024:src0_ready
	wire   [44:0] rsp_demux_024_src0_channel;                                                                    // rsp_demux_024:src0_channel -> rsp_mux_007:sink15_channel
	wire          rsp_demux_024_src0_startofpacket;                                                              // rsp_demux_024:src0_startofpacket -> rsp_mux_007:sink15_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                                // rsp_demux_024:src0_endofpacket -> rsp_mux_007:sink15_endofpacket
	wire          rsp_demux_024_src1_valid;                                                                      // rsp_demux_024:src1_valid -> rsp_mux_008:sink15_valid
	wire  [136:0] rsp_demux_024_src1_data;                                                                       // rsp_demux_024:src1_data -> rsp_mux_008:sink15_data
	wire          rsp_demux_024_src1_ready;                                                                      // rsp_mux_008:sink15_ready -> rsp_demux_024:src1_ready
	wire   [44:0] rsp_demux_024_src1_channel;                                                                    // rsp_demux_024:src1_channel -> rsp_mux_008:sink15_channel
	wire          rsp_demux_024_src1_startofpacket;                                                              // rsp_demux_024:src1_startofpacket -> rsp_mux_008:sink15_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                                // rsp_demux_024:src1_endofpacket -> rsp_mux_008:sink15_endofpacket
	wire          rsp_demux_024_src2_valid;                                                                      // rsp_demux_024:src2_valid -> rsp_mux_009:sink15_valid
	wire  [136:0] rsp_demux_024_src2_data;                                                                       // rsp_demux_024:src2_data -> rsp_mux_009:sink15_data
	wire          rsp_demux_024_src2_ready;                                                                      // rsp_mux_009:sink15_ready -> rsp_demux_024:src2_ready
	wire   [44:0] rsp_demux_024_src2_channel;                                                                    // rsp_demux_024:src2_channel -> rsp_mux_009:sink15_channel
	wire          rsp_demux_024_src2_startofpacket;                                                              // rsp_demux_024:src2_startofpacket -> rsp_mux_009:sink15_startofpacket
	wire          rsp_demux_024_src2_endofpacket;                                                                // rsp_demux_024:src2_endofpacket -> rsp_mux_009:sink15_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                      // rsp_demux_025:src0_valid -> rsp_mux_007:sink16_valid
	wire  [136:0] rsp_demux_025_src0_data;                                                                       // rsp_demux_025:src0_data -> rsp_mux_007:sink16_data
	wire          rsp_demux_025_src0_ready;                                                                      // rsp_mux_007:sink16_ready -> rsp_demux_025:src0_ready
	wire   [44:0] rsp_demux_025_src0_channel;                                                                    // rsp_demux_025:src0_channel -> rsp_mux_007:sink16_channel
	wire          rsp_demux_025_src0_startofpacket;                                                              // rsp_demux_025:src0_startofpacket -> rsp_mux_007:sink16_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                                // rsp_demux_025:src0_endofpacket -> rsp_mux_007:sink16_endofpacket
	wire          rsp_demux_025_src1_valid;                                                                      // rsp_demux_025:src1_valid -> rsp_mux_008:sink16_valid
	wire  [136:0] rsp_demux_025_src1_data;                                                                       // rsp_demux_025:src1_data -> rsp_mux_008:sink16_data
	wire          rsp_demux_025_src1_ready;                                                                      // rsp_mux_008:sink16_ready -> rsp_demux_025:src1_ready
	wire   [44:0] rsp_demux_025_src1_channel;                                                                    // rsp_demux_025:src1_channel -> rsp_mux_008:sink16_channel
	wire          rsp_demux_025_src1_startofpacket;                                                              // rsp_demux_025:src1_startofpacket -> rsp_mux_008:sink16_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                                                // rsp_demux_025:src1_endofpacket -> rsp_mux_008:sink16_endofpacket
	wire          rsp_demux_025_src2_valid;                                                                      // rsp_demux_025:src2_valid -> rsp_mux_009:sink16_valid
	wire  [136:0] rsp_demux_025_src2_data;                                                                       // rsp_demux_025:src2_data -> rsp_mux_009:sink16_data
	wire          rsp_demux_025_src2_ready;                                                                      // rsp_mux_009:sink16_ready -> rsp_demux_025:src2_ready
	wire   [44:0] rsp_demux_025_src2_channel;                                                                    // rsp_demux_025:src2_channel -> rsp_mux_009:sink16_channel
	wire          rsp_demux_025_src2_startofpacket;                                                              // rsp_demux_025:src2_startofpacket -> rsp_mux_009:sink16_startofpacket
	wire          rsp_demux_025_src2_endofpacket;                                                                // rsp_demux_025:src2_endofpacket -> rsp_mux_009:sink16_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                      // rsp_demux_026:src0_valid -> rsp_mux_007:sink17_valid
	wire  [136:0] rsp_demux_026_src0_data;                                                                       // rsp_demux_026:src0_data -> rsp_mux_007:sink17_data
	wire          rsp_demux_026_src0_ready;                                                                      // rsp_mux_007:sink17_ready -> rsp_demux_026:src0_ready
	wire   [44:0] rsp_demux_026_src0_channel;                                                                    // rsp_demux_026:src0_channel -> rsp_mux_007:sink17_channel
	wire          rsp_demux_026_src0_startofpacket;                                                              // rsp_demux_026:src0_startofpacket -> rsp_mux_007:sink17_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                                // rsp_demux_026:src0_endofpacket -> rsp_mux_007:sink17_endofpacket
	wire          rsp_demux_026_src1_valid;                                                                      // rsp_demux_026:src1_valid -> rsp_mux_008:sink17_valid
	wire  [136:0] rsp_demux_026_src1_data;                                                                       // rsp_demux_026:src1_data -> rsp_mux_008:sink17_data
	wire          rsp_demux_026_src1_ready;                                                                      // rsp_mux_008:sink17_ready -> rsp_demux_026:src1_ready
	wire   [44:0] rsp_demux_026_src1_channel;                                                                    // rsp_demux_026:src1_channel -> rsp_mux_008:sink17_channel
	wire          rsp_demux_026_src1_startofpacket;                                                              // rsp_demux_026:src1_startofpacket -> rsp_mux_008:sink17_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                                                // rsp_demux_026:src1_endofpacket -> rsp_mux_008:sink17_endofpacket
	wire          rsp_demux_026_src2_valid;                                                                      // rsp_demux_026:src2_valid -> rsp_mux_009:sink17_valid
	wire  [136:0] rsp_demux_026_src2_data;                                                                       // rsp_demux_026:src2_data -> rsp_mux_009:sink17_data
	wire          rsp_demux_026_src2_ready;                                                                      // rsp_mux_009:sink17_ready -> rsp_demux_026:src2_ready
	wire   [44:0] rsp_demux_026_src2_channel;                                                                    // rsp_demux_026:src2_channel -> rsp_mux_009:sink17_channel
	wire          rsp_demux_026_src2_startofpacket;                                                              // rsp_demux_026:src2_startofpacket -> rsp_mux_009:sink17_startofpacket
	wire          rsp_demux_026_src2_endofpacket;                                                                // rsp_demux_026:src2_endofpacket -> rsp_mux_009:sink17_endofpacket
	wire          rsp_demux_027_src0_valid;                                                                      // rsp_demux_027:src0_valid -> rsp_mux_007:sink18_valid
	wire  [136:0] rsp_demux_027_src0_data;                                                                       // rsp_demux_027:src0_data -> rsp_mux_007:sink18_data
	wire          rsp_demux_027_src0_ready;                                                                      // rsp_mux_007:sink18_ready -> rsp_demux_027:src0_ready
	wire   [44:0] rsp_demux_027_src0_channel;                                                                    // rsp_demux_027:src0_channel -> rsp_mux_007:sink18_channel
	wire          rsp_demux_027_src0_startofpacket;                                                              // rsp_demux_027:src0_startofpacket -> rsp_mux_007:sink18_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                                // rsp_demux_027:src0_endofpacket -> rsp_mux_007:sink18_endofpacket
	wire          rsp_demux_027_src1_valid;                                                                      // rsp_demux_027:src1_valid -> rsp_mux_008:sink18_valid
	wire  [136:0] rsp_demux_027_src1_data;                                                                       // rsp_demux_027:src1_data -> rsp_mux_008:sink18_data
	wire          rsp_demux_027_src1_ready;                                                                      // rsp_mux_008:sink18_ready -> rsp_demux_027:src1_ready
	wire   [44:0] rsp_demux_027_src1_channel;                                                                    // rsp_demux_027:src1_channel -> rsp_mux_008:sink18_channel
	wire          rsp_demux_027_src1_startofpacket;                                                              // rsp_demux_027:src1_startofpacket -> rsp_mux_008:sink18_startofpacket
	wire          rsp_demux_027_src1_endofpacket;                                                                // rsp_demux_027:src1_endofpacket -> rsp_mux_008:sink18_endofpacket
	wire          rsp_demux_027_src2_valid;                                                                      // rsp_demux_027:src2_valid -> rsp_mux_009:sink18_valid
	wire  [136:0] rsp_demux_027_src2_data;                                                                       // rsp_demux_027:src2_data -> rsp_mux_009:sink18_data
	wire          rsp_demux_027_src2_ready;                                                                      // rsp_mux_009:sink18_ready -> rsp_demux_027:src2_ready
	wire   [44:0] rsp_demux_027_src2_channel;                                                                    // rsp_demux_027:src2_channel -> rsp_mux_009:sink18_channel
	wire          rsp_demux_027_src2_startofpacket;                                                              // rsp_demux_027:src2_startofpacket -> rsp_mux_009:sink18_startofpacket
	wire          rsp_demux_027_src2_endofpacket;                                                                // rsp_demux_027:src2_endofpacket -> rsp_mux_009:sink18_endofpacket
	wire          rsp_demux_028_src0_valid;                                                                      // rsp_demux_028:src0_valid -> rsp_mux_007:sink19_valid
	wire  [136:0] rsp_demux_028_src0_data;                                                                       // rsp_demux_028:src0_data -> rsp_mux_007:sink19_data
	wire          rsp_demux_028_src0_ready;                                                                      // rsp_mux_007:sink19_ready -> rsp_demux_028:src0_ready
	wire   [44:0] rsp_demux_028_src0_channel;                                                                    // rsp_demux_028:src0_channel -> rsp_mux_007:sink19_channel
	wire          rsp_demux_028_src0_startofpacket;                                                              // rsp_demux_028:src0_startofpacket -> rsp_mux_007:sink19_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                                // rsp_demux_028:src0_endofpacket -> rsp_mux_007:sink19_endofpacket
	wire          rsp_demux_028_src1_valid;                                                                      // rsp_demux_028:src1_valid -> rsp_mux_008:sink19_valid
	wire  [136:0] rsp_demux_028_src1_data;                                                                       // rsp_demux_028:src1_data -> rsp_mux_008:sink19_data
	wire          rsp_demux_028_src1_ready;                                                                      // rsp_mux_008:sink19_ready -> rsp_demux_028:src1_ready
	wire   [44:0] rsp_demux_028_src1_channel;                                                                    // rsp_demux_028:src1_channel -> rsp_mux_008:sink19_channel
	wire          rsp_demux_028_src1_startofpacket;                                                              // rsp_demux_028:src1_startofpacket -> rsp_mux_008:sink19_startofpacket
	wire          rsp_demux_028_src1_endofpacket;                                                                // rsp_demux_028:src1_endofpacket -> rsp_mux_008:sink19_endofpacket
	wire          rsp_demux_028_src2_valid;                                                                      // rsp_demux_028:src2_valid -> rsp_mux_009:sink19_valid
	wire  [136:0] rsp_demux_028_src2_data;                                                                       // rsp_demux_028:src2_data -> rsp_mux_009:sink19_data
	wire          rsp_demux_028_src2_ready;                                                                      // rsp_mux_009:sink19_ready -> rsp_demux_028:src2_ready
	wire   [44:0] rsp_demux_028_src2_channel;                                                                    // rsp_demux_028:src2_channel -> rsp_mux_009:sink19_channel
	wire          rsp_demux_028_src2_startofpacket;                                                              // rsp_demux_028:src2_startofpacket -> rsp_mux_009:sink19_startofpacket
	wire          rsp_demux_028_src2_endofpacket;                                                                // rsp_demux_028:src2_endofpacket -> rsp_mux_009:sink19_endofpacket
	wire          rsp_demux_028_src3_valid;                                                                      // rsp_demux_028:src3_valid -> rsp_mux_011:sink0_valid
	wire  [136:0] rsp_demux_028_src3_data;                                                                       // rsp_demux_028:src3_data -> rsp_mux_011:sink0_data
	wire          rsp_demux_028_src3_ready;                                                                      // rsp_mux_011:sink0_ready -> rsp_demux_028:src3_ready
	wire   [44:0] rsp_demux_028_src3_channel;                                                                    // rsp_demux_028:src3_channel -> rsp_mux_011:sink0_channel
	wire          rsp_demux_028_src3_startofpacket;                                                              // rsp_demux_028:src3_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          rsp_demux_028_src3_endofpacket;                                                                // rsp_demux_028:src3_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_029_src0_valid;                                                                      // rsp_demux_029:src0_valid -> rsp_mux_007:sink20_valid
	wire  [136:0] rsp_demux_029_src0_data;                                                                       // rsp_demux_029:src0_data -> rsp_mux_007:sink20_data
	wire          rsp_demux_029_src0_ready;                                                                      // rsp_mux_007:sink20_ready -> rsp_demux_029:src0_ready
	wire   [44:0] rsp_demux_029_src0_channel;                                                                    // rsp_demux_029:src0_channel -> rsp_mux_007:sink20_channel
	wire          rsp_demux_029_src0_startofpacket;                                                              // rsp_demux_029:src0_startofpacket -> rsp_mux_007:sink20_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                                // rsp_demux_029:src0_endofpacket -> rsp_mux_007:sink20_endofpacket
	wire          rsp_demux_029_src1_valid;                                                                      // rsp_demux_029:src1_valid -> rsp_mux_008:sink20_valid
	wire  [136:0] rsp_demux_029_src1_data;                                                                       // rsp_demux_029:src1_data -> rsp_mux_008:sink20_data
	wire          rsp_demux_029_src1_ready;                                                                      // rsp_mux_008:sink20_ready -> rsp_demux_029:src1_ready
	wire   [44:0] rsp_demux_029_src1_channel;                                                                    // rsp_demux_029:src1_channel -> rsp_mux_008:sink20_channel
	wire          rsp_demux_029_src1_startofpacket;                                                              // rsp_demux_029:src1_startofpacket -> rsp_mux_008:sink20_startofpacket
	wire          rsp_demux_029_src1_endofpacket;                                                                // rsp_demux_029:src1_endofpacket -> rsp_mux_008:sink20_endofpacket
	wire          rsp_demux_029_src2_valid;                                                                      // rsp_demux_029:src2_valid -> rsp_mux_009:sink20_valid
	wire  [136:0] rsp_demux_029_src2_data;                                                                       // rsp_demux_029:src2_data -> rsp_mux_009:sink20_data
	wire          rsp_demux_029_src2_ready;                                                                      // rsp_mux_009:sink20_ready -> rsp_demux_029:src2_ready
	wire   [44:0] rsp_demux_029_src2_channel;                                                                    // rsp_demux_029:src2_channel -> rsp_mux_009:sink20_channel
	wire          rsp_demux_029_src2_startofpacket;                                                              // rsp_demux_029:src2_startofpacket -> rsp_mux_009:sink20_startofpacket
	wire          rsp_demux_029_src2_endofpacket;                                                                // rsp_demux_029:src2_endofpacket -> rsp_mux_009:sink20_endofpacket
	wire          rsp_demux_029_src3_valid;                                                                      // rsp_demux_029:src3_valid -> rsp_mux_010:sink0_valid
	wire  [136:0] rsp_demux_029_src3_data;                                                                       // rsp_demux_029:src3_data -> rsp_mux_010:sink0_data
	wire          rsp_demux_029_src3_ready;                                                                      // rsp_mux_010:sink0_ready -> rsp_demux_029:src3_ready
	wire   [44:0] rsp_demux_029_src3_channel;                                                                    // rsp_demux_029:src3_channel -> rsp_mux_010:sink0_channel
	wire          rsp_demux_029_src3_startofpacket;                                                              // rsp_demux_029:src3_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          rsp_demux_029_src3_endofpacket;                                                                // rsp_demux_029:src3_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_030_src0_valid;                                                                      // rsp_demux_030:src0_valid -> rsp_mux_007:sink21_valid
	wire  [136:0] rsp_demux_030_src0_data;                                                                       // rsp_demux_030:src0_data -> rsp_mux_007:sink21_data
	wire          rsp_demux_030_src0_ready;                                                                      // rsp_mux_007:sink21_ready -> rsp_demux_030:src0_ready
	wire   [44:0] rsp_demux_030_src0_channel;                                                                    // rsp_demux_030:src0_channel -> rsp_mux_007:sink21_channel
	wire          rsp_demux_030_src0_startofpacket;                                                              // rsp_demux_030:src0_startofpacket -> rsp_mux_007:sink21_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                                // rsp_demux_030:src0_endofpacket -> rsp_mux_007:sink21_endofpacket
	wire          rsp_demux_030_src1_valid;                                                                      // rsp_demux_030:src1_valid -> rsp_mux_008:sink21_valid
	wire  [136:0] rsp_demux_030_src1_data;                                                                       // rsp_demux_030:src1_data -> rsp_mux_008:sink21_data
	wire          rsp_demux_030_src1_ready;                                                                      // rsp_mux_008:sink21_ready -> rsp_demux_030:src1_ready
	wire   [44:0] rsp_demux_030_src1_channel;                                                                    // rsp_demux_030:src1_channel -> rsp_mux_008:sink21_channel
	wire          rsp_demux_030_src1_startofpacket;                                                              // rsp_demux_030:src1_startofpacket -> rsp_mux_008:sink21_startofpacket
	wire          rsp_demux_030_src1_endofpacket;                                                                // rsp_demux_030:src1_endofpacket -> rsp_mux_008:sink21_endofpacket
	wire          rsp_demux_030_src2_valid;                                                                      // rsp_demux_030:src2_valid -> rsp_mux_009:sink21_valid
	wire  [136:0] rsp_demux_030_src2_data;                                                                       // rsp_demux_030:src2_data -> rsp_mux_009:sink21_data
	wire          rsp_demux_030_src2_ready;                                                                      // rsp_mux_009:sink21_ready -> rsp_demux_030:src2_ready
	wire   [44:0] rsp_demux_030_src2_channel;                                                                    // rsp_demux_030:src2_channel -> rsp_mux_009:sink21_channel
	wire          rsp_demux_030_src2_startofpacket;                                                              // rsp_demux_030:src2_startofpacket -> rsp_mux_009:sink21_startofpacket
	wire          rsp_demux_030_src2_endofpacket;                                                                // rsp_demux_030:src2_endofpacket -> rsp_mux_009:sink21_endofpacket
	wire          rsp_demux_031_src0_valid;                                                                      // rsp_demux_031:src0_valid -> rsp_mux_007:sink22_valid
	wire  [136:0] rsp_demux_031_src0_data;                                                                       // rsp_demux_031:src0_data -> rsp_mux_007:sink22_data
	wire          rsp_demux_031_src0_ready;                                                                      // rsp_mux_007:sink22_ready -> rsp_demux_031:src0_ready
	wire   [44:0] rsp_demux_031_src0_channel;                                                                    // rsp_demux_031:src0_channel -> rsp_mux_007:sink22_channel
	wire          rsp_demux_031_src0_startofpacket;                                                              // rsp_demux_031:src0_startofpacket -> rsp_mux_007:sink22_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                                // rsp_demux_031:src0_endofpacket -> rsp_mux_007:sink22_endofpacket
	wire          rsp_demux_031_src1_valid;                                                                      // rsp_demux_031:src1_valid -> rsp_mux_008:sink22_valid
	wire  [136:0] rsp_demux_031_src1_data;                                                                       // rsp_demux_031:src1_data -> rsp_mux_008:sink22_data
	wire          rsp_demux_031_src1_ready;                                                                      // rsp_mux_008:sink22_ready -> rsp_demux_031:src1_ready
	wire   [44:0] rsp_demux_031_src1_channel;                                                                    // rsp_demux_031:src1_channel -> rsp_mux_008:sink22_channel
	wire          rsp_demux_031_src1_startofpacket;                                                              // rsp_demux_031:src1_startofpacket -> rsp_mux_008:sink22_startofpacket
	wire          rsp_demux_031_src1_endofpacket;                                                                // rsp_demux_031:src1_endofpacket -> rsp_mux_008:sink22_endofpacket
	wire          rsp_demux_031_src2_valid;                                                                      // rsp_demux_031:src2_valid -> rsp_mux_009:sink22_valid
	wire  [136:0] rsp_demux_031_src2_data;                                                                       // rsp_demux_031:src2_data -> rsp_mux_009:sink22_data
	wire          rsp_demux_031_src2_ready;                                                                      // rsp_mux_009:sink22_ready -> rsp_demux_031:src2_ready
	wire   [44:0] rsp_demux_031_src2_channel;                                                                    // rsp_demux_031:src2_channel -> rsp_mux_009:sink22_channel
	wire          rsp_demux_031_src2_startofpacket;                                                              // rsp_demux_031:src2_startofpacket -> rsp_mux_009:sink22_startofpacket
	wire          rsp_demux_031_src2_endofpacket;                                                                // rsp_demux_031:src2_endofpacket -> rsp_mux_009:sink22_endofpacket
	wire          rsp_demux_032_src0_valid;                                                                      // rsp_demux_032:src0_valid -> rsp_mux_007:sink23_valid
	wire  [136:0] rsp_demux_032_src0_data;                                                                       // rsp_demux_032:src0_data -> rsp_mux_007:sink23_data
	wire          rsp_demux_032_src0_ready;                                                                      // rsp_mux_007:sink23_ready -> rsp_demux_032:src0_ready
	wire   [44:0] rsp_demux_032_src0_channel;                                                                    // rsp_demux_032:src0_channel -> rsp_mux_007:sink23_channel
	wire          rsp_demux_032_src0_startofpacket;                                                              // rsp_demux_032:src0_startofpacket -> rsp_mux_007:sink23_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                                // rsp_demux_032:src0_endofpacket -> rsp_mux_007:sink23_endofpacket
	wire          rsp_demux_032_src1_valid;                                                                      // rsp_demux_032:src1_valid -> rsp_mux_008:sink23_valid
	wire  [136:0] rsp_demux_032_src1_data;                                                                       // rsp_demux_032:src1_data -> rsp_mux_008:sink23_data
	wire          rsp_demux_032_src1_ready;                                                                      // rsp_mux_008:sink23_ready -> rsp_demux_032:src1_ready
	wire   [44:0] rsp_demux_032_src1_channel;                                                                    // rsp_demux_032:src1_channel -> rsp_mux_008:sink23_channel
	wire          rsp_demux_032_src1_startofpacket;                                                              // rsp_demux_032:src1_startofpacket -> rsp_mux_008:sink23_startofpacket
	wire          rsp_demux_032_src1_endofpacket;                                                                // rsp_demux_032:src1_endofpacket -> rsp_mux_008:sink23_endofpacket
	wire          rsp_demux_032_src2_valid;                                                                      // rsp_demux_032:src2_valid -> rsp_mux_009:sink23_valid
	wire  [136:0] rsp_demux_032_src2_data;                                                                       // rsp_demux_032:src2_data -> rsp_mux_009:sink23_data
	wire          rsp_demux_032_src2_ready;                                                                      // rsp_mux_009:sink23_ready -> rsp_demux_032:src2_ready
	wire   [44:0] rsp_demux_032_src2_channel;                                                                    // rsp_demux_032:src2_channel -> rsp_mux_009:sink23_channel
	wire          rsp_demux_032_src2_startofpacket;                                                              // rsp_demux_032:src2_startofpacket -> rsp_mux_009:sink23_startofpacket
	wire          rsp_demux_032_src2_endofpacket;                                                                // rsp_demux_032:src2_endofpacket -> rsp_mux_009:sink23_endofpacket
	wire          rsp_demux_033_src0_valid;                                                                      // rsp_demux_033:src0_valid -> rsp_mux_007:sink24_valid
	wire  [136:0] rsp_demux_033_src0_data;                                                                       // rsp_demux_033:src0_data -> rsp_mux_007:sink24_data
	wire          rsp_demux_033_src0_ready;                                                                      // rsp_mux_007:sink24_ready -> rsp_demux_033:src0_ready
	wire   [44:0] rsp_demux_033_src0_channel;                                                                    // rsp_demux_033:src0_channel -> rsp_mux_007:sink24_channel
	wire          rsp_demux_033_src0_startofpacket;                                                              // rsp_demux_033:src0_startofpacket -> rsp_mux_007:sink24_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                                // rsp_demux_033:src0_endofpacket -> rsp_mux_007:sink24_endofpacket
	wire          rsp_demux_033_src1_valid;                                                                      // rsp_demux_033:src1_valid -> rsp_mux_008:sink24_valid
	wire  [136:0] rsp_demux_033_src1_data;                                                                       // rsp_demux_033:src1_data -> rsp_mux_008:sink24_data
	wire          rsp_demux_033_src1_ready;                                                                      // rsp_mux_008:sink24_ready -> rsp_demux_033:src1_ready
	wire   [44:0] rsp_demux_033_src1_channel;                                                                    // rsp_demux_033:src1_channel -> rsp_mux_008:sink24_channel
	wire          rsp_demux_033_src1_startofpacket;                                                              // rsp_demux_033:src1_startofpacket -> rsp_mux_008:sink24_startofpacket
	wire          rsp_demux_033_src1_endofpacket;                                                                // rsp_demux_033:src1_endofpacket -> rsp_mux_008:sink24_endofpacket
	wire          rsp_demux_033_src2_valid;                                                                      // rsp_demux_033:src2_valid -> rsp_mux_009:sink24_valid
	wire  [136:0] rsp_demux_033_src2_data;                                                                       // rsp_demux_033:src2_data -> rsp_mux_009:sink24_data
	wire          rsp_demux_033_src2_ready;                                                                      // rsp_mux_009:sink24_ready -> rsp_demux_033:src2_ready
	wire   [44:0] rsp_demux_033_src2_channel;                                                                    // rsp_demux_033:src2_channel -> rsp_mux_009:sink24_channel
	wire          rsp_demux_033_src2_startofpacket;                                                              // rsp_demux_033:src2_startofpacket -> rsp_mux_009:sink24_startofpacket
	wire          rsp_demux_033_src2_endofpacket;                                                                // rsp_demux_033:src2_endofpacket -> rsp_mux_009:sink24_endofpacket
	wire          rsp_demux_034_src0_valid;                                                                      // rsp_demux_034:src0_valid -> rsp_mux_007:sink25_valid
	wire  [136:0] rsp_demux_034_src0_data;                                                                       // rsp_demux_034:src0_data -> rsp_mux_007:sink25_data
	wire          rsp_demux_034_src0_ready;                                                                      // rsp_mux_007:sink25_ready -> rsp_demux_034:src0_ready
	wire   [44:0] rsp_demux_034_src0_channel;                                                                    // rsp_demux_034:src0_channel -> rsp_mux_007:sink25_channel
	wire          rsp_demux_034_src0_startofpacket;                                                              // rsp_demux_034:src0_startofpacket -> rsp_mux_007:sink25_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                                // rsp_demux_034:src0_endofpacket -> rsp_mux_007:sink25_endofpacket
	wire          rsp_demux_034_src1_valid;                                                                      // rsp_demux_034:src1_valid -> rsp_mux_008:sink25_valid
	wire  [136:0] rsp_demux_034_src1_data;                                                                       // rsp_demux_034:src1_data -> rsp_mux_008:sink25_data
	wire          rsp_demux_034_src1_ready;                                                                      // rsp_mux_008:sink25_ready -> rsp_demux_034:src1_ready
	wire   [44:0] rsp_demux_034_src1_channel;                                                                    // rsp_demux_034:src1_channel -> rsp_mux_008:sink25_channel
	wire          rsp_demux_034_src1_startofpacket;                                                              // rsp_demux_034:src1_startofpacket -> rsp_mux_008:sink25_startofpacket
	wire          rsp_demux_034_src1_endofpacket;                                                                // rsp_demux_034:src1_endofpacket -> rsp_mux_008:sink25_endofpacket
	wire          rsp_demux_034_src2_valid;                                                                      // rsp_demux_034:src2_valid -> rsp_mux_009:sink25_valid
	wire  [136:0] rsp_demux_034_src2_data;                                                                       // rsp_demux_034:src2_data -> rsp_mux_009:sink25_data
	wire          rsp_demux_034_src2_ready;                                                                      // rsp_mux_009:sink25_ready -> rsp_demux_034:src2_ready
	wire   [44:0] rsp_demux_034_src2_channel;                                                                    // rsp_demux_034:src2_channel -> rsp_mux_009:sink25_channel
	wire          rsp_demux_034_src2_startofpacket;                                                              // rsp_demux_034:src2_startofpacket -> rsp_mux_009:sink25_startofpacket
	wire          rsp_demux_034_src2_endofpacket;                                                                // rsp_demux_034:src2_endofpacket -> rsp_mux_009:sink25_endofpacket
	wire          rsp_demux_035_src0_valid;                                                                      // rsp_demux_035:src0_valid -> rsp_mux_007:sink26_valid
	wire  [136:0] rsp_demux_035_src0_data;                                                                       // rsp_demux_035:src0_data -> rsp_mux_007:sink26_data
	wire          rsp_demux_035_src0_ready;                                                                      // rsp_mux_007:sink26_ready -> rsp_demux_035:src0_ready
	wire   [44:0] rsp_demux_035_src0_channel;                                                                    // rsp_demux_035:src0_channel -> rsp_mux_007:sink26_channel
	wire          rsp_demux_035_src0_startofpacket;                                                              // rsp_demux_035:src0_startofpacket -> rsp_mux_007:sink26_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                                // rsp_demux_035:src0_endofpacket -> rsp_mux_007:sink26_endofpacket
	wire          rsp_demux_035_src1_valid;                                                                      // rsp_demux_035:src1_valid -> rsp_mux_008:sink26_valid
	wire  [136:0] rsp_demux_035_src1_data;                                                                       // rsp_demux_035:src1_data -> rsp_mux_008:sink26_data
	wire          rsp_demux_035_src1_ready;                                                                      // rsp_mux_008:sink26_ready -> rsp_demux_035:src1_ready
	wire   [44:0] rsp_demux_035_src1_channel;                                                                    // rsp_demux_035:src1_channel -> rsp_mux_008:sink26_channel
	wire          rsp_demux_035_src1_startofpacket;                                                              // rsp_demux_035:src1_startofpacket -> rsp_mux_008:sink26_startofpacket
	wire          rsp_demux_035_src1_endofpacket;                                                                // rsp_demux_035:src1_endofpacket -> rsp_mux_008:sink26_endofpacket
	wire          rsp_demux_035_src2_valid;                                                                      // rsp_demux_035:src2_valid -> rsp_mux_009:sink26_valid
	wire  [136:0] rsp_demux_035_src2_data;                                                                       // rsp_demux_035:src2_data -> rsp_mux_009:sink26_data
	wire          rsp_demux_035_src2_ready;                                                                      // rsp_mux_009:sink26_ready -> rsp_demux_035:src2_ready
	wire   [44:0] rsp_demux_035_src2_channel;                                                                    // rsp_demux_035:src2_channel -> rsp_mux_009:sink26_channel
	wire          rsp_demux_035_src2_startofpacket;                                                              // rsp_demux_035:src2_startofpacket -> rsp_mux_009:sink26_startofpacket
	wire          rsp_demux_035_src2_endofpacket;                                                                // rsp_demux_035:src2_endofpacket -> rsp_mux_009:sink26_endofpacket
	wire          rsp_demux_036_src0_valid;                                                                      // rsp_demux_036:src0_valid -> rsp_mux_007:sink27_valid
	wire  [136:0] rsp_demux_036_src0_data;                                                                       // rsp_demux_036:src0_data -> rsp_mux_007:sink27_data
	wire          rsp_demux_036_src0_ready;                                                                      // rsp_mux_007:sink27_ready -> rsp_demux_036:src0_ready
	wire   [44:0] rsp_demux_036_src0_channel;                                                                    // rsp_demux_036:src0_channel -> rsp_mux_007:sink27_channel
	wire          rsp_demux_036_src0_startofpacket;                                                              // rsp_demux_036:src0_startofpacket -> rsp_mux_007:sink27_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                                // rsp_demux_036:src0_endofpacket -> rsp_mux_007:sink27_endofpacket
	wire          rsp_demux_036_src1_valid;                                                                      // rsp_demux_036:src1_valid -> rsp_mux_008:sink27_valid
	wire  [136:0] rsp_demux_036_src1_data;                                                                       // rsp_demux_036:src1_data -> rsp_mux_008:sink27_data
	wire          rsp_demux_036_src1_ready;                                                                      // rsp_mux_008:sink27_ready -> rsp_demux_036:src1_ready
	wire   [44:0] rsp_demux_036_src1_channel;                                                                    // rsp_demux_036:src1_channel -> rsp_mux_008:sink27_channel
	wire          rsp_demux_036_src1_startofpacket;                                                              // rsp_demux_036:src1_startofpacket -> rsp_mux_008:sink27_startofpacket
	wire          rsp_demux_036_src1_endofpacket;                                                                // rsp_demux_036:src1_endofpacket -> rsp_mux_008:sink27_endofpacket
	wire          rsp_demux_036_src2_valid;                                                                      // rsp_demux_036:src2_valid -> rsp_mux_009:sink27_valid
	wire  [136:0] rsp_demux_036_src2_data;                                                                       // rsp_demux_036:src2_data -> rsp_mux_009:sink27_data
	wire          rsp_demux_036_src2_ready;                                                                      // rsp_mux_009:sink27_ready -> rsp_demux_036:src2_ready
	wire   [44:0] rsp_demux_036_src2_channel;                                                                    // rsp_demux_036:src2_channel -> rsp_mux_009:sink27_channel
	wire          rsp_demux_036_src2_startofpacket;                                                              // rsp_demux_036:src2_startofpacket -> rsp_mux_009:sink27_startofpacket
	wire          rsp_demux_036_src2_endofpacket;                                                                // rsp_demux_036:src2_endofpacket -> rsp_mux_009:sink27_endofpacket
	wire          rsp_demux_037_src0_valid;                                                                      // rsp_demux_037:src0_valid -> rsp_mux_007:sink28_valid
	wire  [136:0] rsp_demux_037_src0_data;                                                                       // rsp_demux_037:src0_data -> rsp_mux_007:sink28_data
	wire          rsp_demux_037_src0_ready;                                                                      // rsp_mux_007:sink28_ready -> rsp_demux_037:src0_ready
	wire   [44:0] rsp_demux_037_src0_channel;                                                                    // rsp_demux_037:src0_channel -> rsp_mux_007:sink28_channel
	wire          rsp_demux_037_src0_startofpacket;                                                              // rsp_demux_037:src0_startofpacket -> rsp_mux_007:sink28_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                                // rsp_demux_037:src0_endofpacket -> rsp_mux_007:sink28_endofpacket
	wire          rsp_demux_037_src1_valid;                                                                      // rsp_demux_037:src1_valid -> rsp_mux_008:sink28_valid
	wire  [136:0] rsp_demux_037_src1_data;                                                                       // rsp_demux_037:src1_data -> rsp_mux_008:sink28_data
	wire          rsp_demux_037_src1_ready;                                                                      // rsp_mux_008:sink28_ready -> rsp_demux_037:src1_ready
	wire   [44:0] rsp_demux_037_src1_channel;                                                                    // rsp_demux_037:src1_channel -> rsp_mux_008:sink28_channel
	wire          rsp_demux_037_src1_startofpacket;                                                              // rsp_demux_037:src1_startofpacket -> rsp_mux_008:sink28_startofpacket
	wire          rsp_demux_037_src1_endofpacket;                                                                // rsp_demux_037:src1_endofpacket -> rsp_mux_008:sink28_endofpacket
	wire          rsp_demux_037_src2_valid;                                                                      // rsp_demux_037:src2_valid -> rsp_mux_009:sink28_valid
	wire  [136:0] rsp_demux_037_src2_data;                                                                       // rsp_demux_037:src2_data -> rsp_mux_009:sink28_data
	wire          rsp_demux_037_src2_ready;                                                                      // rsp_mux_009:sink28_ready -> rsp_demux_037:src2_ready
	wire   [44:0] rsp_demux_037_src2_channel;                                                                    // rsp_demux_037:src2_channel -> rsp_mux_009:sink28_channel
	wire          rsp_demux_037_src2_startofpacket;                                                              // rsp_demux_037:src2_startofpacket -> rsp_mux_009:sink28_startofpacket
	wire          rsp_demux_037_src2_endofpacket;                                                                // rsp_demux_037:src2_endofpacket -> rsp_mux_009:sink28_endofpacket
	wire          rsp_demux_038_src0_valid;                                                                      // rsp_demux_038:src0_valid -> rsp_mux_007:sink29_valid
	wire  [136:0] rsp_demux_038_src0_data;                                                                       // rsp_demux_038:src0_data -> rsp_mux_007:sink29_data
	wire          rsp_demux_038_src0_ready;                                                                      // rsp_mux_007:sink29_ready -> rsp_demux_038:src0_ready
	wire   [44:0] rsp_demux_038_src0_channel;                                                                    // rsp_demux_038:src0_channel -> rsp_mux_007:sink29_channel
	wire          rsp_demux_038_src0_startofpacket;                                                              // rsp_demux_038:src0_startofpacket -> rsp_mux_007:sink29_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                                // rsp_demux_038:src0_endofpacket -> rsp_mux_007:sink29_endofpacket
	wire          rsp_demux_038_src1_valid;                                                                      // rsp_demux_038:src1_valid -> rsp_mux_008:sink29_valid
	wire  [136:0] rsp_demux_038_src1_data;                                                                       // rsp_demux_038:src1_data -> rsp_mux_008:sink29_data
	wire          rsp_demux_038_src1_ready;                                                                      // rsp_mux_008:sink29_ready -> rsp_demux_038:src1_ready
	wire   [44:0] rsp_demux_038_src1_channel;                                                                    // rsp_demux_038:src1_channel -> rsp_mux_008:sink29_channel
	wire          rsp_demux_038_src1_startofpacket;                                                              // rsp_demux_038:src1_startofpacket -> rsp_mux_008:sink29_startofpacket
	wire          rsp_demux_038_src1_endofpacket;                                                                // rsp_demux_038:src1_endofpacket -> rsp_mux_008:sink29_endofpacket
	wire          rsp_demux_038_src2_valid;                                                                      // rsp_demux_038:src2_valid -> rsp_mux_009:sink29_valid
	wire  [136:0] rsp_demux_038_src2_data;                                                                       // rsp_demux_038:src2_data -> rsp_mux_009:sink29_data
	wire          rsp_demux_038_src2_ready;                                                                      // rsp_mux_009:sink29_ready -> rsp_demux_038:src2_ready
	wire   [44:0] rsp_demux_038_src2_channel;                                                                    // rsp_demux_038:src2_channel -> rsp_mux_009:sink29_channel
	wire          rsp_demux_038_src2_startofpacket;                                                              // rsp_demux_038:src2_startofpacket -> rsp_mux_009:sink29_startofpacket
	wire          rsp_demux_038_src2_endofpacket;                                                                // rsp_demux_038:src2_endofpacket -> rsp_mux_009:sink29_endofpacket
	wire          rsp_demux_039_src0_valid;                                                                      // rsp_demux_039:src0_valid -> rsp_mux_007:sink30_valid
	wire  [136:0] rsp_demux_039_src0_data;                                                                       // rsp_demux_039:src0_data -> rsp_mux_007:sink30_data
	wire          rsp_demux_039_src0_ready;                                                                      // rsp_mux_007:sink30_ready -> rsp_demux_039:src0_ready
	wire   [44:0] rsp_demux_039_src0_channel;                                                                    // rsp_demux_039:src0_channel -> rsp_mux_007:sink30_channel
	wire          rsp_demux_039_src0_startofpacket;                                                              // rsp_demux_039:src0_startofpacket -> rsp_mux_007:sink30_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                                // rsp_demux_039:src0_endofpacket -> rsp_mux_007:sink30_endofpacket
	wire          rsp_demux_039_src1_valid;                                                                      // rsp_demux_039:src1_valid -> rsp_mux_008:sink30_valid
	wire  [136:0] rsp_demux_039_src1_data;                                                                       // rsp_demux_039:src1_data -> rsp_mux_008:sink30_data
	wire          rsp_demux_039_src1_ready;                                                                      // rsp_mux_008:sink30_ready -> rsp_demux_039:src1_ready
	wire   [44:0] rsp_demux_039_src1_channel;                                                                    // rsp_demux_039:src1_channel -> rsp_mux_008:sink30_channel
	wire          rsp_demux_039_src1_startofpacket;                                                              // rsp_demux_039:src1_startofpacket -> rsp_mux_008:sink30_startofpacket
	wire          rsp_demux_039_src1_endofpacket;                                                                // rsp_demux_039:src1_endofpacket -> rsp_mux_008:sink30_endofpacket
	wire          rsp_demux_039_src2_valid;                                                                      // rsp_demux_039:src2_valid -> rsp_mux_009:sink30_valid
	wire  [136:0] rsp_demux_039_src2_data;                                                                       // rsp_demux_039:src2_data -> rsp_mux_009:sink30_data
	wire          rsp_demux_039_src2_ready;                                                                      // rsp_mux_009:sink30_ready -> rsp_demux_039:src2_ready
	wire   [44:0] rsp_demux_039_src2_channel;                                                                    // rsp_demux_039:src2_channel -> rsp_mux_009:sink30_channel
	wire          rsp_demux_039_src2_startofpacket;                                                              // rsp_demux_039:src2_startofpacket -> rsp_mux_009:sink30_startofpacket
	wire          rsp_demux_039_src2_endofpacket;                                                                // rsp_demux_039:src2_endofpacket -> rsp_mux_009:sink30_endofpacket
	wire          rsp_demux_040_src0_valid;                                                                      // rsp_demux_040:src0_valid -> rsp_mux_007:sink31_valid
	wire  [136:0] rsp_demux_040_src0_data;                                                                       // rsp_demux_040:src0_data -> rsp_mux_007:sink31_data
	wire          rsp_demux_040_src0_ready;                                                                      // rsp_mux_007:sink31_ready -> rsp_demux_040:src0_ready
	wire   [44:0] rsp_demux_040_src0_channel;                                                                    // rsp_demux_040:src0_channel -> rsp_mux_007:sink31_channel
	wire          rsp_demux_040_src0_startofpacket;                                                              // rsp_demux_040:src0_startofpacket -> rsp_mux_007:sink31_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                                // rsp_demux_040:src0_endofpacket -> rsp_mux_007:sink31_endofpacket
	wire          rsp_demux_040_src1_valid;                                                                      // rsp_demux_040:src1_valid -> rsp_mux_008:sink31_valid
	wire  [136:0] rsp_demux_040_src1_data;                                                                       // rsp_demux_040:src1_data -> rsp_mux_008:sink31_data
	wire          rsp_demux_040_src1_ready;                                                                      // rsp_mux_008:sink31_ready -> rsp_demux_040:src1_ready
	wire   [44:0] rsp_demux_040_src1_channel;                                                                    // rsp_demux_040:src1_channel -> rsp_mux_008:sink31_channel
	wire          rsp_demux_040_src1_startofpacket;                                                              // rsp_demux_040:src1_startofpacket -> rsp_mux_008:sink31_startofpacket
	wire          rsp_demux_040_src1_endofpacket;                                                                // rsp_demux_040:src1_endofpacket -> rsp_mux_008:sink31_endofpacket
	wire          rsp_demux_040_src2_valid;                                                                      // rsp_demux_040:src2_valid -> rsp_mux_009:sink31_valid
	wire  [136:0] rsp_demux_040_src2_data;                                                                       // rsp_demux_040:src2_data -> rsp_mux_009:sink31_data
	wire          rsp_demux_040_src2_ready;                                                                      // rsp_mux_009:sink31_ready -> rsp_demux_040:src2_ready
	wire   [44:0] rsp_demux_040_src2_channel;                                                                    // rsp_demux_040:src2_channel -> rsp_mux_009:sink31_channel
	wire          rsp_demux_040_src2_startofpacket;                                                              // rsp_demux_040:src2_startofpacket -> rsp_mux_009:sink31_startofpacket
	wire          rsp_demux_040_src2_endofpacket;                                                                // rsp_demux_040:src2_endofpacket -> rsp_mux_009:sink31_endofpacket
	wire          rsp_demux_041_src0_valid;                                                                      // rsp_demux_041:src0_valid -> rsp_mux_007:sink32_valid
	wire  [136:0] rsp_demux_041_src0_data;                                                                       // rsp_demux_041:src0_data -> rsp_mux_007:sink32_data
	wire          rsp_demux_041_src0_ready;                                                                      // rsp_mux_007:sink32_ready -> rsp_demux_041:src0_ready
	wire   [44:0] rsp_demux_041_src0_channel;                                                                    // rsp_demux_041:src0_channel -> rsp_mux_007:sink32_channel
	wire          rsp_demux_041_src0_startofpacket;                                                              // rsp_demux_041:src0_startofpacket -> rsp_mux_007:sink32_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                                // rsp_demux_041:src0_endofpacket -> rsp_mux_007:sink32_endofpacket
	wire          rsp_demux_041_src1_valid;                                                                      // rsp_demux_041:src1_valid -> rsp_mux_008:sink32_valid
	wire  [136:0] rsp_demux_041_src1_data;                                                                       // rsp_demux_041:src1_data -> rsp_mux_008:sink32_data
	wire          rsp_demux_041_src1_ready;                                                                      // rsp_mux_008:sink32_ready -> rsp_demux_041:src1_ready
	wire   [44:0] rsp_demux_041_src1_channel;                                                                    // rsp_demux_041:src1_channel -> rsp_mux_008:sink32_channel
	wire          rsp_demux_041_src1_startofpacket;                                                              // rsp_demux_041:src1_startofpacket -> rsp_mux_008:sink32_startofpacket
	wire          rsp_demux_041_src1_endofpacket;                                                                // rsp_demux_041:src1_endofpacket -> rsp_mux_008:sink32_endofpacket
	wire          rsp_demux_042_src0_valid;                                                                      // rsp_demux_042:src0_valid -> rsp_mux_007:sink33_valid
	wire  [136:0] rsp_demux_042_src0_data;                                                                       // rsp_demux_042:src0_data -> rsp_mux_007:sink33_data
	wire          rsp_demux_042_src0_ready;                                                                      // rsp_mux_007:sink33_ready -> rsp_demux_042:src0_ready
	wire   [44:0] rsp_demux_042_src0_channel;                                                                    // rsp_demux_042:src0_channel -> rsp_mux_007:sink33_channel
	wire          rsp_demux_042_src0_startofpacket;                                                              // rsp_demux_042:src0_startofpacket -> rsp_mux_007:sink33_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                                // rsp_demux_042:src0_endofpacket -> rsp_mux_007:sink33_endofpacket
	wire          rsp_demux_042_src1_valid;                                                                      // rsp_demux_042:src1_valid -> rsp_mux_008:sink33_valid
	wire  [136:0] rsp_demux_042_src1_data;                                                                       // rsp_demux_042:src1_data -> rsp_mux_008:sink33_data
	wire          rsp_demux_042_src1_ready;                                                                      // rsp_mux_008:sink33_ready -> rsp_demux_042:src1_ready
	wire   [44:0] rsp_demux_042_src1_channel;                                                                    // rsp_demux_042:src1_channel -> rsp_mux_008:sink33_channel
	wire          rsp_demux_042_src1_startofpacket;                                                              // rsp_demux_042:src1_startofpacket -> rsp_mux_008:sink33_startofpacket
	wire          rsp_demux_042_src1_endofpacket;                                                                // rsp_demux_042:src1_endofpacket -> rsp_mux_008:sink33_endofpacket
	wire          rsp_demux_043_src0_valid;                                                                      // rsp_demux_043:src0_valid -> rsp_mux_007:sink34_valid
	wire  [136:0] rsp_demux_043_src0_data;                                                                       // rsp_demux_043:src0_data -> rsp_mux_007:sink34_data
	wire          rsp_demux_043_src0_ready;                                                                      // rsp_mux_007:sink34_ready -> rsp_demux_043:src0_ready
	wire   [44:0] rsp_demux_043_src0_channel;                                                                    // rsp_demux_043:src0_channel -> rsp_mux_007:sink34_channel
	wire          rsp_demux_043_src0_startofpacket;                                                              // rsp_demux_043:src0_startofpacket -> rsp_mux_007:sink34_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                                                // rsp_demux_043:src0_endofpacket -> rsp_mux_007:sink34_endofpacket
	wire          rsp_demux_043_src1_valid;                                                                      // rsp_demux_043:src1_valid -> rsp_mux_008:sink34_valid
	wire  [136:0] rsp_demux_043_src1_data;                                                                       // rsp_demux_043:src1_data -> rsp_mux_008:sink34_data
	wire          rsp_demux_043_src1_ready;                                                                      // rsp_mux_008:sink34_ready -> rsp_demux_043:src1_ready
	wire   [44:0] rsp_demux_043_src1_channel;                                                                    // rsp_demux_043:src1_channel -> rsp_mux_008:sink34_channel
	wire          rsp_demux_043_src1_startofpacket;                                                              // rsp_demux_043:src1_startofpacket -> rsp_mux_008:sink34_startofpacket
	wire          rsp_demux_043_src1_endofpacket;                                                                // rsp_demux_043:src1_endofpacket -> rsp_mux_008:sink34_endofpacket
	wire          rsp_demux_044_src0_valid;                                                                      // rsp_demux_044:src0_valid -> rsp_mux_007:sink35_valid
	wire  [136:0] rsp_demux_044_src0_data;                                                                       // rsp_demux_044:src0_data -> rsp_mux_007:sink35_data
	wire          rsp_demux_044_src0_ready;                                                                      // rsp_mux_007:sink35_ready -> rsp_demux_044:src0_ready
	wire   [44:0] rsp_demux_044_src0_channel;                                                                    // rsp_demux_044:src0_channel -> rsp_mux_007:sink35_channel
	wire          rsp_demux_044_src0_startofpacket;                                                              // rsp_demux_044:src0_startofpacket -> rsp_mux_007:sink35_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                                                // rsp_demux_044:src0_endofpacket -> rsp_mux_007:sink35_endofpacket
	wire          rsp_demux_044_src1_valid;                                                                      // rsp_demux_044:src1_valid -> rsp_mux_008:sink35_valid
	wire  [136:0] rsp_demux_044_src1_data;                                                                       // rsp_demux_044:src1_data -> rsp_mux_008:sink35_data
	wire          rsp_demux_044_src1_ready;                                                                      // rsp_mux_008:sink35_ready -> rsp_demux_044:src1_ready
	wire   [44:0] rsp_demux_044_src1_channel;                                                                    // rsp_demux_044:src1_channel -> rsp_mux_008:sink35_channel
	wire          rsp_demux_044_src1_startofpacket;                                                              // rsp_demux_044:src1_startofpacket -> rsp_mux_008:sink35_startofpacket
	wire          rsp_demux_044_src1_endofpacket;                                                                // rsp_demux_044:src1_endofpacket -> rsp_mux_008:sink35_endofpacket
	wire          cmd_demux_src0_valid;                                                                          // cmd_demux:src0_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src0_data;                                                                           // cmd_demux:src0_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [44:0] cmd_demux_src0_channel;                                                                        // cmd_demux:src0_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                  // cmd_demux:src0_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                    // cmd_demux:src0_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid;                     // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_data;                      // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready;                     // cmd_mux:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel;                   // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket;             // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket;               // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                          // cmd_demux:src1_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src1_data;                                                                           // cmd_demux:src1_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire   [44:0] cmd_demux_src1_channel;                                                                        // cmd_demux:src1_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                  // cmd_demux:src1_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                    // cmd_demux:src1_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_valid;                          // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_data;                           // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_ready;                          // cmd_mux_001:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_channel;                        // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket;                  // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket;                    // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                          // cmd_demux:src2_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src2_data;                                                                           // cmd_demux:src2_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire   [44:0] cmd_demux_src2_channel;                                                                        // cmd_demux:src2_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                  // cmd_demux:src2_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                    // cmd_demux:src2_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid;                 // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data;                  // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready;                 // cmd_mux_002:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel;               // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket;         // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket;           // hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                          // cmd_demux:src3_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src3_data;                                                                           // cmd_demux:src3_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire   [44:0] cmd_demux_src3_channel;                                                                        // cmd_demux:src3_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                  // cmd_demux:src3_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                    // cmd_demux:src3_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid;                // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data;                 // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready;                // cmd_mux_003:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel;              // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket;        // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket;          // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                          // cmd_demux:src4_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src4_data;                                                                           // cmd_demux:src4_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire   [44:0] cmd_demux_src4_channel;                                                                        // cmd_demux:src4_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                  // cmd_demux:src4_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                    // cmd_demux:src4_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid;                      // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_data;                       // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready;                      // cmd_mux_004:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel;                    // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket;              // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket;                // hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                          // cmd_demux:src5_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src5_data;                                                                           // cmd_demux:src5_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_data
	wire          cmd_demux_src5_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_ready -> cmd_demux:src5_ready
	wire   [44:0] cmd_demux_src5_channel;                                                                        // cmd_demux:src5_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_channel
	wire          cmd_demux_src5_startofpacket;                                                                  // cmd_demux:src5_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                    // cmd_demux:src5_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid;                   // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_valid -> cmd_mux_005:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_data;                    // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_data -> cmd_mux_005:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready;                   // cmd_mux_005:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel;                 // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_channel -> cmd_mux_005:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                          // cmd_demux:src6_valid -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src6_data;                                                                           // cmd_demux:src6_data -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_data
	wire          cmd_demux_src6_ready;                                                                          // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_ready -> cmd_demux:src6_ready
	wire   [44:0] cmd_demux_src6_channel;                                                                        // cmd_demux:src6_channel -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_channel
	wire          cmd_demux_src6_startofpacket;                                                                  // cmd_demux:src6_startofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                    // cmd_demux:src6_endofpacket -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_valid;                         // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_valid -> cmd_mux_006:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_data;                          // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_data -> cmd_mux_006:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_ready;                         // cmd_mux_006:sink0_ready -> hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_channel;                       // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_channel -> cmd_mux_006:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket;                 // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket;                   // hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                          // cmd_demux:src7_valid -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src7_data;                                                                           // cmd_demux:src7_data -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src7_ready;                                                                          // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_ready -> cmd_demux:src7_ready
	wire   [44:0] cmd_demux_src7_channel;                                                                        // cmd_demux:src7_channel -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src7_startofpacket;                                                                  // cmd_demux:src7_startofpacket -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                    // cmd_demux:src7_endofpacket -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_valid;                            // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink0_valid
	wire  [136:0] hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_data;                             // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_ready;                            // cmd_mux_007:sink0_ready -> hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_channel;                          // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_startofpacket;                    // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_endofpacket;                      // hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                          // cmd_demux:src8_valid -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_src8_data;                                                                           // cmd_demux:src8_data -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src8_ready;                                                                          // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux:src8_ready
	wire   [44:0] cmd_demux_src8_channel;                                                                        // cmd_demux:src8_channel -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src8_startofpacket;                                                                  // cmd_demux:src8_startofpacket -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                    // cmd_demux:src8_endofpacket -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid;                               // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire  [118:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data;                                // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready;                               // cmd_mux_008:sink0_ready -> hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel;                             // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket;                       // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket;                         // hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                      // cmd_demux_001:src0_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src0_data;                                                                       // cmd_demux_001:src0_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [44:0] cmd_demux_001_src0_channel;                                                                    // cmd_demux_001:src0_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                              // cmd_demux_001:src0_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                // cmd_demux_001:src0_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid;                     // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_data;                      // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready;                     // cmd_mux:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel;                   // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket;             // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket;               // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                      // cmd_demux_001:src1_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src1_data;                                                                       // cmd_demux_001:src1_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [44:0] cmd_demux_001_src1_channel;                                                                    // cmd_demux_001:src1_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                              // cmd_demux_001:src1_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                // cmd_demux_001:src1_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_valid;                          // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_data;                           // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_ready;                          // cmd_mux_001:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_channel;                        // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket;                  // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket;                    // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                      // cmd_demux_001:src2_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src2_data;                                                                       // cmd_demux_001:src2_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_001_src2_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_ready -> cmd_demux_001:src2_ready
	wire   [44:0] cmd_demux_001_src2_channel;                                                                    // cmd_demux_001:src2_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                              // cmd_demux_001:src2_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                // cmd_demux_001:src2_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid;                 // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_valid -> cmd_mux_002:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data;                  // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_data -> cmd_mux_002:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready;                 // cmd_mux_002:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel;               // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_channel -> cmd_mux_002:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket;         // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket;           // hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                      // cmd_demux_001:src3_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src3_data;                                                                       // cmd_demux_001:src3_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_001_src3_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_ready -> cmd_demux_001:src3_ready
	wire   [44:0] cmd_demux_001_src3_channel;                                                                    // cmd_demux_001:src3_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                              // cmd_demux_001:src3_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                // cmd_demux_001:src3_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid;                // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_valid -> cmd_mux_003:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data;                 // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_data -> cmd_mux_003:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready;                // cmd_mux_003:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel;              // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_channel -> cmd_mux_003:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket;        // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket;          // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                      // cmd_demux_001:src4_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src4_data;                                                                       // cmd_demux_001:src4_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_data
	wire          cmd_demux_001_src4_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_ready -> cmd_demux_001:src4_ready
	wire   [44:0] cmd_demux_001_src4_channel;                                                                    // cmd_demux_001:src4_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                                              // cmd_demux_001:src4_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                // cmd_demux_001:src4_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid;                      // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_valid -> cmd_mux_004:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_data;                       // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_data -> cmd_mux_004:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready;                      // cmd_mux_004:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel;                    // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_channel -> cmd_mux_004:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket;              // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket;                // hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                      // cmd_demux_001:src5_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src5_data;                                                                       // cmd_demux_001:src5_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_data
	wire          cmd_demux_001_src5_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_ready -> cmd_demux_001:src5_ready
	wire   [44:0] cmd_demux_001_src5_channel;                                                                    // cmd_demux_001:src5_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                                              // cmd_demux_001:src5_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                // cmd_demux_001:src5_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid;                   // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_valid -> cmd_mux_005:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_data;                    // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_data -> cmd_mux_005:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready;                   // cmd_mux_005:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel;                 // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_channel -> cmd_mux_005:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                      // cmd_demux_001:src6_valid -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src6_data;                                                                       // cmd_demux_001:src6_data -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_data
	wire          cmd_demux_001_src6_ready;                                                                      // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_ready -> cmd_demux_001:src6_ready
	wire   [44:0] cmd_demux_001_src6_channel;                                                                    // cmd_demux_001:src6_channel -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                                              // cmd_demux_001:src6_startofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                // cmd_demux_001:src6_endofpacket -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_valid;                         // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_valid -> cmd_mux_006:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_data;                          // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_data -> cmd_mux_006:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_ready;                         // cmd_mux_006:sink1_ready -> hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_channel;                       // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_channel -> cmd_mux_006:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket;                 // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket;                   // hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                      // cmd_demux_001:src7_valid -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src7_data;                                                                       // cmd_demux_001:src7_data -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src7_ready;                                                                      // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src7_ready
	wire   [44:0] cmd_demux_001_src7_channel;                                                                    // cmd_demux_001:src7_channel -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src7_startofpacket;                                                              // cmd_demux_001:src7_startofpacket -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                // cmd_demux_001:src7_endofpacket -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_valid;                            // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink1_valid
	wire  [136:0] hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_data;                             // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_ready;                            // cmd_mux_007:sink1_ready -> hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_channel;                          // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_startofpacket;                    // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_endofpacket;                      // hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                      // cmd_demux_001:src8_valid -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_001_src8_data;                                                                       // cmd_demux_001:src8_data -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src8_ready;                                                                      // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src8_ready
	wire   [44:0] cmd_demux_001_src8_channel;                                                                    // cmd_demux_001:src8_channel -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src8_startofpacket;                                                              // cmd_demux_001:src8_startofpacket -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                // cmd_demux_001:src8_endofpacket -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid;                               // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink1_valid
	wire  [118:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data;                                // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready;                               // cmd_mux_008:sink1_ready -> hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel;                             // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket;                       // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket;                         // hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                      // cmd_demux_002:src0_valid -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_002_src0_data;                                                                       // cmd_demux_002:src0_data -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                      // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [44:0] cmd_demux_002_src0_channel;                                                                    // cmd_demux_002:src0_channel -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                              // cmd_demux_002:src0_startofpacket -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                // cmd_demux_002:src0_endofpacket -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_valid;                                 // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink2_valid
	wire  [118:0] dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_data;                                  // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink2_data
	wire          dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_ready;                                 // cmd_mux_008:sink2_ready -> dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_channel;                               // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink2_channel
	wire          dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                         // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                           // dma_fifo_write_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                      // cmd_demux_003:src0_valid -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_003_src0_data;                                                                       // cmd_demux_003:src0_data -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                                      // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire   [44:0] cmd_demux_003_src0_channel;                                                                    // cmd_demux_003:src0_channel -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                                              // cmd_demux_003:src0_startofpacket -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                // cmd_demux_003:src0_endofpacket -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_valid;                               // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink3_valid
	wire  [118:0] dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_data;                                // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink3_data
	wire          dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_ready;                               // cmd_mux_008:sink3_ready -> dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_channel;                             // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink3_channel
	wire          dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                       // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                         // dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                      // cmd_demux_004:src0_valid -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_004_src0_data;                                                                       // cmd_demux_004:src0_data -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                                      // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire   [44:0] cmd_demux_004_src0_channel;                                                                    // cmd_demux_004:src0_channel -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                              // cmd_demux_004:src0_startofpacket -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                // cmd_demux_004:src0_endofpacket -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_valid;                               // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink4_valid
	wire  [118:0] dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_data;                                // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink4_data
	wire          dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_ready;                               // cmd_mux_008:sink4_ready -> dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_channel;                             // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink4_channel
	wire          dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                       // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink4_startofpacket
	wire          dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                         // dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                      // cmd_demux_005:src0_valid -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_005_src0_data;                                                                       // cmd_demux_005:src0_data -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_005_src0_ready;                                                                      // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_005:src0_ready
	wire   [44:0] cmd_demux_005_src0_channel;                                                                    // cmd_demux_005:src0_channel -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                              // cmd_demux_005:src0_startofpacket -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                // cmd_demux_005:src0_endofpacket -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_valid;                                // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux_008:sink5_valid
	wire  [118:0] dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_data;                                 // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_data -> cmd_mux_008:sink5_data
	wire          dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_ready;                                // cmd_mux_008:sink5_ready -> dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_ready
	wire   [44:0] dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_channel;                              // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux_008:sink5_channel
	wire          dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                        // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink5_startofpacket
	wire          dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                          // dma_dummy_write_master_to_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink5_endofpacket
	wire          cmd_demux_007_src3_valid;                                                                      // cmd_demux_007:src3_valid -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_007_src3_data;                                                                       // cmd_demux_007:src3_data -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_007_src3_ready;                                                                      // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_007:src3_ready
	wire   [44:0] cmd_demux_007_src3_channel;                                                                    // cmd_demux_007:src3_channel -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src3_startofpacket;                                                              // cmd_demux_007:src3_startofpacket -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src3_endofpacket;                                                                // cmd_demux_007:src3_endofpacket -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid;           // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink0_valid
	wire  [118:0] hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data;            // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink0_data
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready;           // cmd_mux_012:sink0_ready -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel;         // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink0_channel
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket;   // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket;     // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_007_src4_valid;                                                                      // cmd_demux_007:src4_valid -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_007_src4_data;                                                                       // cmd_demux_007:src4_data -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_007_src4_ready;                                                                      // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_007:src4_ready
	wire   [44:0] cmd_demux_007_src4_channel;                                                                    // cmd_demux_007:src4_channel -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src4_startofpacket;                                                              // cmd_demux_007:src4_startofpacket -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src4_endofpacket;                                                                // cmd_demux_007:src4_endofpacket -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_013:sink0_valid
	wire  [118:0] hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_013:sink0_data
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready;         // cmd_mux_013:sink0_ready -> hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_013:sink0_channel
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_008_src3_valid;                                                                      // cmd_demux_008:src3_valid -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_008_src3_data;                                                                       // cmd_demux_008:src3_data -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_008_src3_ready;                                                                      // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_008:src3_ready
	wire   [44:0] cmd_demux_008_src3_channel;                                                                    // cmd_demux_008:src3_channel -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_008_src3_startofpacket;                                                              // cmd_demux_008:src3_startofpacket -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_008_src3_endofpacket;                                                                // cmd_demux_008:src3_endofpacket -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid;           // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink1_valid
	wire  [118:0] hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data;            // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink1_data
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready;           // cmd_mux_012:sink1_ready -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel;         // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink1_channel
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket;   // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket;     // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_008_src4_valid;                                                                      // cmd_demux_008:src4_valid -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_008_src4_data;                                                                       // cmd_demux_008:src4_data -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_008_src4_ready;                                                                      // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_008:src4_ready
	wire   [44:0] cmd_demux_008_src4_channel;                                                                    // cmd_demux_008:src4_channel -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_008_src4_startofpacket;                                                              // cmd_demux_008:src4_startofpacket -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_008_src4_endofpacket;                                                                // cmd_demux_008:src4_endofpacket -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid;         // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_013:sink1_valid
	wire  [118:0] hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data;          // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_013:sink1_data
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready;         // cmd_mux_013:sink1_ready -> hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel;       // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_013:sink1_channel
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket; // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_009_src3_valid;                                                                      // cmd_demux_009:src3_valid -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_009_src3_data;                                                                       // cmd_demux_009:src3_data -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_009_src3_ready;                                                                      // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_009:src3_ready
	wire   [44:0] cmd_demux_009_src3_channel;                                                                    // cmd_demux_009:src3_channel -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_009_src3_startofpacket;                                                              // cmd_demux_009:src3_startofpacket -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_009_src3_endofpacket;                                                                // cmd_demux_009:src3_endofpacket -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid;                // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_012:sink2_valid
	wire  [118:0] master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data;                 // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_012:sink2_data
	wire          master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready;                // cmd_mux_012:sink2_ready -> master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel;              // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_012:sink2_channel
	wire          master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket;        // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket;          // master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_009_src4_valid;                                                                      // cmd_demux_009:src4_valid -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_009_src4_data;                                                                       // cmd_demux_009:src4_data -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_data
	wire          cmd_demux_009_src4_ready;                                                                      // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_ready -> cmd_demux_009:src4_ready
	wire   [44:0] cmd_demux_009_src4_channel;                                                                    // cmd_demux_009:src4_channel -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_009_src4_startofpacket;                                                              // cmd_demux_009:src4_startofpacket -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_009_src4_endofpacket;                                                                // cmd_demux_009:src4_endofpacket -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:in_endofpacket
	wire          master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid;              // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_valid -> cmd_mux_013:sink2_valid
	wire  [118:0] master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data;               // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_data -> cmd_mux_013:sink2_data
	wire          master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready;              // cmd_mux_013:sink2_ready -> master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_ready
	wire   [44:0] master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel;            // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_channel -> cmd_mux_013:sink2_channel
	wire          master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket;      // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket;        // master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                                          // rsp_demux:src0_valid -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_src0_data;                                                                           // rsp_demux:src0_data -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                          // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [44:0] rsp_demux_src0_channel;                                                                        // rsp_demux:src0_channel -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                  // rsp_demux:src0_startofpacket -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                    // rsp_demux:src0_endofpacket -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                     // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [244:0] fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                      // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                     // rsp_mux:sink0_ready -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                   // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;             // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;               // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                          // rsp_demux:src1_valid -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_src1_data;                                                                           // rsp_demux:src1_data -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                          // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [44:0] rsp_demux_src1_channel;                                                                        // rsp_demux:src1_channel -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                  // rsp_demux:src1_startofpacket -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                    // rsp_demux:src1_endofpacket -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                     // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [244:0] fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                      // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                     // rsp_mux_001:sink0_ready -> fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                   // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;             // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;               // fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                      // rsp_demux_001:src0_valid -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_001_src0_data;                                                                       // rsp_demux_001:src0_data -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                      // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire   [44:0] rsp_demux_001_src0_channel;                                                                    // rsp_demux_001:src0_channel -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                              // rsp_demux_001:src0_startofpacket -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                // rsp_demux_001:src0_endofpacket -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                          // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [244:0] fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                           // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                          // rsp_mux:sink1_ready -> fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                        // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                  // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                    // fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                      // rsp_demux_001:src1_valid -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_001_src1_data;                                                                       // rsp_demux_001:src1_data -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                      // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [44:0] rsp_demux_001_src1_channel;                                                                    // rsp_demux_001:src1_channel -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                              // rsp_demux_001:src1_startofpacket -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                // rsp_demux_001:src1_endofpacket -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                          // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [244:0] fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                           // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                          // rsp_mux_001:sink1_ready -> fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                        // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                  // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                    // fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                      // rsp_demux_002:src0_valid -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_002_src0_data;                                                                       // rsp_demux_002:src0_data -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                                      // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire   [44:0] rsp_demux_002_src0_channel;                                                                    // rsp_demux_002:src0_channel -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                              // rsp_demux_002:src0_startofpacket -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                // rsp_demux_002:src0_endofpacket -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                 // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire  [244:0] fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                  // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                 // rsp_mux:sink2_ready -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;               // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;         // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;           // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                      // rsp_demux_002:src1_valid -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_002_src1_data;                                                                       // rsp_demux_002:src1_data -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_002_src1_ready;                                                                      // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_002:src1_ready
	wire   [44:0] rsp_demux_002_src1_channel;                                                                    // rsp_demux_002:src1_channel -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                                              // rsp_demux_002:src1_startofpacket -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                // rsp_demux_002:src1_endofpacket -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                 // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink2_valid
	wire  [244:0] fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                  // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink2_data
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                 // rsp_mux_001:sink2_ready -> fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;               // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink2_channel
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;         // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;           // fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                      // rsp_demux_003:src0_valid -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_003_src0_data;                                                                       // rsp_demux_003:src0_data -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                      // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire   [44:0] rsp_demux_003_src0_channel;                                                                    // rsp_demux_003:src0_channel -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                              // rsp_demux_003:src0_startofpacket -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                // rsp_demux_003:src0_endofpacket -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [244:0] fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                 // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                // rsp_mux:sink3_ready -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;              // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;        // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;          // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                      // rsp_demux_003:src1_valid -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_003_src1_data;                                                                       // rsp_demux_003:src1_data -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_003_src1_ready;                                                                      // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_003:src1_ready
	wire   [44:0] rsp_demux_003_src1_channel;                                                                    // rsp_demux_003:src1_channel -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                              // rsp_demux_003:src1_startofpacket -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                // rsp_demux_003:src1_endofpacket -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink3_valid
	wire  [244:0] fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                 // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink3_data
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                // rsp_mux_001:sink3_ready -> fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;              // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink3_channel
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;        // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;          // fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                      // rsp_demux_004:src0_valid -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_004_src0_data;                                                                       // rsp_demux_004:src0_data -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                                      // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire   [44:0] rsp_demux_004_src0_channel;                                                                    // rsp_demux_004:src0_channel -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                              // rsp_demux_004:src0_startofpacket -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                // rsp_demux_004:src0_endofpacket -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                      // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [244:0] fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                       // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                      // rsp_mux:sink4_ready -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                    // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;              // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                      // rsp_demux_004:src1_valid -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_004_src1_data;                                                                       // rsp_demux_004:src1_data -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_004_src1_ready;                                                                      // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_004:src1_ready
	wire   [44:0] rsp_demux_004_src1_channel;                                                                    // rsp_demux_004:src1_channel -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                              // rsp_demux_004:src1_startofpacket -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                // rsp_demux_004:src1_endofpacket -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                      // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink4_valid
	wire  [244:0] fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                       // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink4_data
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                      // rsp_mux_001:sink4_ready -> fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                    // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink4_channel
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;              // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                // fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                      // rsp_demux_005:src0_valid -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_005_src0_data;                                                                       // rsp_demux_005:src0_data -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_005_src0_ready;                                                                      // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_005:src0_ready
	wire   [44:0] rsp_demux_005_src0_channel;                                                                    // rsp_demux_005:src0_channel -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                              // rsp_demux_005:src0_startofpacket -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                // rsp_demux_005:src0_endofpacket -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                   // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink5_valid
	wire  [244:0] fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                    // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink5_data
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                   // rsp_mux:sink5_ready -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                 // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink5_channel
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;           // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;             // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                      // rsp_demux_005:src1_valid -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_005_src1_data;                                                                       // rsp_demux_005:src1_data -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_005_src1_ready;                                                                      // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_005:src1_ready
	wire   [44:0] rsp_demux_005_src1_channel;                                                                    // rsp_demux_005:src1_channel -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                                              // rsp_demux_005:src1_startofpacket -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                // rsp_demux_005:src1_endofpacket -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                   // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink5_valid
	wire  [244:0] fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                    // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink5_data
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                   // rsp_mux_001:sink5_ready -> fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                 // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink5_channel
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;           // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;             // fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                      // rsp_demux_006:src0_valid -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_006_src0_data;                                                                       // rsp_demux_006:src0_data -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_006_src0_ready;                                                                      // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_006:src0_ready
	wire   [44:0] rsp_demux_006_src0_channel;                                                                    // rsp_demux_006:src0_channel -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                              // rsp_demux_006:src0_startofpacket -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                // rsp_demux_006:src0_endofpacket -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                         // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink6_valid
	wire  [244:0] fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                          // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink6_data
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                         // rsp_mux:sink6_ready -> fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                       // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink6_channel
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                 // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                   // fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                      // rsp_demux_006:src1_valid -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_006_src1_data;                                                                       // rsp_demux_006:src1_data -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_006_src1_ready;                                                                      // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_006:src1_ready
	wire   [44:0] rsp_demux_006_src1_channel;                                                                    // rsp_demux_006:src1_channel -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                                              // rsp_demux_006:src1_startofpacket -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                // rsp_demux_006:src1_endofpacket -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                         // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink6_valid
	wire  [244:0] fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                          // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink6_data
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                         // rsp_mux_001:sink6_ready -> fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                       // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink6_channel
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                 // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                   // fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                      // rsp_demux_007:src0_valid -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_007_src0_data;                                                                       // rsp_demux_007:src0_data -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_007_src0_ready;                                                                      // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire   [44:0] rsp_demux_007_src0_channel;                                                                    // rsp_demux_007:src0_channel -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                              // rsp_demux_007:src0_startofpacket -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                // rsp_demux_007:src0_endofpacket -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                            // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink7_valid
	wire  [244:0] switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                             // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink7_data
	wire          switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                            // rsp_mux:sink7_ready -> switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                          // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink7_channel
	wire          switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                    // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                      // switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                      // rsp_demux_007:src1_valid -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_007_src1_data;                                                                       // rsp_demux_007:src1_data -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_007_src1_ready;                                                                      // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_007:src1_ready
	wire   [44:0] rsp_demux_007_src1_channel;                                                                    // rsp_demux_007:src1_channel -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src1_startofpacket;                                                              // rsp_demux_007:src1_startofpacket -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                // rsp_demux_007:src1_endofpacket -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                            // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink7_valid
	wire  [244:0] switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                             // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink7_data
	wire          switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                            // rsp_mux_001:sink7_ready -> switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                          // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink7_channel
	wire          switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                    // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                      // switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                      // rsp_demux_008:src0_valid -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src0_data;                                                                       // rsp_demux_008:src0_data -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_008_src0_ready;                                                                      // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire   [44:0] rsp_demux_008_src0_channel;                                                                    // rsp_demux_008:src0_channel -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                              // rsp_demux_008:src0_startofpacket -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                // rsp_demux_008:src0_endofpacket -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                               // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink8_valid
	wire  [244:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                                // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink8_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                               // rsp_mux:sink8_ready -> sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                             // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink8_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                       // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                         // sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                      // rsp_demux_008:src1_valid -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src1_data;                                                                       // rsp_demux_008:src1_data -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_008_src1_ready;                                                                      // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_008:src1_ready
	wire   [44:0] rsp_demux_008_src1_channel;                                                                    // rsp_demux_008:src1_channel -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src1_startofpacket;                                                              // rsp_demux_008:src1_startofpacket -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                // rsp_demux_008:src1_endofpacket -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                               // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink8_valid
	wire  [244:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                                // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink8_data
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                               // rsp_mux_001:sink8_ready -> sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                             // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink8_channel
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                       // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                         // sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                      // rsp_demux_008:src2_valid -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src2_data;                                                                       // rsp_demux_008:src2_data -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_008_src2_ready;                                                                      // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_ready -> rsp_demux_008:src2_ready
	wire   [44:0] rsp_demux_008_src2_channel;                                                                    // rsp_demux_008:src2_channel -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src2_startofpacket;                                                              // rsp_demux_008:src2_startofpacket -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                                // rsp_demux_008:src2_endofpacket -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_valid;                                 // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [136:0] sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_data;                                  // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_ready;                                 // rsp_mux_002:sink0_ready -> sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_channel;                               // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_startofpacket;                         // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_endofpacket;                           // sdram_s1_to_dma_fifo_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_008_src3_valid;                                                                      // rsp_demux_008:src3_valid -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src3_data;                                                                       // rsp_demux_008:src3_data -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_008_src3_ready;                                                                      // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_ready -> rsp_demux_008:src3_ready
	wire   [44:0] rsp_demux_008_src3_channel;                                                                    // rsp_demux_008:src3_channel -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src3_startofpacket;                                                              // rsp_demux_008:src3_startofpacket -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                                // rsp_demux_008:src3_endofpacket -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_valid;                               // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [136:0] sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_data;                                // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_ready;                               // rsp_mux_003:sink0_ready -> sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_channel;                             // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_startofpacket;                       // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_endofpacket;                         // sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_008_src4_valid;                                                                      // rsp_demux_008:src4_valid -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src4_data;                                                                       // rsp_demux_008:src4_data -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_008_src4_ready;                                                                      // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_ready -> rsp_demux_008:src4_ready
	wire   [44:0] rsp_demux_008_src4_channel;                                                                    // rsp_demux_008:src4_channel -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src4_startofpacket;                                                              // rsp_demux_008:src4_startofpacket -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src4_endofpacket;                                                                // rsp_demux_008:src4_endofpacket -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_valid;                               // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire  [136:0] sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_data;                                // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_ready;                               // rsp_mux_004:sink0_ready -> sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_channel;                             // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_startofpacket;                       // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_endofpacket;                         // sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_008_src5_valid;                                                                      // rsp_demux_008:src5_valid -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_008_src5_data;                                                                       // rsp_demux_008:src5_data -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_008_src5_ready;                                                                      // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_ready -> rsp_demux_008:src5_ready
	wire   [44:0] rsp_demux_008_src5_channel;                                                                    // rsp_demux_008:src5_channel -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src5_startofpacket;                                                              // rsp_demux_008:src5_startofpacket -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src5_endofpacket;                                                                // rsp_demux_008:src5_endofpacket -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_valid;                                // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_valid -> rsp_mux_005:sink0_valid
	wire  [136:0] sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_data;                                 // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_data -> rsp_mux_005:sink0_data
	wire          sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_ready;                                // rsp_mux_005:sink0_ready -> sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_ready
	wire   [44:0] sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_channel;                              // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_channel -> rsp_mux_005:sink0_channel
	wire          sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_startofpacket;                        // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_endofpacket;                          // sdram_s1_to_dma_dummy_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                      // rsp_demux_012:src0_valid -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_012_src0_data;                                                                       // rsp_demux_012:src0_data -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_012_src0_ready;                                                                      // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_012:src0_ready
	wire   [44:0] rsp_demux_012_src0_channel;                                                                    // rsp_demux_012:src0_channel -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                              // rsp_demux_012:src0_startofpacket -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                // rsp_demux_012:src0_endofpacket -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid;           // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_007:sink3_valid
	wire  [136:0] dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data;            // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_007:sink3_data
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready;           // rsp_mux_007:sink3_ready -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel;         // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_007:sink3_channel
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket;   // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink3_startofpacket
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket;     // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink3_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                      // rsp_demux_012:src1_valid -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_012_src1_data;                                                                       // rsp_demux_012:src1_data -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_012_src1_ready;                                                                      // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_012:src1_ready
	wire   [44:0] rsp_demux_012_src1_channel;                                                                    // rsp_demux_012:src1_channel -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src1_startofpacket;                                                              // rsp_demux_012:src1_startofpacket -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                // rsp_demux_012:src1_endofpacket -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid;           // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_008:sink3_valid
	wire  [136:0] dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data;            // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_008:sink3_data
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready;           // rsp_mux_008:sink3_ready -> dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel;         // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_008:sink3_channel
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket;   // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_008:sink3_startofpacket
	wire          dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket;     // dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_008:sink3_endofpacket
	wire          rsp_demux_012_src2_valid;                                                                      // rsp_demux_012:src2_valid -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_012_src2_data;                                                                       // rsp_demux_012:src2_data -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_data
	wire          rsp_demux_012_src2_ready;                                                                      // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_ready -> rsp_demux_012:src2_ready
	wire   [44:0] rsp_demux_012_src2_channel;                                                                    // rsp_demux_012:src2_channel -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_channel
	wire          rsp_demux_012_src2_startofpacket;                                                              // rsp_demux_012:src2_startofpacket -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                                                // rsp_demux_012:src2_endofpacket -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid;                // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_valid -> rsp_mux_009:sink3_valid
	wire  [136:0] dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data;                 // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_data -> rsp_mux_009:sink3_data
	wire          dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready;                // rsp_mux_009:sink3_ready -> dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel;              // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_channel -> rsp_mux_009:sink3_channel
	wire          dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket;        // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_startofpacket -> rsp_mux_009:sink3_startofpacket
	wire          dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket;          // dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_endofpacket -> rsp_mux_009:sink3_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                      // rsp_demux_013:src0_valid -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_013_src0_data;                                                                       // rsp_demux_013:src0_data -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_013_src0_ready;                                                                      // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_013:src0_ready
	wire   [44:0] rsp_demux_013_src0_channel;                                                                    // rsp_demux_013:src0_channel -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                              // rsp_demux_013:src0_startofpacket -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                // rsp_demux_013:src0_endofpacket -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid;         // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_007:sink4_valid
	wire  [136:0] dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data;          // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_007:sink4_data
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux_007:sink4_ready -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel;       // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_007:sink4_channel
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket; // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink4_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket;   // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink4_endofpacket
	wire          rsp_demux_013_src1_valid;                                                                      // rsp_demux_013:src1_valid -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_013_src1_data;                                                                       // rsp_demux_013:src1_data -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_013_src1_ready;                                                                      // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_013:src1_ready
	wire   [44:0] rsp_demux_013_src1_channel;                                                                    // rsp_demux_013:src1_channel -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_013_src1_startofpacket;                                                              // rsp_demux_013:src1_startofpacket -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                                // rsp_demux_013:src1_endofpacket -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid;         // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_008:sink4_valid
	wire  [136:0] dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data;          // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_008:sink4_data
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_008:sink4_ready -> dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel;       // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_008:sink4_channel
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket; // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_008:sink4_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket;   // dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_008:sink4_endofpacket
	wire          rsp_demux_013_src2_valid;                                                                      // rsp_demux_013:src2_valid -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_013_src2_data;                                                                       // rsp_demux_013:src2_data -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_data
	wire          rsp_demux_013_src2_ready;                                                                      // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_ready -> rsp_demux_013:src2_ready
	wire   [44:0] rsp_demux_013_src2_channel;                                                                    // rsp_demux_013:src2_channel -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_channel
	wire          rsp_demux_013_src2_startofpacket;                                                              // rsp_demux_013:src2_startofpacket -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                                // rsp_demux_013:src2_endofpacket -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:in_endofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid;              // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_valid -> rsp_mux_009:sink4_valid
	wire  [136:0] dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data;               // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_data -> rsp_mux_009:sink4_data
	wire          dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready;              // rsp_mux_009:sink4_ready -> dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_ready
	wire   [44:0] dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel;            // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_channel -> rsp_mux_009:sink4_channel
	wire          dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket;      // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_startofpacket -> rsp_mux_009:sink4_startofpacket
	wire          dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket;        // dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter:out_endofpacket -> rsp_mux_009:sink4_endofpacket
	wire          cmd_demux_007_src5_valid;                                                                      // cmd_demux_007:src5_valid -> crosser:in_valid
	wire  [136:0] cmd_demux_007_src5_data;                                                                       // cmd_demux_007:src5_data -> crosser:in_data
	wire          cmd_demux_007_src5_ready;                                                                      // crosser:in_ready -> cmd_demux_007:src5_ready
	wire   [44:0] cmd_demux_007_src5_channel;                                                                    // cmd_demux_007:src5_channel -> crosser:in_channel
	wire          cmd_demux_007_src5_startofpacket;                                                              // cmd_demux_007:src5_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_007_src5_endofpacket;                                                                // cmd_demux_007:src5_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                             // crosser:out_valid -> cmd_mux_014:sink0_valid
	wire  [136:0] crosser_out_data;                                                                              // crosser:out_data -> cmd_mux_014:sink0_data
	wire          crosser_out_ready;                                                                             // cmd_mux_014:sink0_ready -> crosser:out_ready
	wire   [44:0] crosser_out_channel;                                                                           // crosser:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_out_startofpacket;                                                                     // crosser:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                       // crosser:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_008_src5_valid;                                                                      // cmd_demux_008:src5_valid -> crosser_001:in_valid
	wire  [136:0] cmd_demux_008_src5_data;                                                                       // cmd_demux_008:src5_data -> crosser_001:in_data
	wire          cmd_demux_008_src5_ready;                                                                      // crosser_001:in_ready -> cmd_demux_008:src5_ready
	wire   [44:0] cmd_demux_008_src5_channel;                                                                    // cmd_demux_008:src5_channel -> crosser_001:in_channel
	wire          cmd_demux_008_src5_startofpacket;                                                              // cmd_demux_008:src5_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_008_src5_endofpacket;                                                                // cmd_demux_008:src5_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                         // crosser_001:out_valid -> cmd_mux_014:sink1_valid
	wire  [136:0] crosser_001_out_data;                                                                          // crosser_001:out_data -> cmd_mux_014:sink1_data
	wire          crosser_001_out_ready;                                                                         // cmd_mux_014:sink1_ready -> crosser_001:out_ready
	wire   [44:0] crosser_001_out_channel;                                                                       // crosser_001:out_channel -> cmd_mux_014:sink1_channel
	wire          crosser_001_out_startofpacket;                                                                 // crosser_001:out_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                                   // crosser_001:out_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_009_src5_valid;                                                                      // cmd_demux_009:src5_valid -> crosser_002:in_valid
	wire  [136:0] cmd_demux_009_src5_data;                                                                       // cmd_demux_009:src5_data -> crosser_002:in_data
	wire          cmd_demux_009_src5_ready;                                                                      // crosser_002:in_ready -> cmd_demux_009:src5_ready
	wire   [44:0] cmd_demux_009_src5_channel;                                                                    // cmd_demux_009:src5_channel -> crosser_002:in_channel
	wire          cmd_demux_009_src5_startofpacket;                                                              // cmd_demux_009:src5_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_009_src5_endofpacket;                                                                // cmd_demux_009:src5_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                         // crosser_002:out_valid -> cmd_mux_014:sink2_valid
	wire  [136:0] crosser_002_out_data;                                                                          // crosser_002:out_data -> cmd_mux_014:sink2_data
	wire          crosser_002_out_ready;                                                                         // cmd_mux_014:sink2_ready -> crosser_002:out_ready
	wire   [44:0] crosser_002_out_channel;                                                                       // crosser_002:out_channel -> cmd_mux_014:sink2_channel
	wire          crosser_002_out_startofpacket;                                                                 // crosser_002:out_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                                   // crosser_002:out_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                      // rsp_demux_014:src0_valid -> crosser_003:in_valid
	wire  [136:0] rsp_demux_014_src0_data;                                                                       // rsp_demux_014:src0_data -> crosser_003:in_data
	wire          rsp_demux_014_src0_ready;                                                                      // crosser_003:in_ready -> rsp_demux_014:src0_ready
	wire   [44:0] rsp_demux_014_src0_channel;                                                                    // rsp_demux_014:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                              // rsp_demux_014:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                // rsp_demux_014:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                         // crosser_003:out_valid -> rsp_mux_007:sink5_valid
	wire  [136:0] crosser_003_out_data;                                                                          // crosser_003:out_data -> rsp_mux_007:sink5_data
	wire          crosser_003_out_ready;                                                                         // rsp_mux_007:sink5_ready -> crosser_003:out_ready
	wire   [44:0] crosser_003_out_channel;                                                                       // crosser_003:out_channel -> rsp_mux_007:sink5_channel
	wire          crosser_003_out_startofpacket;                                                                 // crosser_003:out_startofpacket -> rsp_mux_007:sink5_startofpacket
	wire          crosser_003_out_endofpacket;                                                                   // crosser_003:out_endofpacket -> rsp_mux_007:sink5_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                      // rsp_demux_014:src1_valid -> crosser_004:in_valid
	wire  [136:0] rsp_demux_014_src1_data;                                                                       // rsp_demux_014:src1_data -> crosser_004:in_data
	wire          rsp_demux_014_src1_ready;                                                                      // crosser_004:in_ready -> rsp_demux_014:src1_ready
	wire   [44:0] rsp_demux_014_src1_channel;                                                                    // rsp_demux_014:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_014_src1_startofpacket;                                                              // rsp_demux_014:src1_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                                // rsp_demux_014:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                         // crosser_004:out_valid -> rsp_mux_008:sink5_valid
	wire  [136:0] crosser_004_out_data;                                                                          // crosser_004:out_data -> rsp_mux_008:sink5_data
	wire          crosser_004_out_ready;                                                                         // rsp_mux_008:sink5_ready -> crosser_004:out_ready
	wire   [44:0] crosser_004_out_channel;                                                                       // crosser_004:out_channel -> rsp_mux_008:sink5_channel
	wire          crosser_004_out_startofpacket;                                                                 // crosser_004:out_startofpacket -> rsp_mux_008:sink5_startofpacket
	wire          crosser_004_out_endofpacket;                                                                   // crosser_004:out_endofpacket -> rsp_mux_008:sink5_endofpacket
	wire          rsp_demux_014_src2_valid;                                                                      // rsp_demux_014:src2_valid -> crosser_005:in_valid
	wire  [136:0] rsp_demux_014_src2_data;                                                                       // rsp_demux_014:src2_data -> crosser_005:in_data
	wire          rsp_demux_014_src2_ready;                                                                      // crosser_005:in_ready -> rsp_demux_014:src2_ready
	wire   [44:0] rsp_demux_014_src2_channel;                                                                    // rsp_demux_014:src2_channel -> crosser_005:in_channel
	wire          rsp_demux_014_src2_startofpacket;                                                              // rsp_demux_014:src2_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                                // rsp_demux_014:src2_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                         // crosser_005:out_valid -> rsp_mux_009:sink5_valid
	wire  [136:0] crosser_005_out_data;                                                                          // crosser_005:out_data -> rsp_mux_009:sink5_data
	wire          crosser_005_out_ready;                                                                         // rsp_mux_009:sink5_ready -> crosser_005:out_ready
	wire   [44:0] crosser_005_out_channel;                                                                       // crosser_005:out_channel -> rsp_mux_009:sink5_channel
	wire          crosser_005_out_startofpacket;                                                                 // crosser_005:out_startofpacket -> rsp_mux_009:sink5_startofpacket
	wire          crosser_005_out_endofpacket;                                                                   // crosser_005:out_endofpacket -> rsp_mux_009:sink5_endofpacket
	wire   [44:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                                // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [44:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                                // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [44:0] dma_fifo_read_master_limiter_cmd_valid_data;                                                   // dma_fifo_read_master_limiter:cmd_src_valid -> cmd_demux_006:sink_valid
	wire   [44:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_007:sink_valid
	wire   [44:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_008:sink_valid
	wire   [44:0] master_non_sec_master_limiter_cmd_valid_data;                                                  // master_non_sec_master_limiter:cmd_src_valid -> cmd_demux_009:sink_valid
	wire          fifo_dummy64_in_in_agent_rdata_fifo_out_valid;                                                 // fifo_dummy64_in_in_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] fifo_dummy64_in_in_agent_rdata_fifo_out_data;                                                  // fifo_dummy64_in_in_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          fifo_dummy64_in_in_agent_rdata_fifo_out_ready;                                                 // avalon_st_adapter:in_0_ready -> fifo_dummy64_in_in_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                 // avalon_st_adapter:out_0_valid -> fifo_dummy64_in_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                  // avalon_st_adapter:out_0_data -> fifo_dummy64_in_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                 // fifo_dummy64_in_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                 // avalon_st_adapter:out_0_error -> fifo_dummy64_in_in_agent:rdata_fifo_sink_error
	wire          fifo_dummy_in_agent_rdata_fifo_out_valid;                                                      // fifo_dummy_in_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] fifo_dummy_in_agent_rdata_fifo_out_data;                                                       // fifo_dummy_in_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          fifo_dummy_in_agent_rdata_fifo_out_ready;                                                      // avalon_st_adapter_001:in_0_ready -> fifo_dummy_in_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                             // avalon_st_adapter_001:out_0_valid -> fifo_dummy_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                              // avalon_st_adapter_001:out_0_data -> fifo_dummy_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                             // fifo_dummy_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                             // avalon_st_adapter_001:out_0_error -> fifo_dummy_in_agent:rdata_fifo_sink_error
	wire          fifo_dummy64_in_in_csr_agent_rdata_fifo_out_valid;                                             // fifo_dummy64_in_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] fifo_dummy64_in_in_csr_agent_rdata_fifo_out_data;                                              // fifo_dummy64_in_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          fifo_dummy64_in_in_csr_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_002:in_0_ready -> fifo_dummy64_in_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                             // avalon_st_adapter_002:out_0_valid -> fifo_dummy64_in_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                              // avalon_st_adapter_002:out_0_data -> fifo_dummy64_in_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                             // fifo_dummy64_in_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                             // avalon_st_adapter_002:out_0_error -> fifo_dummy64_in_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_dummy64_out_in_csr_agent_rdata_fifo_out_valid;                                            // fifo_dummy64_out_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] fifo_dummy64_out_in_csr_agent_rdata_fifo_out_data;                                             // fifo_dummy64_out_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          fifo_dummy64_out_in_csr_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_003:in_0_ready -> fifo_dummy64_out_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                             // avalon_st_adapter_003:out_0_valid -> fifo_dummy64_out_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                              // avalon_st_adapter_003:out_0_data -> fifo_dummy64_out_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                             // fifo_dummy64_out_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                             // avalon_st_adapter_003:out_0_error -> fifo_dummy64_out_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_dummy_in_csr_agent_rdata_fifo_out_valid;                                                  // fifo_dummy_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] fifo_dummy_in_csr_agent_rdata_fifo_out_data;                                                   // fifo_dummy_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          fifo_dummy_in_csr_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_004:in_0_ready -> fifo_dummy_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                             // avalon_st_adapter_004:out_0_valid -> fifo_dummy_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                              // avalon_st_adapter_004:out_0_data -> fifo_dummy_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                             // fifo_dummy_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                             // avalon_st_adapter_004:out_0_error -> fifo_dummy_in_csr_agent:rdata_fifo_sink_error
	wire          fifo_dummy64_out_out_agent_rdata_fifo_out_valid;                                               // fifo_dummy64_out_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] fifo_dummy64_out_out_agent_rdata_fifo_out_data;                                                // fifo_dummy64_out_out_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          fifo_dummy64_out_out_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_005:in_0_ready -> fifo_dummy64_out_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                             // avalon_st_adapter_005:out_0_valid -> fifo_dummy64_out_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                              // avalon_st_adapter_005:out_0_data -> fifo_dummy64_out_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                             // fifo_dummy64_out_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                             // avalon_st_adapter_005:out_0_error -> fifo_dummy64_out_out_agent:rdata_fifo_sink_error
	wire          fifo_dummy_out_agent_rdata_fifo_out_valid;                                                     // fifo_dummy_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] fifo_dummy_out_agent_rdata_fifo_out_data;                                                      // fifo_dummy_out_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          fifo_dummy_out_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_006:in_0_ready -> fifo_dummy_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                             // avalon_st_adapter_006:out_0_valid -> fifo_dummy_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                              // avalon_st_adapter_006:out_0_data -> fifo_dummy_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                             // fifo_dummy_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                             // avalon_st_adapter_006:out_0_error -> fifo_dummy_out_agent:rdata_fifo_sink_error
	wire          switches_s1_agent_rdata_fifo_out_valid;                                                        // switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_out_data;                                                         // switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          switches_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_007:in_0_ready -> switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                             // avalon_st_adapter_007:out_0_valid -> switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                              // avalon_st_adapter_007:out_0_data -> switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                             // switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                             // avalon_st_adapter_007:out_0_error -> switches_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                           // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                            // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_008:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                             // avalon_st_adapter_008:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_008_out_0_data;                                                              // avalon_st_adapter_008:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                             // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                             // avalon_st_adapter_008:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          adc_fifo_mem_out_agent_rdata_fifo_out_valid;                                                   // adc_fifo_mem_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] adc_fifo_mem_out_agent_rdata_fifo_out_data;                                                    // adc_fifo_mem_out_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          adc_fifo_mem_out_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_009:in_0_ready -> adc_fifo_mem_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                             // avalon_st_adapter_009:out_0_valid -> adc_fifo_mem_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                              // avalon_st_adapter_009:out_0_data -> adc_fifo_mem_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                             // adc_fifo_mem_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                             // avalon_st_adapter_009:out_0_error -> adc_fifo_mem_out_agent:rdata_fifo_sink_error
	wire          nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_valid;                                      // nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_data;                                       // nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_010:in_0_ready -> nmr_parameters_adc_val_sub_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                             // avalon_st_adapter_010:out_0_valid -> nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                              // avalon_st_adapter_010:out_0_data -> nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                             // nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                             // avalon_st_adapter_010:out_0_error -> nmr_parameters_adc_val_sub_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                        // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                         // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_011:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                             // avalon_st_adapter_011:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                              // avalon_st_adapter_011:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                             // avalon_st_adapter_011:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_valid;                                          // dconv_fir_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [17:0] dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_data;                                           // dconv_fir_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_012:in_0_ready -> dconv_fir_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                             // avalon_st_adapter_012:out_0_valid -> dconv_fir_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_012_out_0_data;                                                              // avalon_st_adapter_012:out_0_data -> dconv_fir_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                             // dconv_fir_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                             // avalon_st_adapter_012:out_0_error -> dconv_fir_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire          dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_valid;                                        // dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [17:0] dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_data;                                         // dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_013:in_0_ready -> dconv_fir_q_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                             // avalon_st_adapter_013:out_0_valid -> dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_013_out_0_data;                                                              // avalon_st_adapter_013:out_0_data -> dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                             // dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                             // avalon_st_adapter_013:out_0_error -> dconv_fir_q_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid;                                       // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data;                                        // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_014:in_0_ready -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                             // avalon_st_adapter_014:out_0_valid -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                              // avalon_st_adapter_014:out_0_data -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                             // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                             // avalon_st_adapter_014:out_0_error -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                                           // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                                            // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_015:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                             // avalon_st_adapter_015:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                              // avalon_st_adapter_015:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                             // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                             // avalon_st_adapter_015:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          i2c_int_csr_agent_rdata_fifo_out_valid;                                                        // i2c_int_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] i2c_int_csr_agent_rdata_fifo_out_data;                                                         // i2c_int_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          i2c_int_csr_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_016:in_0_ready -> i2c_int_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                             // avalon_st_adapter_016:out_0_valid -> i2c_int_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                              // avalon_st_adapter_016:out_0_data -> i2c_int_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                             // i2c_int_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                             // avalon_st_adapter_016:out_0_error -> i2c_int_csr_agent:rdata_fifo_sink_error
	wire          i2c_ext_csr_agent_rdata_fifo_out_valid;                                                        // i2c_ext_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] i2c_ext_csr_agent_rdata_fifo_out_data;                                                         // i2c_ext_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          i2c_ext_csr_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_017:in_0_ready -> i2c_ext_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                             // avalon_st_adapter_017:out_0_valid -> i2c_ext_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                              // avalon_st_adapter_017:out_0_data -> i2c_ext_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                             // i2c_ext_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                             // avalon_st_adapter_017:out_0_error -> i2c_ext_csr_agent:rdata_fifo_sink_error
	wire          nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_valid;                                      // nmr_parameters_delay_nosig_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_data;                                       // nmr_parameters_delay_nosig_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_018:in_0_ready -> nmr_parameters_delay_nosig_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                             // avalon_st_adapter_018:out_0_valid -> nmr_parameters_delay_nosig_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                              // avalon_st_adapter_018:out_0_data -> nmr_parameters_delay_nosig_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                             // nmr_parameters_delay_nosig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                             // avalon_st_adapter_018:out_0_error -> nmr_parameters_delay_nosig_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_valid;                                        // nmr_parameters_delay_sig_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_data;                                         // nmr_parameters_delay_sig_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_019:in_0_ready -> nmr_parameters_delay_sig_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                             // avalon_st_adapter_019:out_0_valid -> nmr_parameters_delay_sig_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                              // avalon_st_adapter_019:out_0_data -> nmr_parameters_delay_sig_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                             // nmr_parameters_delay_sig_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                             // avalon_st_adapter_019:out_0_error -> nmr_parameters_delay_sig_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_valid;                                         // nmr_parameters_delay_t1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_data;                                          // nmr_parameters_delay_t1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_020:in_0_ready -> nmr_parameters_delay_t1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                             // avalon_st_adapter_020:out_0_valid -> nmr_parameters_delay_t1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                              // avalon_st_adapter_020:out_0_data -> nmr_parameters_delay_t1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                             // nmr_parameters_delay_t1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                             // avalon_st_adapter_020:out_0_error -> nmr_parameters_delay_t1_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_valid;                                  // nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_data;                                   // nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_021:in_0_ready -> nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                             // avalon_st_adapter_021:out_0_valid -> nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                              // avalon_st_adapter_021:out_0_data -> nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                             // nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                             // avalon_st_adapter_021:out_0_error -> nmr_parameters_echoes_per_scan_s1_agent:rdata_fifo_sink_error
	wire          adc_fifo_mem_in_csr_agent_rdata_fifo_out_valid;                                                // adc_fifo_mem_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] adc_fifo_mem_in_csr_agent_rdata_fifo_out_data;                                                 // adc_fifo_mem_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          adc_fifo_mem_in_csr_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_022:in_0_ready -> adc_fifo_mem_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                             // avalon_st_adapter_022:out_0_valid -> adc_fifo_mem_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                              // avalon_st_adapter_022:out_0_data -> adc_fifo_mem_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                             // adc_fifo_mem_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                             // avalon_st_adapter_022:out_0_error -> adc_fifo_mem_in_csr_agent:rdata_fifo_sink_error
	wire          dconv_fifo_mem_in_csr_agent_rdata_fifo_out_valid;                                              // dconv_fifo_mem_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] dconv_fifo_mem_in_csr_agent_rdata_fifo_out_data;                                               // dconv_fifo_mem_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          dconv_fifo_mem_in_csr_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_023:in_0_ready -> dconv_fifo_mem_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                             // avalon_st_adapter_023:out_0_valid -> dconv_fifo_mem_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                              // avalon_st_adapter_023:out_0_data -> dconv_fifo_mem_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                             // dconv_fifo_mem_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                             // avalon_st_adapter_023:out_0_error -> dconv_fifo_mem_in_csr_agent:rdata_fifo_sink_error
	wire          dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_valid;                                            // dconv_fifo_mem_q_in_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_data;                                             // dconv_fifo_mem_q_in_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_024:in_0_ready -> dconv_fifo_mem_q_in_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                             // avalon_st_adapter_024:out_0_valid -> dconv_fifo_mem_q_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                              // avalon_st_adapter_024:out_0_data -> dconv_fifo_mem_q_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                             // dconv_fifo_mem_q_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                             // avalon_st_adapter_024:out_0_error -> dconv_fifo_mem_q_in_csr_agent:rdata_fifo_sink_error
	wire          nmr_parameters_init_delay_s1_agent_rdata_fifo_out_valid;                                       // nmr_parameters_init_delay_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] nmr_parameters_init_delay_s1_agent_rdata_fifo_out_data;                                        // nmr_parameters_init_delay_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_025:in_0_data
	wire          nmr_parameters_init_delay_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_025:in_0_ready -> nmr_parameters_init_delay_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                             // avalon_st_adapter_025:out_0_valid -> nmr_parameters_init_delay_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                              // avalon_st_adapter_025:out_0_data -> nmr_parameters_init_delay_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                             // nmr_parameters_init_delay_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                             // avalon_st_adapter_025:out_0_error -> nmr_parameters_init_delay_s1_agent:rdata_fifo_sink_error
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid;                             // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data;                              // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_026:in_0_data
	wire          nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_026:in_0_ready -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                             // avalon_st_adapter_026:out_0_valid -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                              // avalon_st_adapter_026:out_0_data -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                             // nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                             // avalon_st_adapter_026:out_0_error -> nmr_sys_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_error
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid;                            // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data;                             // analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_027:in_0_data
	wire          analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_027:in_0_ready -> analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                             // avalon_st_adapter_027:out_0_valid -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                              // avalon_st_adapter_027:out_0_data -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                             // analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                             // avalon_st_adapter_027:out_0_error -> analyzer_pll_reconfig_mgmt_avalon_slave_agent:rdata_fifo_sink_error
	wire          dconv_fifo_mem_out_agent_rdata_fifo_out_valid;                                                 // dconv_fifo_mem_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] dconv_fifo_mem_out_agent_rdata_fifo_out_data;                                                  // dconv_fifo_mem_out_agent_rdata_fifo:out_data -> avalon_st_adapter_028:in_0_data
	wire          dconv_fifo_mem_out_agent_rdata_fifo_out_ready;                                                 // avalon_st_adapter_028:in_0_ready -> dconv_fifo_mem_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                             // avalon_st_adapter_028:out_0_valid -> dconv_fifo_mem_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                              // avalon_st_adapter_028:out_0_data -> dconv_fifo_mem_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                             // dconv_fifo_mem_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                             // avalon_st_adapter_028:out_0_error -> dconv_fifo_mem_out_agent:rdata_fifo_sink_error
	wire          dconv_fifo_mem_q_out_agent_rdata_fifo_out_valid;                                               // dconv_fifo_mem_q_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] dconv_fifo_mem_q_out_agent_rdata_fifo_out_data;                                                // dconv_fifo_mem_q_out_agent_rdata_fifo:out_data -> avalon_st_adapter_029:in_0_data
	wire          dconv_fifo_mem_q_out_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_029:in_0_ready -> dconv_fifo_mem_q_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                             // avalon_st_adapter_029:out_0_valid -> dconv_fifo_mem_q_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                              // avalon_st_adapter_029:out_0_data -> dconv_fifo_mem_q_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                             // dconv_fifo_mem_q_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                             // avalon_st_adapter_029:out_0_error -> dconv_fifo_mem_q_out_agent:rdata_fifo_sink_error
	wire          nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_valid;                                     // nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_data;                                      // nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_030:in_0_data
	wire          nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_030:in_0_ready -> nmr_parameters_pulse_180deg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                             // avalon_st_adapter_030:out_0_valid -> nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                                              // avalon_st_adapter_030:out_0_data -> nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                             // nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                             // avalon_st_adapter_030:out_0_error -> nmr_parameters_pulse_180deg_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_valid;                                      // nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_data;                                       // nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_031:in_0_data
	wire          nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_031:in_0_ready -> nmr_parameters_pulse_90deg_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                             // avalon_st_adapter_031:out_0_valid -> nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                                              // avalon_st_adapter_031:out_0_data -> nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                             // nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                             // avalon_st_adapter_031:out_0_error -> nmr_parameters_pulse_90deg_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_valid;                                         // nmr_parameters_pulse_t1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_032:in_0_valid
	wire   [33:0] nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_data;                                          // nmr_parameters_pulse_t1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_032:in_0_data
	wire          nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_032:in_0_ready -> nmr_parameters_pulse_t1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_032_out_0_valid;                                                             // avalon_st_adapter_032:out_0_valid -> nmr_parameters_pulse_t1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_032_out_0_data;                                                              // avalon_st_adapter_032:out_0_data -> nmr_parameters_pulse_t1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                                             // nmr_parameters_pulse_t1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                                             // avalon_st_adapter_032:out_0_error -> nmr_parameters_pulse_t1_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_valid;                                         // nmr_parameters_rx_delay_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_033:in_0_valid
	wire   [33:0] nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_data;                                          // nmr_parameters_rx_delay_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_033:in_0_data
	wire          nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_033:in_0_ready -> nmr_parameters_rx_delay_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_033_out_0_valid;                                                             // avalon_st_adapter_033:out_0_valid -> nmr_parameters_rx_delay_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_033_out_0_data;                                                              // avalon_st_adapter_033:out_0_data -> nmr_parameters_rx_delay_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                                             // nmr_parameters_rx_delay_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                                             // avalon_st_adapter_033:out_0_error -> nmr_parameters_rx_delay_s1_agent:rdata_fifo_sink_error
	wire          ctrl_out_s1_agent_rdata_fifo_out_valid;                                                        // ctrl_out_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_034:in_0_valid
	wire   [33:0] ctrl_out_s1_agent_rdata_fifo_out_data;                                                         // ctrl_out_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_034:in_0_data
	wire          ctrl_out_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_034:in_0_ready -> ctrl_out_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_034_out_0_valid;                                                             // avalon_st_adapter_034:out_0_valid -> ctrl_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_034_out_0_data;                                                              // avalon_st_adapter_034:out_0_data -> ctrl_out_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                                             // ctrl_out_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                                             // avalon_st_adapter_034:out_0_error -> ctrl_out_s1_agent:rdata_fifo_sink_error
	wire          ctrl_in_s1_agent_rdata_fifo_out_valid;                                                         // ctrl_in_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_035:in_0_valid
	wire   [33:0] ctrl_in_s1_agent_rdata_fifo_out_data;                                                          // ctrl_in_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_035:in_0_data
	wire          ctrl_in_s1_agent_rdata_fifo_out_ready;                                                         // avalon_st_adapter_035:in_0_ready -> ctrl_in_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_035_out_0_valid;                                                             // avalon_st_adapter_035:out_0_valid -> ctrl_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_035_out_0_data;                                                              // avalon_st_adapter_035:out_0_data -> ctrl_in_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                                             // ctrl_in_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                                             // avalon_st_adapter_035:out_0_error -> ctrl_in_s1_agent:rdata_fifo_sink_error
	wire          aux_cnt_out_s1_agent_rdata_fifo_out_valid;                                                     // aux_cnt_out_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_036:in_0_valid
	wire   [33:0] aux_cnt_out_s1_agent_rdata_fifo_out_data;                                                      // aux_cnt_out_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_036:in_0_data
	wire          aux_cnt_out_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_036:in_0_ready -> aux_cnt_out_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_036_out_0_valid;                                                             // avalon_st_adapter_036:out_0_valid -> aux_cnt_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_036_out_0_data;                                                              // avalon_st_adapter_036:out_0_data -> aux_cnt_out_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                                             // aux_cnt_out_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                                             // avalon_st_adapter_036:out_0_error -> aux_cnt_out_s1_agent:rdata_fifo_sink_error
	wire          nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_valid;                                 // nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_037:in_0_valid
	wire   [33:0] nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_data;                                  // nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_037:in_0_data
	wire          nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_037:in_0_ready -> nmr_parameters_samples_per_echo_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_037_out_0_valid;                                                             // avalon_st_adapter_037:out_0_valid -> nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_037_out_0_data;                                                              // avalon_st_adapter_037:out_0_data -> nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_037_out_0_ready;                                                             // nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_037:out_0_ready
	wire    [0:0] avalon_st_adapter_037_out_0_error;                                                             // avalon_st_adapter_037:out_0_error -> nmr_parameters_samples_per_echo_s1_agent:rdata_fifo_sink_error
	wire          dac_grad_spi_control_port_agent_rdata_fifo_out_valid;                                          // dac_grad_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_038:in_0_valid
	wire   [33:0] dac_grad_spi_control_port_agent_rdata_fifo_out_data;                                           // dac_grad_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_038:in_0_data
	wire          dac_grad_spi_control_port_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_038:in_0_ready -> dac_grad_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_038_out_0_valid;                                                             // avalon_st_adapter_038:out_0_valid -> dac_grad_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_038_out_0_data;                                                              // avalon_st_adapter_038:out_0_data -> dac_grad_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_038_out_0_ready;                                                             // dac_grad_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_038:out_0_ready
	wire    [0:0] avalon_st_adapter_038_out_0_error;                                                             // avalon_st_adapter_038:out_0_error -> dac_grad_spi_control_port_agent:rdata_fifo_sink_error
	wire          spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_valid;                                    // spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_039:in_0_valid
	wire   [33:0] spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_data;                                     // spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_039:in_0_data
	wire          spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_039:in_0_ready -> spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_039_out_0_valid;                                                             // avalon_st_adapter_039:out_0_valid -> spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_039_out_0_data;                                                              // avalon_st_adapter_039:out_0_data -> spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_039_out_0_ready;                                                             // spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_039:out_0_ready
	wire    [0:0] avalon_st_adapter_039_out_0_error;                                                             // avalon_st_adapter_039:out_0_error -> spi_mtch_ntwrk_spi_control_port_agent:rdata_fifo_sink_error
	wire          spi_afe_relays_spi_control_port_agent_rdata_fifo_out_valid;                                    // spi_afe_relays_spi_control_port_agent_rdata_fifo:out_valid -> avalon_st_adapter_040:in_0_valid
	wire   [33:0] spi_afe_relays_spi_control_port_agent_rdata_fifo_out_data;                                     // spi_afe_relays_spi_control_port_agent_rdata_fifo:out_data -> avalon_st_adapter_040:in_0_data
	wire          spi_afe_relays_spi_control_port_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_040:in_0_ready -> spi_afe_relays_spi_control_port_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_040_out_0_valid;                                                             // avalon_st_adapter_040:out_0_valid -> spi_afe_relays_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_040_out_0_data;                                                              // avalon_st_adapter_040:out_0_data -> spi_afe_relays_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_040_out_0_ready;                                                             // spi_afe_relays_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_040:out_0_ready
	wire    [0:0] avalon_st_adapter_040_out_0_error;                                                             // avalon_st_adapter_040:out_0_error -> spi_afe_relays_spi_control_port_agent:rdata_fifo_sink_error
	wire          dma_fifo_control_port_slave_agent_rdata_fifo_out_valid;                                        // dma_fifo_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_041:in_0_valid
	wire   [33:0] dma_fifo_control_port_slave_agent_rdata_fifo_out_data;                                         // dma_fifo_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_041:in_0_data
	wire          dma_fifo_control_port_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_041:in_0_ready -> dma_fifo_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_041_out_0_valid;                                                             // avalon_st_adapter_041:out_0_valid -> dma_fifo_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_041_out_0_data;                                                              // avalon_st_adapter_041:out_0_data -> dma_fifo_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_041_out_0_ready;                                                             // dma_fifo_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_041:out_0_ready
	wire    [0:0] avalon_st_adapter_041_out_0_error;                                                             // avalon_st_adapter_041:out_0_error -> dma_fifo_control_port_slave_agent:rdata_fifo_sink_error
	wire          dma_dconvi_control_port_slave_agent_rdata_fifo_out_valid;                                      // dma_dconvi_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_042:in_0_valid
	wire   [33:0] dma_dconvi_control_port_slave_agent_rdata_fifo_out_data;                                       // dma_dconvi_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_042:in_0_data
	wire          dma_dconvi_control_port_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_042:in_0_ready -> dma_dconvi_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_042_out_0_valid;                                                             // avalon_st_adapter_042:out_0_valid -> dma_dconvi_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_042_out_0_data;                                                              // avalon_st_adapter_042:out_0_data -> dma_dconvi_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_042_out_0_ready;                                                             // dma_dconvi_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_042:out_0_ready
	wire    [0:0] avalon_st_adapter_042_out_0_error;                                                             // avalon_st_adapter_042:out_0_error -> dma_dconvi_control_port_slave_agent:rdata_fifo_sink_error
	wire          dma_dconvq_control_port_slave_agent_rdata_fifo_out_valid;                                      // dma_dconvq_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_043:in_0_valid
	wire   [33:0] dma_dconvq_control_port_slave_agent_rdata_fifo_out_data;                                       // dma_dconvq_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_043:in_0_data
	wire          dma_dconvq_control_port_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_043:in_0_ready -> dma_dconvq_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_043_out_0_valid;                                                             // avalon_st_adapter_043:out_0_valid -> dma_dconvq_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_043_out_0_data;                                                              // avalon_st_adapter_043:out_0_data -> dma_dconvq_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_043_out_0_ready;                                                             // dma_dconvq_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_043:out_0_ready
	wire    [0:0] avalon_st_adapter_043_out_0_error;                                                             // avalon_st_adapter_043:out_0_error -> dma_dconvq_control_port_slave_agent:rdata_fifo_sink_error
	wire          dma_dummy_control_port_slave_agent_rdata_fifo_out_valid;                                       // dma_dummy_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_044:in_0_valid
	wire   [33:0] dma_dummy_control_port_slave_agent_rdata_fifo_out_data;                                        // dma_dummy_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_044:in_0_data
	wire          dma_dummy_control_port_slave_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_044:in_0_ready -> dma_dummy_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_044_out_0_valid;                                                             // avalon_st_adapter_044:out_0_valid -> dma_dummy_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_044_out_0_data;                                                              // avalon_st_adapter_044:out_0_data -> dma_dummy_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_044_out_0_ready;                                                             // dma_dummy_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_044:out_0_ready
	wire    [0:0] avalon_st_adapter_044_out_0_error;                                                             // avalon_st_adapter_044:out_0_error -> dma_dummy_control_port_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dma_fifo_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_fifo_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_fifo_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_fifo_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_fifo_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_fifo_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_fifo_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_fifo_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_fifo_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_fifo_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_fifo_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_fifo_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_fifo_write_master_write),                                              //                          .write
		.av_writedata           (dma_fifo_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_read                (1'b0),                                                                     //               (terminated)
		.av_readdata            (),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dconvi_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                                 //                     reset.reset
		.uav_address            (dma_dconvi_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dconvi_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dconvi_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dconvi_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dconvi_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dconvi_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dconvi_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dconvi_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dconvi_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dconvi_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dconvi_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dconvi_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dconvi_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_dconvi_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_dconvi_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_dconvi_write_master_write),                                              //                          .write
		.av_writedata           (dma_dconvi_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dconvq_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                                 //                     reset.reset
		.uav_address            (dma_dconvq_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dconvq_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dconvq_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dconvq_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dconvq_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dconvq_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dconvq_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dconvq_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dconvq_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dconvq_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dconvq_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dconvq_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dconvq_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_dconvq_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_dconvq_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_dconvq_write_master_write),                                              //                          .write
		.av_writedata           (dma_dconvq_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dummy_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (dma_dummy_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dummy_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dummy_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dummy_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dummy_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dummy_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dummy_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dummy_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dummy_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dummy_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dummy_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dummy_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dummy_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_dummy_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_dummy_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_dummy_write_master_write),                                              //                          .write
		.av_writedata           (dma_dummy_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_read                (1'b0),                                                                      //               (terminated)
		.av_readdata            (),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_fifo_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (dma_fifo_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_fifo_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_fifo_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_fifo_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_fifo_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_fifo_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_fifo_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_fifo_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_fifo_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_fifo_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_fifo_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_fifo_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_fifo_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_fifo_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_fifo_read_master_read),                                               //                          .read
		.av_readdata            (dma_fifo_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_fifo_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_byteenable          (4'b1111),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_write               (1'b0),                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_non_sec_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (master_non_sec_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (master_non_sec_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (master_non_sec_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (master_non_sec_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (master_non_sec_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (master_non_sec_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (master_non_sec_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (master_non_sec_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (master_non_sec_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (master_non_sec_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (master_non_sec_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (master_non_sec_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (master_non_sec_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (master_non_sec_master_byteenable),                                         //                          .byteenable
		.av_read                (master_non_sec_master_read),                                               //                          .read
		.av_readdata            (master_non_sec_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (master_non_sec_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (master_non_sec_master_write),                                              //                          .write
		.av_writedata           (master_non_sec_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dconvq_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (dma_dconvq_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dconvq_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dconvq_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dconvq_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dconvq_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dconvq_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dconvq_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dconvq_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dconvq_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dconvq_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dconvq_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dconvq_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dconvq_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_dconvq_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_dconvq_read_master_read),                                               //                          .read
		.av_readdata            (dma_dconvq_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_dconvq_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dconvi_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (dma_dconvi_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dconvi_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dconvi_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dconvi_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dconvi_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dconvi_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dconvi_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dconvi_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dconvi_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dconvi_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dconvi_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dconvi_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dconvi_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_dconvi_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_dconvi_read_master_read),                                               //                          .read
		.av_readdata            (dma_dconvi_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_dconvi_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_dummy_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dma_dummy_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_dummy_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_dummy_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_dummy_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_dummy_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_dummy_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_dummy_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_dummy_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_dummy_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_dummy_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_dummy_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_dummy_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_dummy_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_dummy_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_dummy_read_master_read),                                               //                          .read
		.av_readdata            (dma_dummy_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_dummy_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_write               (1'b0),                                                                     //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy64_in_in_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_dummy64_in_in_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy64_in_in_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (fifo_dummy64_in_in_agent_m0_read),           //                         .read
		.uav_write              (fifo_dummy64_in_in_agent_m0_write),          //                         .write
		.uav_waitrequest        (fifo_dummy64_in_in_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy64_in_in_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (fifo_dummy64_in_in_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (fifo_dummy64_in_in_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (fifo_dummy64_in_in_agent_m0_writedata),      //                         .writedata
		.uav_lock               (fifo_dummy64_in_in_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (fifo_dummy64_in_in_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (fifo_dummy64_in_in_address),                 //      avalon_anti_slave_0.address
		.av_write               (fifo_dummy64_in_in_write),                   //                         .write
		.av_writedata           (fifo_dummy64_in_in_writedata),               //                         .writedata
		.av_waitrequest         (fifo_dummy64_in_in_waitrequest),             //                         .waitrequest
		.av_read                (),                                           //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),       //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy_in_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_dummy_in_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy_in_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (fifo_dummy_in_agent_m0_read),                //                         .read
		.uav_write              (fifo_dummy_in_agent_m0_write),               //                         .write
		.uav_waitrequest        (fifo_dummy_in_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy_in_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (fifo_dummy_in_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (fifo_dummy_in_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (fifo_dummy_in_agent_m0_writedata),           //                         .writedata
		.uav_lock               (fifo_dummy_in_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (fifo_dummy_in_agent_m0_debugaccess),         //                         .debugaccess
		.av_write               (fifo_dummy_in_write),                        //      avalon_anti_slave_0.write
		.av_writedata           (fifo_dummy_in_writedata),                    //                         .writedata
		.av_waitrequest         (fifo_dummy_in_waitrequest),                  //                         .waitrequest
		.av_address             (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),       //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy64_in_in_csr_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (fifo_dummy64_in_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy64_in_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_dummy64_in_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_dummy64_in_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_dummy64_in_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy64_in_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_dummy64_in_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_dummy64_in_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_dummy64_in_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_dummy64_in_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_dummy64_in_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_dummy64_in_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_dummy64_in_in_csr_write),                  //                         .write
		.av_read                (fifo_dummy64_in_in_csr_read),                   //                         .read
		.av_readdata            (fifo_dummy64_in_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_dummy64_in_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy64_out_in_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (fifo_dummy64_out_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy64_out_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_dummy64_out_in_csr_agent_m0_read),          //                         .read
		.uav_write              (fifo_dummy64_out_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_dummy64_out_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy64_out_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_dummy64_out_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_dummy64_out_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_dummy64_out_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_dummy64_out_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_dummy64_out_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_dummy64_out_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (fifo_dummy64_out_in_csr_write),                  //                         .write
		.av_read                (fifo_dummy64_out_in_csr_read),                   //                         .read
		.av_readdata            (fifo_dummy64_out_in_csr_readdata),               //                         .readdata
		.av_writedata           (fifo_dummy64_out_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy_in_csr_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_dummy_in_csr_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy_in_csr_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (fifo_dummy_in_csr_agent_m0_read),            //                         .read
		.uav_write              (fifo_dummy_in_csr_agent_m0_write),           //                         .write
		.uav_waitrequest        (fifo_dummy_in_csr_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy_in_csr_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (fifo_dummy_in_csr_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (fifo_dummy_in_csr_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (fifo_dummy_in_csr_agent_m0_writedata),       //                         .writedata
		.uav_lock               (fifo_dummy_in_csr_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (fifo_dummy_in_csr_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (fifo_dummy_in_csr_address),                  //      avalon_anti_slave_0.address
		.av_write               (fifo_dummy_in_csr_write),                    //                         .write
		.av_read                (fifo_dummy_in_csr_read),                     //                         .read
		.av_readdata            (fifo_dummy_in_csr_readdata),                 //                         .readdata
		.av_writedata           (fifo_dummy_in_csr_writedata),                //                         .writedata
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy64_out_out_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (fifo_dummy64_out_out_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy64_out_out_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_dummy64_out_out_agent_m0_read),          //                         .read
		.uav_write              (fifo_dummy64_out_out_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_dummy64_out_out_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy64_out_out_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_dummy64_out_out_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_dummy64_out_out_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_dummy64_out_out_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_dummy64_out_out_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_dummy64_out_out_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fifo_dummy64_out_out_address),                //      avalon_anti_slave_0.address
		.av_read                (fifo_dummy64_out_out_read),                   //                         .read
		.av_readdata            (fifo_dummy64_out_out_readdata),               //                         .readdata
		.av_waitrequest         (fifo_dummy64_out_out_waitrequest),            //                         .waitrequest
		.av_write               (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_dummy_out_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo_dummy_out_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_dummy_out_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (fifo_dummy_out_agent_m0_read),               //                         .read
		.uav_write              (fifo_dummy_out_agent_m0_write),              //                         .write
		.uav_waitrequest        (fifo_dummy_out_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (fifo_dummy_out_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (fifo_dummy_out_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (fifo_dummy_out_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (fifo_dummy_out_agent_m0_writedata),          //                         .writedata
		.uav_lock               (fifo_dummy_out_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (fifo_dummy_out_agent_m0_debugaccess),        //                         .debugaccess
		.av_read                (fifo_dummy_out_read),                        //      avalon_anti_slave_0.read
		.av_readdata            (fifo_dummy_out_readdata),                    //                         .readdata
		.av_waitrequest         (fifo_dummy_out_waitrequest),                 //                         .waitrequest
		.av_address             (),                                           //              (terminated)
		.av_write               (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                  //                         .read
		.uav_write              (switches_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (switches_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (switches_s1_readdata),                       //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                     //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sdram_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                             //                         .write
		.av_read                (sdram_s1_read),                              //                         .read
		.av_readdata            (sdram_s1_readdata),                          //                         .readdata
		.av_writedata           (sdram_s1_writedata),                         //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                        //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                     //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                       //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                        //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_fifo_mem_out_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_fifo_mem_out_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (adc_fifo_mem_out_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (adc_fifo_mem_out_agent_m0_read),                    //                         .read
		.uav_write              (adc_fifo_mem_out_agent_m0_write),                   //                         .write
		.uav_waitrequest        (adc_fifo_mem_out_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (adc_fifo_mem_out_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (adc_fifo_mem_out_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (adc_fifo_mem_out_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (adc_fifo_mem_out_agent_m0_writedata),               //                         .writedata
		.uav_lock               (adc_fifo_mem_out_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (adc_fifo_mem_out_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (adc_fifo_mem_out_address),                          //      avalon_anti_slave_0.address
		.av_read                (adc_fifo_mem_out_read),                             //                         .read
		.av_readdata            (adc_fifo_mem_out_readdata),                         //                         .readdata
		.av_waitrequest         (adc_fifo_mem_out_waitrequest),                      //                         .waitrequest
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_adc_val_sub_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (nmr_parameters_adc_val_sub_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_adc_val_sub_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_adc_val_sub_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_adc_val_sub_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_adc_val_sub_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_adc_val_sub_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_adc_val_sub_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_adc_val_sub_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_adc_val_sub_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_adc_val_sub_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_adc_val_sub_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_adc_val_sub_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_adc_val_sub_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_adc_val_sub_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_adc_val_sub_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_adc_val_sub_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fir_avalon_mm_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (dconv_fir_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fir_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dconv_fir_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (dconv_fir_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dconv_fir_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dconv_fir_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dconv_fir_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dconv_fir_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dconv_fir_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dconv_fir_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dconv_fir_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dconv_fir_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dconv_fir_avalon_mm_slave_write),                  //                         .write
		.av_read                (dconv_fir_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (dconv_fir_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (dconv_fir_avalon_mm_slave_writedata),              //                         .writedata
		.av_readdatavalid       (dconv_fir_avalon_mm_slave_readdatavalid),          //                         .readdatavalid
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fir_q_avalon_mm_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (dconv_fir_q_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fir_q_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dconv_fir_q_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (dconv_fir_q_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dconv_fir_q_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dconv_fir_q_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dconv_fir_q_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dconv_fir_q_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dconv_fir_q_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dconv_fir_q_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dconv_fir_q_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dconv_fir_q_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dconv_fir_q_avalon_mm_slave_write),                  //                         .write
		.av_read                (dconv_fir_q_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (dconv_fir_q_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (dconv_fir_q_avalon_mm_slave_writedata),              //                         .writedata
		.av_readdatavalid       (dconv_fir_q_avalon_mm_slave_readdatavalid),          //                         .readdatavalid
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_vga_avalon_slave_translator (
		.clk                    (gp_pll_outclk0_clk),                                            //                      clk.clk
		.reset                  (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_vfr_vga_avalon_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (alt_vip_vfr_vga_avalon_slave_agent_m0_read),                    //                         .read
		.uav_write              (alt_vip_vfr_vga_avalon_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (alt_vip_vfr_vga_avalon_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (alt_vip_vfr_vga_avalon_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (alt_vip_vfr_vga_avalon_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (alt_vip_vfr_vga_avalon_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_vga_avalon_slave_write),                            //                         .write
		.av_read                (alt_vip_vfr_vga_avalon_slave_read),                             //                         .read
		.av_readdata            (alt_vip_vfr_vga_avalon_slave_readdata),                         //                         .readdata
		.av_writedata           (alt_vip_vfr_vga_avalon_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_int_csr_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_int_csr_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_int_csr_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (i2c_int_csr_agent_m0_read),                  //                         .read
		.uav_write              (i2c_int_csr_agent_m0_write),                 //                         .write
		.uav_waitrequest        (i2c_int_csr_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (i2c_int_csr_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (i2c_int_csr_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (i2c_int_csr_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (i2c_int_csr_agent_m0_writedata),             //                         .writedata
		.uav_lock               (i2c_int_csr_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (i2c_int_csr_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (i2c_int_csr_address),                        //      avalon_anti_slave_0.address
		.av_write               (i2c_int_csr_write),                          //                         .write
		.av_read                (i2c_int_csr_read),                           //                         .read
		.av_readdata            (i2c_int_csr_readdata),                       //                         .readdata
		.av_writedata           (i2c_int_csr_writedata),                      //                         .writedata
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_ext_csr_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_ext_csr_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_ext_csr_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (i2c_ext_csr_agent_m0_read),                  //                         .read
		.uav_write              (i2c_ext_csr_agent_m0_write),                 //                         .write
		.uav_waitrequest        (i2c_ext_csr_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (i2c_ext_csr_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (i2c_ext_csr_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (i2c_ext_csr_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (i2c_ext_csr_agent_m0_writedata),             //                         .writedata
		.uav_lock               (i2c_ext_csr_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (i2c_ext_csr_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (i2c_ext_csr_address),                        //      avalon_anti_slave_0.address
		.av_write               (i2c_ext_csr_write),                          //                         .write
		.av_read                (i2c_ext_csr_read),                           //                         .read
		.av_readdata            (i2c_ext_csr_readdata),                       //                         .readdata
		.av_writedata           (i2c_ext_csr_writedata),                      //                         .writedata
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_delay_nosig_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (nmr_parameters_delay_nosig_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_delay_nosig_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_delay_nosig_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_delay_nosig_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_delay_nosig_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_delay_nosig_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_delay_nosig_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_delay_nosig_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_delay_nosig_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_delay_nosig_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_delay_nosig_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_delay_nosig_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_delay_nosig_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_delay_nosig_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_delay_nosig_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_delay_nosig_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_delay_sig_s1_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (nmr_parameters_delay_sig_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_delay_sig_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_delay_sig_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_delay_sig_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_delay_sig_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_delay_sig_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_delay_sig_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_delay_sig_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_delay_sig_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_delay_sig_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_delay_sig_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_delay_sig_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_delay_sig_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_delay_sig_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_delay_sig_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_delay_sig_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_delay_t1_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (nmr_parameters_delay_t1_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_delay_t1_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_delay_t1_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_delay_t1_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_delay_t1_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_delay_t1_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_delay_t1_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_delay_t1_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_delay_t1_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_delay_t1_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_delay_t1_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_delay_t1_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_delay_t1_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_delay_t1_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_delay_t1_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_delay_t1_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_echoes_per_scan_s1_translator (
		.clk                    (clk_0_clk_clk),                                            //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (nmr_parameters_echoes_per_scan_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_echoes_per_scan_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_echoes_per_scan_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_echoes_per_scan_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_echoes_per_scan_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_echoes_per_scan_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_echoes_per_scan_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_echoes_per_scan_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_echoes_per_scan_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_echoes_per_scan_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_echoes_per_scan_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_echoes_per_scan_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_echoes_per_scan_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_echoes_per_scan_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_echoes_per_scan_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_echoes_per_scan_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                         //              (terminated)
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_fifo_mem_in_csr_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_fifo_mem_in_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (adc_fifo_mem_in_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (adc_fifo_mem_in_csr_agent_m0_read),                 //                         .read
		.uav_write              (adc_fifo_mem_in_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (adc_fifo_mem_in_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (adc_fifo_mem_in_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (adc_fifo_mem_in_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (adc_fifo_mem_in_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (adc_fifo_mem_in_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (adc_fifo_mem_in_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (adc_fifo_mem_in_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (adc_fifo_mem_in_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (adc_fifo_mem_in_csr_write),                         //                         .write
		.av_read                (adc_fifo_mem_in_csr_read),                          //                         .read
		.av_readdata            (adc_fifo_mem_in_csr_readdata),                      //                         .readdata
		.av_writedata           (adc_fifo_mem_in_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fifo_mem_in_csr_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dconv_fifo_mem_in_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fifo_mem_in_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (dconv_fifo_mem_in_csr_agent_m0_read),               //                         .read
		.uav_write              (dconv_fifo_mem_in_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (dconv_fifo_mem_in_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (dconv_fifo_mem_in_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (dconv_fifo_mem_in_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (dconv_fifo_mem_in_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (dconv_fifo_mem_in_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (dconv_fifo_mem_in_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (dconv_fifo_mem_in_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (dconv_fifo_mem_in_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (dconv_fifo_mem_in_csr_write),                       //                         .write
		.av_read                (dconv_fifo_mem_in_csr_read),                        //                         .read
		.av_readdata            (dconv_fifo_mem_in_csr_readdata),                    //                         .readdata
		.av_writedata           (dconv_fifo_mem_in_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fifo_mem_q_in_csr_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dconv_fifo_mem_q_in_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fifo_mem_q_in_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (dconv_fifo_mem_q_in_csr_agent_m0_read),             //                         .read
		.uav_write              (dconv_fifo_mem_q_in_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (dconv_fifo_mem_q_in_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (dconv_fifo_mem_q_in_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (dconv_fifo_mem_q_in_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (dconv_fifo_mem_q_in_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (dconv_fifo_mem_q_in_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (dconv_fifo_mem_q_in_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (dconv_fifo_mem_q_in_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (dconv_fifo_mem_q_in_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (dconv_fifo_mem_q_in_csr_write),                     //                         .write
		.av_read                (dconv_fifo_mem_q_in_csr_read),                      //                         .read
		.av_readdata            (dconv_fifo_mem_q_in_csr_readdata),                  //                         .readdata
		.av_writedata           (dconv_fifo_mem_q_in_csr_writedata),                 //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_init_delay_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (nmr_parameters_init_delay_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_init_delay_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_init_delay_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_init_delay_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_init_delay_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_init_delay_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_init_delay_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_init_delay_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_init_delay_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_init_delay_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_init_delay_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_init_delay_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_init_delay_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_init_delay_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_init_delay_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_init_delay_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_sys_pll_reconfig_mgmt_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                                 //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address            (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_sys_pll_reconfig_mgmt_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_sys_pll_reconfig_mgmt_avalon_slave_write),                  //                         .write
		.av_read                (nmr_sys_pll_reconfig_mgmt_avalon_slave_read),                   //                         .read
		.av_readdata            (nmr_sys_pll_reconfig_mgmt_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (nmr_sys_pll_reconfig_mgmt_avalon_slave_writedata),              //                         .writedata
		.av_waitrequest         (nmr_sys_pll_reconfig_mgmt_avalon_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) analyzer_pll_reconfig_mgmt_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                                  //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                     //                    reset.reset
		.uav_address            (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (analyzer_pll_reconfig_mgmt_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (analyzer_pll_reconfig_mgmt_avalon_slave_write),                  //                         .write
		.av_read                (analyzer_pll_reconfig_mgmt_avalon_slave_read),                   //                         .read
		.av_readdata            (analyzer_pll_reconfig_mgmt_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (analyzer_pll_reconfig_mgmt_avalon_slave_writedata),              //                         .writedata
		.av_waitrequest         (analyzer_pll_reconfig_mgmt_avalon_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_byteenable          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fifo_mem_out_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dconv_fifo_mem_out_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fifo_mem_out_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (dconv_fifo_mem_out_agent_m0_read),                  //                         .read
		.uav_write              (dconv_fifo_mem_out_agent_m0_write),                 //                         .write
		.uav_waitrequest        (dconv_fifo_mem_out_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (dconv_fifo_mem_out_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (dconv_fifo_mem_out_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (dconv_fifo_mem_out_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (dconv_fifo_mem_out_agent_m0_writedata),             //                         .writedata
		.uav_lock               (dconv_fifo_mem_out_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (dconv_fifo_mem_out_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (dconv_fifo_mem_out_address),                        //      avalon_anti_slave_0.address
		.av_read                (dconv_fifo_mem_out_read),                           //                         .read
		.av_readdata            (dconv_fifo_mem_out_readdata),                       //                         .readdata
		.av_waitrequest         (dconv_fifo_mem_out_waitrequest),                    //                         .waitrequest
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dconv_fifo_mem_q_out_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dconv_fifo_mem_q_out_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (dconv_fifo_mem_q_out_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (dconv_fifo_mem_q_out_agent_m0_read),                //                         .read
		.uav_write              (dconv_fifo_mem_q_out_agent_m0_write),               //                         .write
		.uav_waitrequest        (dconv_fifo_mem_q_out_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (dconv_fifo_mem_q_out_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (dconv_fifo_mem_q_out_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (dconv_fifo_mem_q_out_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (dconv_fifo_mem_q_out_agent_m0_writedata),           //                         .writedata
		.uav_lock               (dconv_fifo_mem_q_out_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (dconv_fifo_mem_q_out_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (dconv_fifo_mem_q_out_address),                      //      avalon_anti_slave_0.address
		.av_read                (dconv_fifo_mem_q_out_read),                         //                         .read
		.av_readdata            (dconv_fifo_mem_q_out_readdata),                     //                         .readdata
		.av_waitrequest         (dconv_fifo_mem_q_out_waitrequest),                  //                         .waitrequest
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_pulse_180deg_s1_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (nmr_parameters_pulse_180deg_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_pulse_180deg_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_pulse_180deg_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_pulse_180deg_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_pulse_180deg_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_pulse_180deg_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_pulse_180deg_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_pulse_180deg_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_pulse_180deg_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_pulse_180deg_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_pulse_180deg_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_pulse_180deg_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_pulse_180deg_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_pulse_180deg_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_pulse_180deg_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_pulse_180deg_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_pulse_90deg_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (nmr_parameters_pulse_90deg_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_pulse_90deg_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_pulse_90deg_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_pulse_90deg_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_pulse_90deg_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_pulse_90deg_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_pulse_90deg_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_pulse_90deg_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_pulse_90deg_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_pulse_90deg_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_pulse_90deg_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_pulse_90deg_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_pulse_90deg_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_pulse_90deg_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_pulse_90deg_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_pulse_90deg_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_pulse_t1_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (nmr_parameters_pulse_t1_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_pulse_t1_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_pulse_t1_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_pulse_t1_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_pulse_t1_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_pulse_t1_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_pulse_t1_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_pulse_t1_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_pulse_t1_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_pulse_t1_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_pulse_t1_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_pulse_t1_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_pulse_t1_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_pulse_t1_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_pulse_t1_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_pulse_t1_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_rx_delay_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (nmr_parameters_rx_delay_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_rx_delay_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_rx_delay_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_rx_delay_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_rx_delay_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_rx_delay_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_rx_delay_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_rx_delay_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_rx_delay_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_rx_delay_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_rx_delay_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_rx_delay_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_rx_delay_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_rx_delay_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_rx_delay_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_rx_delay_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ctrl_out_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ctrl_out_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ctrl_out_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ctrl_out_s1_agent_m0_read),                  //                         .read
		.uav_write              (ctrl_out_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ctrl_out_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ctrl_out_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ctrl_out_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ctrl_out_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ctrl_out_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ctrl_out_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ctrl_out_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ctrl_out_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ctrl_out_s1_write),                          //                         .write
		.av_readdata            (ctrl_out_s1_readdata),                       //                         .readdata
		.av_writedata           (ctrl_out_s1_writedata),                      //                         .writedata
		.av_chipselect          (ctrl_out_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ctrl_in_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ctrl_in_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (ctrl_in_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (ctrl_in_s1_agent_m0_read),                   //                         .read
		.uav_write              (ctrl_in_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (ctrl_in_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (ctrl_in_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (ctrl_in_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (ctrl_in_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (ctrl_in_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (ctrl_in_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (ctrl_in_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (ctrl_in_s1_address),                         //      avalon_anti_slave_0.address
		.av_readdata            (ctrl_in_s1_readdata),                        //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) aux_cnt_out_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (aux_cnt_out_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (aux_cnt_out_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (aux_cnt_out_s1_agent_m0_read),               //                         .read
		.uav_write              (aux_cnt_out_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (aux_cnt_out_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (aux_cnt_out_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (aux_cnt_out_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (aux_cnt_out_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (aux_cnt_out_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (aux_cnt_out_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (aux_cnt_out_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (aux_cnt_out_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (aux_cnt_out_s1_write),                       //                         .write
		.av_readdata            (aux_cnt_out_s1_readdata),                    //                         .readdata
		.av_writedata           (aux_cnt_out_s1_writedata),                   //                         .writedata
		.av_chipselect          (aux_cnt_out_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nmr_parameters_samples_per_echo_s1_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (nmr_parameters_samples_per_echo_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nmr_parameters_samples_per_echo_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nmr_parameters_samples_per_echo_s1_agent_m0_read),          //                         .read
		.uav_write              (nmr_parameters_samples_per_echo_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (nmr_parameters_samples_per_echo_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nmr_parameters_samples_per_echo_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nmr_parameters_samples_per_echo_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nmr_parameters_samples_per_echo_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nmr_parameters_samples_per_echo_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nmr_parameters_samples_per_echo_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nmr_parameters_samples_per_echo_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nmr_parameters_samples_per_echo_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (nmr_parameters_samples_per_echo_s1_write),                  //                         .write
		.av_readdata            (nmr_parameters_samples_per_echo_s1_readdata),               //                         .readdata
		.av_writedata           (nmr_parameters_samples_per_echo_s1_writedata),              //                         .writedata
		.av_chipselect          (nmr_parameters_samples_per_echo_s1_chipselect),             //                         .chipselect
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dac_grad_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (dac_grad_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dac_grad_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dac_grad_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (dac_grad_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (dac_grad_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dac_grad_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dac_grad_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dac_grad_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dac_grad_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dac_grad_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dac_grad_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dac_grad_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (dac_grad_spi_control_port_write),                  //                         .write
		.av_read                (dac_grad_spi_control_port_read),                   //                         .read
		.av_readdata            (dac_grad_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (dac_grad_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (dac_grad_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_mtch_ntwrk_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                          //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (spi_mtch_ntwrk_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (spi_mtch_ntwrk_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (spi_mtch_ntwrk_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (spi_mtch_ntwrk_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (spi_mtch_ntwrk_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (spi_mtch_ntwrk_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (spi_mtch_ntwrk_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (spi_mtch_ntwrk_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (spi_mtch_ntwrk_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (spi_mtch_ntwrk_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (spi_mtch_ntwrk_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (spi_mtch_ntwrk_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (spi_mtch_ntwrk_spi_control_port_write),                  //                         .write
		.av_read                (spi_mtch_ntwrk_spi_control_port_read),                   //                         .read
		.av_readdata            (spi_mtch_ntwrk_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (spi_mtch_ntwrk_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (spi_mtch_ntwrk_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_afe_relays_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                          //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (spi_afe_relays_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (spi_afe_relays_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (spi_afe_relays_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (spi_afe_relays_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (spi_afe_relays_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (spi_afe_relays_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (spi_afe_relays_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (spi_afe_relays_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (spi_afe_relays_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (spi_afe_relays_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (spi_afe_relays_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (spi_afe_relays_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (spi_afe_relays_spi_control_port_write),                  //                         .write
		.av_read                (spi_afe_relays_spi_control_port_read),                   //                         .read
		.av_readdata            (spi_afe_relays_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (spi_afe_relays_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (spi_afe_relays_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_fifo_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (dma_fifo_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_fifo_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_fifo_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_fifo_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_fifo_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_fifo_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_fifo_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_fifo_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_fifo_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_fifo_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_fifo_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_fifo_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_fifo_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_fifo_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_fifo_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_fifo_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_dconvi_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (dma_dconvi_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_dconvi_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_dconvi_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_dconvi_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_dconvi_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_dconvi_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_dconvi_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_dconvi_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_dconvi_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_dconvi_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_dconvi_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_dconvi_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_dconvi_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_dconvi_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_dconvi_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_dconvi_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_dconvq_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (dma_dconvq_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_dconvq_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_dconvq_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_dconvq_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_dconvq_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_dconvq_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_dconvq_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_dconvq_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_dconvq_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_dconvq_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_dconvq_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_dconvq_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_dconvq_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_dconvq_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_dconvq_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_dconvq_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_dummy_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (dma_dummy_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_dummy_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_dummy_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_dummy_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_dummy_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_dummy_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_dummy_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_dummy_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_dummy_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_dummy_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_dummy_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_dummy_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_dummy_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_dummy_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_dummy_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_dummy_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (207),
		.PKT_CACHE_H               (239),
		.PKT_CACHE_L               (236),
		.PKT_ADDR_SIDEBAND_H       (205),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (235),
		.PKT_PROTECTION_L          (233),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (240),
		.PKT_RESPONSE_STATUS_H     (241),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_THREAD_ID_H           (232),
		.PKT_THREAD_ID_L           (221),
		.PKT_QOS_L                 (208),
		.PKT_QOS_H                 (208),
		.PKT_ORI_BURST_SIZE_L      (242),
		.PKT_ORI_BURST_SIZE_H      (244),
		.PKT_DATA_SIDEBAND_H       (206),
		.PKT_DATA_SIDEBAND_L       (206),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (45),
		.ID                        (8)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dma_fifo_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                    //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dconvi_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.av_address            (dma_dconvi_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dconvi_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dconvi_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dconvi_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dconvi_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dconvi_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dconvi_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dconvi_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dconvi_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dconvi_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dconvi_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dconvi_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dconvi_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dconvi_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dconvi_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dconvi_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dconvq_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.av_address            (dma_dconvq_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dconvq_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dconvq_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dconvq_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dconvq_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dconvq_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dconvq_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dconvq_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dconvq_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dconvq_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dconvq_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dconvq_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dconvq_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dconvq_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dconvq_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dconvq_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dummy_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (dma_dummy_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dummy_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dummy_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dummy_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dummy_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dummy_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dummy_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dummy_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dummy_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dummy_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dummy_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dummy_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dummy_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dummy_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dummy_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dummy_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_fifo_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (dma_fifo_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_fifo_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_fifo_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_fifo_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_fifo_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_fifo_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_fifo_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_fifo_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_fifo_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_fifo_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_fifo_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_fifo_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_fifo_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_fifo_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_fifo_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_fifo_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (dma_fifo_read_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dma_fifo_read_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dma_fifo_read_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dma_fifo_read_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dma_fifo_read_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dma_fifo_read_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.ID                        (9)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (10),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_non_sec_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (master_non_sec_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (master_non_sec_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (master_non_sec_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (master_non_sec_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (master_non_sec_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (master_non_sec_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (master_non_sec_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (master_non_sec_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (master_non_sec_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (master_non_sec_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (master_non_sec_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (master_non_sec_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (master_non_sec_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (master_non_sec_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (master_non_sec_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (master_non_sec_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (master_non_sec_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (master_non_sec_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (master_non_sec_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (master_non_sec_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (master_non_sec_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (master_non_sec_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dconvq_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (dma_dconvq_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dconvq_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dconvq_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dconvq_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dconvq_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dconvq_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dconvq_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dconvq_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dconvq_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dconvq_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dconvq_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dconvq_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dconvq_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dconvq_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dconvq_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dconvq_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_010_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_010_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_010_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_010_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_010_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_010_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dconvi_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (dma_dconvi_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dconvi_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dconvi_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dconvi_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dconvi_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dconvi_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dconvi_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dconvi_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dconvi_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dconvi_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dconvi_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dconvi_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dconvi_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dconvi_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dconvi_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dconvi_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_011_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_011_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_011_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_011_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_011_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_011_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_dummy_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dma_dummy_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_dummy_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_dummy_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_dummy_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_dummy_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_dummy_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_dummy_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_dummy_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_dummy_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_dummy_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_dummy_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_dummy_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_dummy_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_dummy_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_dummy_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_dummy_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_012_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_012_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_012_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_012_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_012_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_012_src_ready),                                                    //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy64_in_in_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (fifo_dummy64_in_in_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy64_in_in_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy64_in_in_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy64_in_in_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy64_in_in_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy64_in_in_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy64_in_in_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy64_in_in_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy64_in_in_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy64_in_in_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy64_in_in_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy64_in_in_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy64_in_in_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy64_in_in_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy64_in_in_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy64_in_in_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy64_in_in_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy64_in_in_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy64_in_in_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy64_in_in_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy64_in_in_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy64_in_in_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy64_in_in_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy64_in_in_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy64_in_in_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy64_in_in_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy64_in_in_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy64_in_in_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy64_in_in_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy64_in_in_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy64_in_in_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy64_in_in_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (fifo_dummy64_in_in_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy64_in_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy64_in_in_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_in_in_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (fifo_dummy64_in_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy64_in_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy64_in_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy64_in_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy64_in_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy64_in_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy64_in_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy64_in_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy64_in_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy64_in_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_in_in_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (fifo_dummy64_in_in_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_dummy64_in_in_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_dummy64_in_in_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_dummy64_in_in_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_dummy64_in_in_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_dummy64_in_in_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy_in_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (fifo_dummy_in_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy_in_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy_in_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy_in_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy_in_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy_in_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy_in_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy_in_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy_in_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy_in_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy_in_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy_in_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy_in_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy_in_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy_in_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy_in_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy_in_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy_in_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy_in_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy_in_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy_in_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy_in_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy_in_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy_in_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy_in_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy_in_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy_in_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy_in_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy_in_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy_in_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy_in_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy_in_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (fifo_dummy_in_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy_in_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_in_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (fifo_dummy_in_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy_in_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_in_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_dummy_in_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (fifo_dummy_in_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (fifo_dummy_in_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (fifo_dummy_in_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (fifo_dummy_in_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (fifo_dummy_in_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy64_in_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (fifo_dummy64_in_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy64_in_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy64_in_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy64_in_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy64_in_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy64_in_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy64_in_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy64_in_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy64_in_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy64_in_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy64_in_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy64_in_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy64_in_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy64_in_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy64_in_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy64_in_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy64_in_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy64_in_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy64_in_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy64_in_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy64_in_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy64_in_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy64_in_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy64_in_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy64_in_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy64_in_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy64_in_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_in_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (fifo_dummy64_in_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy64_in_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy64_in_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy64_in_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy64_in_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy64_in_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_in_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_dummy64_in_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy64_out_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (fifo_dummy64_out_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy64_out_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy64_out_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy64_out_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy64_out_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy64_out_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy64_out_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy64_out_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy64_out_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy64_out_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy64_out_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy64_out_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy64_out_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy64_out_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy64_out_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy64_out_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy64_out_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy64_out_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy64_out_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy64_out_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy64_out_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy64_out_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy64_out_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy64_out_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy64_out_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy64_out_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy64_out_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_out_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (fifo_dummy64_out_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy64_out_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy64_out_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy64_out_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy64_out_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy64_out_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_out_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_dummy64_out_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (fifo_dummy_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (fifo_dummy_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fifo_dummy_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (fifo_dummy_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_dummy_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_dummy_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_dummy_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_dummy_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_dummy_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy64_out_out_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (fifo_dummy64_out_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy64_out_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy64_out_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy64_out_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy64_out_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy64_out_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy64_out_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy64_out_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy64_out_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy64_out_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy64_out_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy64_out_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy64_out_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy64_out_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy64_out_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy64_out_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy64_out_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy64_out_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy64_out_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy64_out_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy64_out_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy64_out_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy64_out_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy64_out_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy64_out_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy64_out_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy64_out_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy64_out_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy64_out_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy64_out_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy64_out_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy64_out_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (fifo_dummy64_out_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy64_out_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy64_out_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_out_out_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (fifo_dummy64_out_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy64_out_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy64_out_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy64_out_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy64_out_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy64_out_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy64_out_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy64_out_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy64_out_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy64_out_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy64_out_out_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (fifo_dummy64_out_out_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_dummy64_out_out_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_dummy64_out_out_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_dummy64_out_out_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_dummy64_out_out_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_dummy64_out_out_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_dummy_out_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (fifo_dummy_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_dummy_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_dummy_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_dummy_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_dummy_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_dummy_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_dummy_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_dummy_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_dummy_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_dummy_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_dummy_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_dummy_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_dummy_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_dummy_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_dummy_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_dummy_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_dummy_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_dummy_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_dummy_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_dummy_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_dummy_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_dummy_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_dummy_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_dummy_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_dummy_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_dummy_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_dummy_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_dummy_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_dummy_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_dummy_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_dummy_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_dummy_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (fifo_dummy_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_dummy_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_dummy_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_out_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (fifo_dummy_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_dummy_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_dummy_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_dummy_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_dummy_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_dummy_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_dummy_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_dummy_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_dummy_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_dummy_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_dummy_out_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo_dummy_out_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (fifo_dummy_out_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (fifo_dummy_out_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (fifo_dummy_out_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (fifo_dummy_out_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (fifo_dummy_out_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),               //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (switches_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (switches_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (switches_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (switches_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (switches_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),              //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_fifo_mem_out_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (adc_fifo_mem_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_fifo_mem_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_fifo_mem_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_fifo_mem_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_fifo_mem_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_fifo_mem_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_fifo_mem_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_fifo_mem_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_fifo_mem_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_fifo_mem_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_fifo_mem_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_fifo_mem_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_fifo_mem_out_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_fifo_mem_out_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_fifo_mem_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_fifo_mem_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_fifo_mem_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_fifo_mem_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_fifo_mem_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_fifo_mem_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_fifo_mem_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_fifo_mem_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_fifo_mem_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_fifo_mem_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_fifo_mem_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_fifo_mem_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_fifo_mem_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_fifo_mem_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_fifo_mem_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_fifo_mem_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_fifo_mem_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_fifo_mem_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (adc_fifo_mem_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_fifo_mem_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_fifo_mem_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_fifo_mem_out_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_fifo_mem_out_agent_rf_source_data),             //        in.data
		.in_valid          (adc_fifo_mem_out_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_fifo_mem_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_fifo_mem_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_fifo_mem_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_fifo_mem_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_fifo_mem_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_fifo_mem_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_fifo_mem_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_fifo_mem_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_fifo_mem_out_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_fifo_mem_out_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (adc_fifo_mem_out_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (adc_fifo_mem_out_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (adc_fifo_mem_out_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (adc_fifo_mem_out_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (adc_fifo_mem_out_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_adc_val_sub_s1_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (nmr_parameters_adc_val_sub_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_adc_val_sub_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_adc_val_sub_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_adc_val_sub_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_adc_val_sub_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_adc_val_sub_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_adc_val_sub_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_adc_val_sub_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_adc_val_sub_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_adc_val_sub_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_adc_val_sub_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_adc_val_sub_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_adc_val_sub_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_adc_val_sub_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_adc_val_sub_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_adc_val_sub_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_adc_val_sub_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_adc_val_sub_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_adc_val_sub_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_adc_val_sub_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_adc_val_sub_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_adc_val_sub_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (nmr_parameters_adc_val_sub_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_adc_val_sub_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_adc_val_sub_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_adc_val_sub_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_adc_val_sub_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_adc_val_sub_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_adc_val_sub_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fir_avalon_mm_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dconv_fir_avalon_mm_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fir_avalon_mm_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fir_avalon_mm_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fir_avalon_mm_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fir_avalon_mm_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fir_avalon_mm_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fir_avalon_mm_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fir_avalon_mm_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fir_avalon_mm_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fir_avalon_mm_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fir_avalon_mm_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fir_avalon_mm_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fir_avalon_mm_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fir_avalon_mm_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fir_avalon_mm_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fir_avalon_mm_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fir_avalon_mm_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fir_avalon_mm_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fir_avalon_mm_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fir_avalon_mm_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fir_avalon_mm_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fir_avalon_mm_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fir_avalon_mm_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fir_avalon_mm_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fir_avalon_mm_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fir_avalon_mm_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fir_avalon_mm_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fir_avalon_mm_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (dconv_fir_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fir_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fir_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fir_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fir_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fir_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fir_avalon_mm_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dconv_fir_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fir_q_avalon_mm_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (dconv_fir_q_avalon_mm_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fir_q_avalon_mm_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fir_q_avalon_mm_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fir_q_avalon_mm_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fir_q_avalon_mm_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fir_q_avalon_mm_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fir_q_avalon_mm_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fir_q_avalon_mm_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fir_q_avalon_mm_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fir_q_avalon_mm_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fir_q_avalon_mm_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fir_q_avalon_mm_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fir_q_avalon_mm_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fir_q_avalon_mm_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fir_q_avalon_mm_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fir_q_avalon_mm_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fir_q_avalon_mm_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fir_q_avalon_mm_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fir_q_avalon_mm_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fir_q_avalon_mm_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fir_q_avalon_mm_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fir_q_avalon_mm_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (dconv_fir_q_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fir_q_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fir_q_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fir_q_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fir_q_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fir_q_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fir_q_avalon_mm_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_vga_avalon_slave_agent (
		.clk                     (gp_pll_outclk0_clk),                                               //             clk.clk
		.reset                   (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (alt_vip_vfr_vga_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (alt_vip_vfr_vga_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (alt_vip_vfr_vga_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (alt_vip_vfr_vga_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (alt_vip_vfr_vga_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (alt_vip_vfr_vga_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_vga_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (alt_vip_vfr_vga_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (alt_vip_vfr_vga_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo (
		.clk               (gp_pll_outclk0_clk),                                            //       clk.clk
		.reset             (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_vga_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo (
		.clk               (gp_pll_outclk0_clk),                                            //       clk.clk
		.reset             (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                          // (terminated)
		.out_startofpacket (),                                                              // (terminated)
		.out_endofpacket   (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_int_csr_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (i2c_int_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (i2c_int_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (i2c_int_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (i2c_int_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (i2c_int_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (i2c_int_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (i2c_int_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (i2c_int_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (i2c_int_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (i2c_int_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (i2c_int_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (i2c_int_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (i2c_int_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (i2c_int_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (i2c_int_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (i2c_int_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (i2c_int_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (i2c_int_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (i2c_int_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (i2c_int_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (i2c_int_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (i2c_int_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (i2c_int_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (i2c_int_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (i2c_int_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (i2c_int_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (i2c_int_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (i2c_int_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (i2c_int_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (i2c_int_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (i2c_int_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (i2c_int_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),               //                .error
		.rdata_fifo_src_ready    (i2c_int_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_int_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (i2c_int_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_int_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (i2c_int_csr_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_int_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_int_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_int_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_int_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_int_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_int_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_int_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_int_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_int_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_int_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_int_csr_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (i2c_int_csr_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (i2c_int_csr_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (i2c_int_csr_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (i2c_int_csr_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (i2c_int_csr_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_ext_csr_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (i2c_ext_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (i2c_ext_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (i2c_ext_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (i2c_ext_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (i2c_ext_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (i2c_ext_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (i2c_ext_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (i2c_ext_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (i2c_ext_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (i2c_ext_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (i2c_ext_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (i2c_ext_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (i2c_ext_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (i2c_ext_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (i2c_ext_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (i2c_ext_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (i2c_ext_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (i2c_ext_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (i2c_ext_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (i2c_ext_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (i2c_ext_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (i2c_ext_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (i2c_ext_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (i2c_ext_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (i2c_ext_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (i2c_ext_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (i2c_ext_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (i2c_ext_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (i2c_ext_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (i2c_ext_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (i2c_ext_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (i2c_ext_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),               //                .error
		.rdata_fifo_src_ready    (i2c_ext_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_ext_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (i2c_ext_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_ext_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (i2c_ext_csr_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_ext_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_ext_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_ext_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_ext_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_ext_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_ext_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_ext_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_ext_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_ext_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_ext_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_ext_csr_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (i2c_ext_csr_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (i2c_ext_csr_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (i2c_ext_csr_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (i2c_ext_csr_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (i2c_ext_csr_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_delay_nosig_s1_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (nmr_parameters_delay_nosig_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_delay_nosig_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_delay_nosig_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_delay_nosig_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_delay_nosig_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_delay_nosig_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_delay_nosig_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_delay_nosig_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_delay_nosig_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_delay_nosig_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_delay_nosig_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_delay_nosig_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_delay_nosig_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_delay_nosig_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_delay_nosig_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_delay_nosig_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_delay_nosig_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_delay_nosig_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_delay_nosig_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_delay_nosig_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_delay_nosig_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_delay_nosig_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_delay_nosig_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_delay_nosig_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_delay_nosig_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_delay_nosig_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_delay_nosig_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_nosig_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (nmr_parameters_delay_nosig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_delay_nosig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_delay_nosig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_delay_nosig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_delay_nosig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_delay_nosig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_nosig_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_delay_sig_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (nmr_parameters_delay_sig_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_delay_sig_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_delay_sig_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_delay_sig_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_delay_sig_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_delay_sig_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_delay_sig_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_delay_sig_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_delay_sig_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_delay_sig_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_delay_sig_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_delay_sig_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_delay_sig_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_delay_sig_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_delay_sig_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_delay_sig_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_delay_sig_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_delay_sig_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_delay_sig_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_delay_sig_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_delay_sig_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_delay_sig_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_delay_sig_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_delay_sig_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_delay_sig_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_delay_sig_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_delay_sig_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_sig_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (nmr_parameters_delay_sig_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_delay_sig_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_delay_sig_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_delay_sig_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_delay_sig_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_delay_sig_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_sig_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_delay_sig_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_delay_t1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (nmr_parameters_delay_t1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_delay_t1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_delay_t1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_delay_t1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_delay_t1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_delay_t1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_delay_t1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_delay_t1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_delay_t1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_delay_t1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_delay_t1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_delay_t1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_delay_t1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_delay_t1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_delay_t1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_delay_t1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_delay_t1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_delay_t1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_delay_t1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_delay_t1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_delay_t1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_delay_t1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_delay_t1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_delay_t1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_delay_t1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_delay_t1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_delay_t1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_t1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (nmr_parameters_delay_t1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_delay_t1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_delay_t1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_delay_t1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_delay_t1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_delay_t1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_delay_t1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_delay_t1_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_echoes_per_scan_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (nmr_parameters_echoes_per_scan_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_echoes_per_scan_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_echoes_per_scan_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_echoes_per_scan_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_echoes_per_scan_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_echoes_per_scan_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_echoes_per_scan_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_echoes_per_scan_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_echoes_per_scan_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_echoes_per_scan_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_echoes_per_scan_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_echoes_per_scan_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_echoes_per_scan_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_echoes_per_scan_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_echoes_per_scan_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_echoes_per_scan_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_echoes_per_scan_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_echoes_per_scan_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_echoes_per_scan_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_echoes_per_scan_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_echoes_per_scan_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (nmr_parameters_echoes_per_scan_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_echoes_per_scan_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_echoes_per_scan_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_echoes_per_scan_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_echoes_per_scan_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_echoes_per_scan_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_fifo_mem_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (adc_fifo_mem_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_fifo_mem_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_fifo_mem_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_fifo_mem_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_fifo_mem_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_fifo_mem_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_fifo_mem_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_fifo_mem_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_fifo_mem_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_fifo_mem_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_fifo_mem_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_fifo_mem_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_fifo_mem_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_fifo_mem_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_fifo_mem_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_fifo_mem_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_fifo_mem_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_fifo_mem_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_fifo_mem_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_fifo_mem_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_fifo_mem_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_fifo_mem_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_fifo_mem_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_fifo_mem_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_fifo_mem_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_fifo_mem_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_fifo_mem_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_fifo_mem_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_fifo_mem_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_fifo_mem_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (adc_fifo_mem_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_fifo_mem_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_fifo_mem_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_fifo_mem_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (adc_fifo_mem_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (adc_fifo_mem_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_fifo_mem_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_fifo_mem_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_fifo_mem_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_fifo_mem_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_fifo_mem_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_fifo_mem_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_fifo_mem_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_fifo_mem_in_csr_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (adc_fifo_mem_in_csr_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (adc_fifo_mem_in_csr_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (adc_fifo_mem_in_csr_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (adc_fifo_mem_in_csr_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (adc_fifo_mem_in_csr_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fifo_mem_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (dconv_fifo_mem_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fifo_mem_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fifo_mem_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fifo_mem_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fifo_mem_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fifo_mem_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fifo_mem_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fifo_mem_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fifo_mem_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fifo_mem_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fifo_mem_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fifo_mem_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fifo_mem_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fifo_mem_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fifo_mem_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fifo_mem_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fifo_mem_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fifo_mem_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fifo_mem_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fifo_mem_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fifo_mem_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fifo_mem_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fifo_mem_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fifo_mem_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fifo_mem_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fifo_mem_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fifo_mem_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (dconv_fifo_mem_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fifo_mem_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fifo_mem_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fifo_mem_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fifo_mem_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fifo_mem_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (dconv_fifo_mem_in_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fifo_mem_q_in_csr_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (dconv_fifo_mem_q_in_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fifo_mem_q_in_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fifo_mem_q_in_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fifo_mem_q_in_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fifo_mem_q_in_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fifo_mem_q_in_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fifo_mem_q_in_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fifo_mem_q_in_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fifo_mem_q_in_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fifo_mem_q_in_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fifo_mem_q_in_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fifo_mem_q_in_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fifo_mem_q_in_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fifo_mem_q_in_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fifo_mem_q_in_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fifo_mem_q_in_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fifo_mem_q_in_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fifo_mem_q_in_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fifo_mem_q_in_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fifo_mem_q_in_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fifo_mem_q_in_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fifo_mem_q_in_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fifo_mem_q_in_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fifo_mem_q_in_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fifo_mem_q_in_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fifo_mem_q_in_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fifo_mem_q_in_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_q_in_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (dconv_fifo_mem_q_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fifo_mem_q_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fifo_mem_q_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fifo_mem_q_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fifo_mem_q_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fifo_mem_q_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_q_in_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_init_delay_s1_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (nmr_parameters_init_delay_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_init_delay_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_init_delay_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_init_delay_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_init_delay_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_init_delay_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_init_delay_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_init_delay_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_init_delay_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_init_delay_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_init_delay_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_init_delay_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_init_delay_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_init_delay_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_init_delay_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_init_delay_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_init_delay_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_init_delay_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_init_delay_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_init_delay_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_init_delay_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_init_delay_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_init_delay_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_init_delay_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_init_delay_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_init_delay_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_init_delay_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_init_delay_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (nmr_parameters_init_delay_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_init_delay_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_init_delay_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_init_delay_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_init_delay_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_init_delay_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_init_delay_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_init_delay_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_sys_pll_reconfig_mgmt_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                              //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                     //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) analyzer_pll_reconfig_mgmt_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                               //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                                  //       clk_reset.reset
		.m0_address              (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (analyzer_pll_reconfig_mgmt_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fifo_mem_out_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (dconv_fifo_mem_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fifo_mem_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fifo_mem_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fifo_mem_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fifo_mem_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fifo_mem_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fifo_mem_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fifo_mem_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fifo_mem_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fifo_mem_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fifo_mem_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fifo_mem_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fifo_mem_out_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fifo_mem_out_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fifo_mem_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fifo_mem_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fifo_mem_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fifo_mem_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fifo_mem_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fifo_mem_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fifo_mem_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fifo_mem_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fifo_mem_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fifo_mem_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fifo_mem_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fifo_mem_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fifo_mem_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fifo_mem_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fifo_mem_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fifo_mem_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fifo_mem_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fifo_mem_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (dconv_fifo_mem_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fifo_mem_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fifo_mem_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_out_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (dconv_fifo_mem_out_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fifo_mem_out_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fifo_mem_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fifo_mem_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fifo_mem_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fifo_mem_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fifo_mem_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fifo_mem_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fifo_mem_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fifo_mem_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_out_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dconv_fifo_mem_out_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (dconv_fifo_mem_out_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (dconv_fifo_mem_out_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (dconv_fifo_mem_out_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (dconv_fifo_mem_out_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (dconv_fifo_mem_out_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dconv_fifo_mem_q_out_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (dconv_fifo_mem_q_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dconv_fifo_mem_q_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dconv_fifo_mem_q_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dconv_fifo_mem_q_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dconv_fifo_mem_q_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (dconv_fifo_mem_q_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dconv_fifo_mem_q_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dconv_fifo_mem_q_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (dconv_fifo_mem_q_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dconv_fifo_mem_q_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (dconv_fifo_mem_q_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (dconv_fifo_mem_q_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dconv_fifo_mem_q_out_agent_rp_ready),                      //                .ready
		.rp_valid                (dconv_fifo_mem_q_out_agent_rp_valid),                      //                .valid
		.rp_data                 (dconv_fifo_mem_q_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (dconv_fifo_mem_q_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dconv_fifo_mem_q_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dconv_fifo_mem_q_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dconv_fifo_mem_q_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dconv_fifo_mem_q_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dconv_fifo_mem_q_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dconv_fifo_mem_q_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dconv_fifo_mem_q_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dconv_fifo_mem_q_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dconv_fifo_mem_q_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dconv_fifo_mem_q_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dconv_fifo_mem_q_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dconv_fifo_mem_q_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dconv_fifo_mem_q_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dconv_fifo_mem_q_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dconv_fifo_mem_q_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dconv_fifo_mem_q_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (dconv_fifo_mem_q_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dconv_fifo_mem_q_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dconv_fifo_mem_q_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_q_out_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (dconv_fifo_mem_q_out_agent_rf_source_data),             //        in.data
		.in_valid          (dconv_fifo_mem_q_out_agent_rf_source_valid),            //          .valid
		.in_ready          (dconv_fifo_mem_q_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dconv_fifo_mem_q_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dconv_fifo_mem_q_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dconv_fifo_mem_q_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dconv_fifo_mem_q_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dconv_fifo_mem_q_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dconv_fifo_mem_q_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dconv_fifo_mem_q_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dconv_fifo_mem_q_out_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dconv_fifo_mem_q_out_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (dconv_fifo_mem_q_out_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (dconv_fifo_mem_q_out_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (dconv_fifo_mem_q_out_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (dconv_fifo_mem_q_out_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (dconv_fifo_mem_q_out_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_pulse_180deg_s1_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (nmr_parameters_pulse_180deg_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_pulse_180deg_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_pulse_180deg_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_pulse_180deg_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_pulse_180deg_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_pulse_180deg_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_pulse_180deg_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_pulse_180deg_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_pulse_180deg_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_pulse_180deg_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_pulse_180deg_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_pulse_180deg_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_pulse_180deg_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_pulse_180deg_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_pulse_180deg_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_pulse_180deg_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_pulse_180deg_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_pulse_180deg_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_pulse_180deg_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_pulse_180deg_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_pulse_180deg_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_180deg_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (nmr_parameters_pulse_180deg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_pulse_180deg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_pulse_180deg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_pulse_180deg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_pulse_180deg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_pulse_180deg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_180deg_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_pulse_90deg_s1_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (nmr_parameters_pulse_90deg_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_pulse_90deg_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_pulse_90deg_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_pulse_90deg_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_pulse_90deg_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_pulse_90deg_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_pulse_90deg_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_pulse_90deg_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_pulse_90deg_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_pulse_90deg_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_pulse_90deg_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_pulse_90deg_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_pulse_90deg_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_pulse_90deg_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_pulse_90deg_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_pulse_90deg_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_pulse_90deg_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_pulse_90deg_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_pulse_90deg_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_pulse_90deg_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_pulse_90deg_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_90deg_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (nmr_parameters_pulse_90deg_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_pulse_90deg_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_pulse_90deg_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_pulse_90deg_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_pulse_90deg_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_pulse_90deg_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_90deg_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_pulse_t1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (nmr_parameters_pulse_t1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_pulse_t1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_pulse_t1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_pulse_t1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_pulse_t1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_pulse_t1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_pulse_t1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_pulse_t1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_pulse_t1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_pulse_t1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_pulse_t1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_pulse_t1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_pulse_t1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_pulse_t1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_pulse_t1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_pulse_t1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_pulse_t1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_pulse_t1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_pulse_t1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_pulse_t1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_pulse_t1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_pulse_t1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_pulse_t1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_pulse_t1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_pulse_t1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_pulse_t1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_pulse_t1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_t1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (nmr_parameters_pulse_t1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_pulse_t1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_pulse_t1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_pulse_t1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_pulse_t1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_pulse_t1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_pulse_t1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_rx_delay_s1_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (nmr_parameters_rx_delay_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_rx_delay_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_rx_delay_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_rx_delay_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_rx_delay_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_rx_delay_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_rx_delay_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_rx_delay_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_rx_delay_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_rx_delay_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_rx_delay_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_rx_delay_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_rx_delay_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_rx_delay_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_rx_delay_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_rx_delay_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_rx_delay_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_rx_delay_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_rx_delay_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_rx_delay_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_rx_delay_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_rx_delay_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_rx_delay_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_rx_delay_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_rx_delay_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_rx_delay_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_rx_delay_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_rx_delay_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (nmr_parameters_rx_delay_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_rx_delay_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_rx_delay_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_rx_delay_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_rx_delay_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_rx_delay_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_rx_delay_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_rx_delay_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ctrl_out_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (ctrl_out_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ctrl_out_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ctrl_out_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ctrl_out_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ctrl_out_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ctrl_out_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ctrl_out_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ctrl_out_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ctrl_out_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ctrl_out_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ctrl_out_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ctrl_out_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ctrl_out_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ctrl_out_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ctrl_out_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ctrl_out_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ctrl_out_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ctrl_out_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ctrl_out_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ctrl_out_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ctrl_out_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ctrl_out_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ctrl_out_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ctrl_out_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ctrl_out_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ctrl_out_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ctrl_out_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ctrl_out_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ctrl_out_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ctrl_out_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ctrl_out_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ctrl_out_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),               //                .error
		.rdata_fifo_src_ready    (ctrl_out_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ctrl_out_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ctrl_out_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ctrl_out_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ctrl_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ctrl_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ctrl_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ctrl_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ctrl_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ctrl_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ctrl_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ctrl_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ctrl_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ctrl_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ctrl_out_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ctrl_out_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ctrl_out_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ctrl_out_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ctrl_out_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ctrl_out_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ctrl_out_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ctrl_in_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (ctrl_in_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ctrl_in_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ctrl_in_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ctrl_in_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ctrl_in_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ctrl_in_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ctrl_in_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ctrl_in_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ctrl_in_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ctrl_in_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ctrl_in_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ctrl_in_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ctrl_in_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ctrl_in_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ctrl_in_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ctrl_in_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ctrl_in_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ctrl_in_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ctrl_in_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ctrl_in_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ctrl_in_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ctrl_in_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ctrl_in_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ctrl_in_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ctrl_in_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ctrl_in_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ctrl_in_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ctrl_in_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ctrl_in_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ctrl_in_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ctrl_in_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ctrl_in_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ctrl_in_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ctrl_in_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ctrl_in_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ctrl_in_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ctrl_in_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ctrl_in_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ctrl_in_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ctrl_in_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ctrl_in_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ctrl_in_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ctrl_in_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ctrl_in_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ctrl_in_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ctrl_in_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ctrl_in_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ctrl_in_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (ctrl_in_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (ctrl_in_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (ctrl_in_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (ctrl_in_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (ctrl_in_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) aux_cnt_out_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (aux_cnt_out_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (aux_cnt_out_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (aux_cnt_out_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (aux_cnt_out_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (aux_cnt_out_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (aux_cnt_out_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (aux_cnt_out_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (aux_cnt_out_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (aux_cnt_out_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (aux_cnt_out_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (aux_cnt_out_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (aux_cnt_out_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (aux_cnt_out_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (aux_cnt_out_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (aux_cnt_out_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (aux_cnt_out_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (aux_cnt_out_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (aux_cnt_out_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (aux_cnt_out_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (aux_cnt_out_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (aux_cnt_out_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (aux_cnt_out_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (aux_cnt_out_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (aux_cnt_out_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (aux_cnt_out_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (aux_cnt_out_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (aux_cnt_out_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (aux_cnt_out_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (aux_cnt_out_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (aux_cnt_out_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (aux_cnt_out_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (aux_cnt_out_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (aux_cnt_out_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (aux_cnt_out_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (aux_cnt_out_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) aux_cnt_out_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (aux_cnt_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (aux_cnt_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (aux_cnt_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (aux_cnt_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (aux_cnt_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (aux_cnt_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (aux_cnt_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (aux_cnt_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (aux_cnt_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (aux_cnt_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) aux_cnt_out_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (aux_cnt_out_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (aux_cnt_out_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (aux_cnt_out_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (aux_cnt_out_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (aux_cnt_out_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (aux_cnt_out_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nmr_parameters_samples_per_echo_s1_agent (
		.clk                     (clk_0_clk_clk),                                                          //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (nmr_parameters_samples_per_echo_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nmr_parameters_samples_per_echo_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nmr_parameters_samples_per_echo_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nmr_parameters_samples_per_echo_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nmr_parameters_samples_per_echo_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nmr_parameters_samples_per_echo_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nmr_parameters_samples_per_echo_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nmr_parameters_samples_per_echo_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nmr_parameters_samples_per_echo_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nmr_parameters_samples_per_echo_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nmr_parameters_samples_per_echo_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nmr_parameters_samples_per_echo_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nmr_parameters_samples_per_echo_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nmr_parameters_samples_per_echo_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nmr_parameters_samples_per_echo_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nmr_parameters_samples_per_echo_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nmr_parameters_samples_per_echo_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nmr_parameters_samples_per_echo_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nmr_parameters_samples_per_echo_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nmr_parameters_samples_per_echo_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nmr_parameters_samples_per_echo_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_037_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_037_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_037_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_037_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_samples_per_echo_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                       //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (nmr_parameters_samples_per_echo_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nmr_parameters_samples_per_echo_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nmr_parameters_samples_per_echo_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nmr_parameters_samples_per_echo_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nmr_parameters_samples_per_echo_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nmr_parameters_samples_per_echo_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nmr_parameters_samples_per_echo_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                          // (terminated)
		.out_startofpacket (),                                                              // (terminated)
		.out_endofpacket   (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dac_grad_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (dac_grad_spi_control_port_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dac_grad_spi_control_port_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dac_grad_spi_control_port_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dac_grad_spi_control_port_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dac_grad_spi_control_port_agent_m0_lock),                       //                .lock
		.m0_readdata             (dac_grad_spi_control_port_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dac_grad_spi_control_port_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dac_grad_spi_control_port_agent_m0_read),                       //                .read
		.m0_waitrequest          (dac_grad_spi_control_port_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dac_grad_spi_control_port_agent_m0_writedata),                  //                .writedata
		.m0_write                (dac_grad_spi_control_port_agent_m0_write),                      //                .write
		.rp_endofpacket          (dac_grad_spi_control_port_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dac_grad_spi_control_port_agent_rp_ready),                      //                .ready
		.rp_valid                (dac_grad_spi_control_port_agent_rp_valid),                      //                .valid
		.rp_data                 (dac_grad_spi_control_port_agent_rp_data),                       //                .data
		.rp_startofpacket        (dac_grad_spi_control_port_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dac_grad_spi_control_port_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dac_grad_spi_control_port_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dac_grad_spi_control_port_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dac_grad_spi_control_port_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dac_grad_spi_control_port_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dac_grad_spi_control_port_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dac_grad_spi_control_port_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dac_grad_spi_control_port_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dac_grad_spi_control_port_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dac_grad_spi_control_port_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dac_grad_spi_control_port_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dac_grad_spi_control_port_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dac_grad_spi_control_port_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dac_grad_spi_control_port_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dac_grad_spi_control_port_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dac_grad_spi_control_port_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_038_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_038_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_038_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_038_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (dac_grad_spi_control_port_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dac_grad_spi_control_port_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dac_grad_spi_control_port_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dac_grad_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (dac_grad_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (dac_grad_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (dac_grad_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dac_grad_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dac_grad_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dac_grad_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dac_grad_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dac_grad_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dac_grad_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dac_grad_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dac_grad_spi_control_port_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (dac_grad_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dac_grad_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dac_grad_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dac_grad_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dac_grad_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dac_grad_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_mtch_ntwrk_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                                       //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (spi_mtch_ntwrk_spi_control_port_agent_m0_address),                    //              m0.address
		.m0_burstcount           (spi_mtch_ntwrk_spi_control_port_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (spi_mtch_ntwrk_spi_control_port_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (spi_mtch_ntwrk_spi_control_port_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (spi_mtch_ntwrk_spi_control_port_agent_m0_lock),                       //                .lock
		.m0_readdata             (spi_mtch_ntwrk_spi_control_port_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (spi_mtch_ntwrk_spi_control_port_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (spi_mtch_ntwrk_spi_control_port_agent_m0_read),                       //                .read
		.m0_waitrequest          (spi_mtch_ntwrk_spi_control_port_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (spi_mtch_ntwrk_spi_control_port_agent_m0_writedata),                  //                .writedata
		.m0_write                (spi_mtch_ntwrk_spi_control_port_agent_m0_write),                      //                .write
		.rp_endofpacket          (spi_mtch_ntwrk_spi_control_port_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (spi_mtch_ntwrk_spi_control_port_agent_rp_ready),                      //                .ready
		.rp_valid                (spi_mtch_ntwrk_spi_control_port_agent_rp_valid),                      //                .valid
		.rp_data                 (spi_mtch_ntwrk_spi_control_port_agent_rp_data),                       //                .data
		.rp_startofpacket        (spi_mtch_ntwrk_spi_control_port_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (spi_mtch_ntwrk_spi_control_port_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (spi_mtch_ntwrk_spi_control_port_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (spi_mtch_ntwrk_spi_control_port_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (spi_mtch_ntwrk_spi_control_port_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (spi_mtch_ntwrk_spi_control_port_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_039_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_039_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_039_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_039_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                    //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (spi_mtch_ntwrk_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_mtch_ntwrk_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_mtch_ntwrk_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_mtch_ntwrk_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_mtch_ntwrk_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_mtch_ntwrk_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_afe_relays_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                                       //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (spi_afe_relays_spi_control_port_agent_m0_address),                    //              m0.address
		.m0_burstcount           (spi_afe_relays_spi_control_port_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (spi_afe_relays_spi_control_port_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (spi_afe_relays_spi_control_port_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (spi_afe_relays_spi_control_port_agent_m0_lock),                       //                .lock
		.m0_readdata             (spi_afe_relays_spi_control_port_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (spi_afe_relays_spi_control_port_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (spi_afe_relays_spi_control_port_agent_m0_read),                       //                .read
		.m0_waitrequest          (spi_afe_relays_spi_control_port_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (spi_afe_relays_spi_control_port_agent_m0_writedata),                  //                .writedata
		.m0_write                (spi_afe_relays_spi_control_port_agent_m0_write),                      //                .write
		.rp_endofpacket          (spi_afe_relays_spi_control_port_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (spi_afe_relays_spi_control_port_agent_rp_ready),                      //                .ready
		.rp_valid                (spi_afe_relays_spi_control_port_agent_rp_valid),                      //                .valid
		.rp_data                 (spi_afe_relays_spi_control_port_agent_rp_data),                       //                .data
		.rp_startofpacket        (spi_afe_relays_spi_control_port_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (spi_afe_relays_spi_control_port_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (spi_afe_relays_spi_control_port_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (spi_afe_relays_spi_control_port_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (spi_afe_relays_spi_control_port_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (spi_afe_relays_spi_control_port_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (spi_afe_relays_spi_control_port_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (spi_afe_relays_spi_control_port_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (spi_afe_relays_spi_control_port_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (spi_afe_relays_spi_control_port_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (spi_afe_relays_spi_control_port_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (spi_afe_relays_spi_control_port_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_040_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_040_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_040_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_040_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_afe_relays_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                    //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (spi_afe_relays_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_afe_relays_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_afe_relays_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_afe_relays_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_afe_relays_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_afe_relays_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_afe_relays_spi_control_port_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (spi_afe_relays_spi_control_port_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_fifo_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (dma_fifo_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_fifo_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_fifo_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_fifo_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_fifo_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_fifo_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_fifo_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_fifo_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_fifo_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_fifo_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_fifo_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_fifo_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_fifo_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_fifo_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_fifo_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_fifo_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_fifo_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_fifo_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_fifo_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_fifo_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_fifo_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_fifo_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_fifo_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_fifo_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_fifo_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_fifo_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_fifo_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_fifo_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_fifo_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_fifo_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_fifo_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_fifo_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_041_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_041_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_041_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_041_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (dma_fifo_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_fifo_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_fifo_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (dma_fifo_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_fifo_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_fifo_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_fifo_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_fifo_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_fifo_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_fifo_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_fifo_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_fifo_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_fifo_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_fifo_control_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dma_fifo_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_fifo_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_fifo_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_fifo_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_fifo_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_fifo_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_dconvi_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_dconvi_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_dconvi_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_dconvi_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_dconvi_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_dconvi_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_dconvi_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_dconvi_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_dconvi_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_dconvi_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_dconvi_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_dconvi_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_dconvi_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_dconvi_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_dconvi_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_dconvi_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_dconvi_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_dconvi_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_dconvi_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_dconvi_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_dconvi_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_dconvi_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_dconvi_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_dconvi_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_dconvi_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_dconvi_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_dconvi_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_dconvi_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_dconvi_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_dconvi_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_dconvi_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_dconvi_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_dconvi_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_042_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_042_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_042_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_042_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (dma_dconvi_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_dconvi_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_dconvi_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dconvi_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_dconvi_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_dconvi_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_dconvi_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_dconvi_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_dconvi_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_dconvi_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_dconvi_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_dconvi_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_dconvi_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_dconvi_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dconvi_control_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_dconvi_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_dconvi_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_dconvi_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_dconvi_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_dconvi_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_dconvi_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_dconvq_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (dma_dconvq_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_dconvq_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_dconvq_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_dconvq_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_dconvq_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_dconvq_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_dconvq_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_dconvq_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_dconvq_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_dconvq_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_dconvq_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_dconvq_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_dconvq_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_dconvq_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_dconvq_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_dconvq_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_dconvq_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_dconvq_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_dconvq_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_dconvq_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_dconvq_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_dconvq_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_dconvq_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_dconvq_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_dconvq_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_dconvq_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_dconvq_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_dconvq_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_dconvq_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_dconvq_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_dconvq_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_dconvq_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_043_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_043_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_043_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_043_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (dma_dconvq_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_dconvq_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_dconvq_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dconvq_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (dma_dconvq_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_dconvq_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_dconvq_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_dconvq_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_dconvq_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_dconvq_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_dconvq_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_dconvq_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_dconvq_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_dconvq_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dconvq_control_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (dma_dconvq_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_dconvq_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_dconvq_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_dconvq_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_dconvq_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_dconvq_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (45),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_dummy_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (dma_fifo_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (dma_dummy_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_dummy_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_dummy_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_dummy_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_dummy_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_dummy_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_dummy_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_dummy_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_dummy_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_dummy_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_dummy_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_dummy_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_dummy_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_dummy_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_dummy_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_dummy_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_dummy_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_dummy_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_dummy_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_dummy_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_dummy_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_dummy_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_dummy_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_dummy_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_dummy_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_dummy_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_dummy_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_dummy_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_dummy_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_dummy_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_dummy_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_dummy_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_044_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_044_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_044_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_044_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (dma_dummy_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_dummy_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_dummy_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dummy_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (dma_dummy_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_dummy_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_dummy_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_dummy_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_dummy_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_dummy_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_dummy_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_dummy_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_dummy_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_dummy_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_dummy_control_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (dma_fifo_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (dma_dummy_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_dummy_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_dummy_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_dummy_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_dummy_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_dummy_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	soc_system_v5_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (dma_fifo_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (dma_dconvi_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dconvi_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dconvi_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dconvi_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvi_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (dma_dconvq_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dconvq_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dconvq_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dconvq_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvq_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (dma_dummy_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dummy_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dummy_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dummy_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dummy_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_006 router_006 (
		.sink_ready         (dma_fifo_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_fifo_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_fifo_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                        //       src.ready
		.src_valid          (router_006_src_valid),                        //          .valid
		.src_data           (router_006_src_data),                         //          .data
		.src_channel        (router_006_src_channel),                      //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                   //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                             //       src.ready
		.src_valid          (router_007_src_valid),                                             //          .valid
		.src_data           (router_007_src_data),                                              //          .data
		.src_channel        (router_007_src_channel),                                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_007 router_008 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                             //       src.ready
		.src_valid          (router_008_src_valid),                                             //          .valid
		.src_data           (router_008_src_data),                                              //          .data
		.src_channel        (router_008_src_channel),                                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_009 router_009 (
		.sink_ready         (master_non_sec_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (master_non_sec_master_agent_cp_valid),         //          .valid
		.sink_data          (master_non_sec_master_agent_cp_data),          //          .data
		.sink_startofpacket (master_non_sec_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (master_non_sec_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_010 router_010 (
		.sink_ready         (dma_dconvq_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dconvq_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dconvq_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dconvq_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvq_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_011 router_011 (
		.sink_ready         (dma_dconvi_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dconvi_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dconvi_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dconvi_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvi_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_012 router_012 (
		.sink_ready         (dma_dummy_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_dummy_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_dummy_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_dummy_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dummy_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_013 (
		.sink_ready         (fifo_dummy64_in_in_agent_rp_ready),          //      sink.ready
		.sink_valid         (fifo_dummy64_in_in_agent_rp_valid),          //          .valid
		.sink_data          (fifo_dummy64_in_in_agent_rp_data),           //          .data
		.sink_startofpacket (fifo_dummy64_in_in_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (fifo_dummy64_in_in_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                       //       src.ready
		.src_valid          (router_013_src_valid),                       //          .valid
		.src_data           (router_013_src_data),                        //          .data
		.src_channel        (router_013_src_channel),                     //          .channel
		.src_startofpacket  (router_013_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_014 (
		.sink_ready         (fifo_dummy_in_agent_rp_ready),               //      sink.ready
		.sink_valid         (fifo_dummy_in_agent_rp_valid),               //          .valid
		.sink_data          (fifo_dummy_in_agent_rp_data),                //          .data
		.sink_startofpacket (fifo_dummy_in_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (fifo_dummy_in_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                       //       src.ready
		.src_valid          (router_014_src_valid),                       //          .valid
		.src_data           (router_014_src_data),                        //          .data
		.src_channel        (router_014_src_channel),                     //          .channel
		.src_startofpacket  (router_014_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_015 (
		.sink_ready         (fifo_dummy64_in_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_dummy64_in_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_dummy64_in_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_dummy64_in_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_dummy64_in_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_016 (
		.sink_ready         (fifo_dummy64_out_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_dummy64_out_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (fifo_dummy64_out_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_dummy64_out_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_dummy64_out_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_016_src_ready),                           //       src.ready
		.src_valid          (router_016_src_valid),                           //          .valid
		.src_data           (router_016_src_data),                            //          .data
		.src_channel        (router_016_src_channel),                         //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                      //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_017 (
		.sink_ready         (fifo_dummy_in_csr_agent_rp_ready),           //      sink.ready
		.sink_valid         (fifo_dummy_in_csr_agent_rp_valid),           //          .valid
		.sink_data          (fifo_dummy_in_csr_agent_rp_data),            //          .data
		.sink_startofpacket (fifo_dummy_in_csr_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (fifo_dummy_in_csr_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                       //       src.ready
		.src_valid          (router_017_src_valid),                       //          .valid
		.src_data           (router_017_src_data),                        //          .data
		.src_channel        (router_017_src_channel),                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_018 router_018 (
		.sink_ready         (fifo_dummy64_out_out_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_dummy64_out_out_agent_rp_valid),         //          .valid
		.sink_data          (fifo_dummy64_out_out_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_dummy64_out_out_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_dummy64_out_out_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_018_src_ready),                        //       src.ready
		.src_valid          (router_018_src_valid),                        //          .valid
		.src_data           (router_018_src_data),                         //          .data
		.src_channel        (router_018_src_channel),                      //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                   //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_013 router_019 (
		.sink_ready         (fifo_dummy_out_agent_rp_ready),              //      sink.ready
		.sink_valid         (fifo_dummy_out_agent_rp_valid),              //          .valid
		.sink_data          (fifo_dummy_out_agent_rp_data),               //          .data
		.sink_startofpacket (fifo_dummy_out_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (fifo_dummy_out_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_020 router_020 (
		.sink_ready         (switches_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),                 //          .valid
		.sink_data          (switches_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                       //       src.ready
		.src_valid          (router_020_src_valid),                       //          .valid
		.src_data           (router_020_src_data),                        //          .data
		.src_channel        (router_020_src_channel),                     //          .channel
		.src_startofpacket  (router_020_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_021 router_021 (
		.sink_ready         (sdram_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                    //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                       //       src.ready
		.src_valid          (router_021_src_valid),                       //          .valid
		.src_data           (router_021_src_data),                        //          .data
		.src_channel        (router_021_src_channel),                     //          .channel
		.src_startofpacket  (router_021_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_022 router_022 (
		.sink_ready         (adc_fifo_mem_out_agent_rp_ready),                   //      sink.ready
		.sink_valid         (adc_fifo_mem_out_agent_rp_valid),                   //          .valid
		.sink_data          (adc_fifo_mem_out_agent_rp_data),                    //          .data
		.sink_startofpacket (adc_fifo_mem_out_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (adc_fifo_mem_out_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                              //       src.ready
		.src_valid          (router_022_src_valid),                              //          .valid
		.src_data           (router_022_src_data),                               //          .data
		.src_channel        (router_022_src_channel),                            //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_023 (
		.sink_ready         (nmr_parameters_adc_val_sub_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_adc_val_sub_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_adc_val_sub_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_adc_val_sub_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_adc_val_sub_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_023_src_ready),                                 //       src.ready
		.src_valid          (router_023_src_valid),                                 //          .valid
		.src_data           (router_023_src_data),                                  //          .data
		.src_channel        (router_023_src_channel),                               //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_024 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_024_src_ready),                               //       src.ready
		.src_valid          (router_024_src_valid),                               //          .valid
		.src_data           (router_024_src_data),                                //          .data
		.src_channel        (router_024_src_channel),                             //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                          //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_025 router_025 (
		.sink_ready         (dconv_fir_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dconv_fir_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (dconv_fir_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dconv_fir_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dconv_fir_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_025_src_ready),                             //       src.ready
		.src_valid          (router_025_src_valid),                             //          .valid
		.src_data           (router_025_src_data),                              //          .data
		.src_channel        (router_025_src_channel),                           //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                        //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_025 router_026 (
		.sink_ready         (dconv_fir_q_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dconv_fir_q_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (dconv_fir_q_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dconv_fir_q_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dconv_fir_q_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_026_src_ready),                               //       src.ready
		.src_valid          (router_026_src_valid),                               //          .valid
		.src_data           (router_026_src_data),                                //          .data
		.src_channel        (router_026_src_channel),                             //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                          //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_027 (
		.sink_ready         (alt_vip_vfr_vga_avalon_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (alt_vip_vfr_vga_avalon_slave_agent_rp_valid),                   //          .valid
		.sink_data          (alt_vip_vfr_vga_avalon_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (gp_pll_outclk0_clk),                                            //       clk.clk
		.reset              (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                          //       src.ready
		.src_valid          (router_027_src_valid),                                          //          .valid
		.src_data           (router_027_src_data),                                           //          .data
		.src_channel        (router_027_src_channel),                                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_028 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_028_src_ready),                            //       src.ready
		.src_valid          (router_028_src_valid),                            //          .valid
		.src_data           (router_028_src_data),                             //          .data
		.src_channel        (router_028_src_channel),                          //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                       //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_029 (
		.sink_ready         (i2c_int_csr_agent_rp_ready),                 //      sink.ready
		.sink_valid         (i2c_int_csr_agent_rp_valid),                 //          .valid
		.sink_data          (i2c_int_csr_agent_rp_data),                  //          .data
		.sink_startofpacket (i2c_int_csr_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (i2c_int_csr_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                       //       src.ready
		.src_valid          (router_029_src_valid),                       //          .valid
		.src_data           (router_029_src_data),                        //          .data
		.src_channel        (router_029_src_channel),                     //          .channel
		.src_startofpacket  (router_029_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_030 (
		.sink_ready         (i2c_ext_csr_agent_rp_ready),                 //      sink.ready
		.sink_valid         (i2c_ext_csr_agent_rp_valid),                 //          .valid
		.sink_data          (i2c_ext_csr_agent_rp_data),                  //          .data
		.sink_startofpacket (i2c_ext_csr_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (i2c_ext_csr_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                       //       src.ready
		.src_valid          (router_030_src_valid),                       //          .valid
		.src_data           (router_030_src_data),                        //          .data
		.src_channel        (router_030_src_channel),                     //          .channel
		.src_startofpacket  (router_030_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_031 (
		.sink_ready         (nmr_parameters_delay_nosig_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_delay_nosig_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_delay_nosig_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_delay_nosig_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_delay_nosig_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_031_src_ready),                                 //       src.ready
		.src_valid          (router_031_src_valid),                                 //          .valid
		.src_data           (router_031_src_data),                                  //          .data
		.src_channel        (router_031_src_channel),                               //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_032 (
		.sink_ready         (nmr_parameters_delay_sig_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_delay_sig_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_delay_sig_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_delay_sig_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_delay_sig_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_032_src_ready),                               //       src.ready
		.src_valid          (router_032_src_valid),                               //          .valid
		.src_data           (router_032_src_data),                                //          .data
		.src_channel        (router_032_src_channel),                             //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                          //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_033 (
		.sink_ready         (nmr_parameters_delay_t1_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_delay_t1_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_delay_t1_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_delay_t1_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_delay_t1_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_033_src_ready),                              //       src.ready
		.src_valid          (router_033_src_valid),                              //          .valid
		.src_data           (router_033_src_data),                               //          .data
		.src_channel        (router_033_src_channel),                            //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_034 (
		.sink_ready         (nmr_parameters_echoes_per_scan_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_echoes_per_scan_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_echoes_per_scan_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_echoes_per_scan_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_echoes_per_scan_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_034_src_ready),                                     //       src.ready
		.src_valid          (router_034_src_valid),                                     //          .valid
		.src_data           (router_034_src_data),                                      //          .data
		.src_channel        (router_034_src_channel),                                   //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                                //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_035 (
		.sink_ready         (adc_fifo_mem_in_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (adc_fifo_mem_in_csr_agent_rp_valid),                //          .valid
		.sink_data          (adc_fifo_mem_in_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (adc_fifo_mem_in_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (adc_fifo_mem_in_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                              //       src.ready
		.src_valid          (router_035_src_valid),                              //          .valid
		.src_data           (router_035_src_data),                               //          .data
		.src_channel        (router_035_src_channel),                            //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_036 (
		.sink_ready         (dconv_fifo_mem_in_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (dconv_fifo_mem_in_csr_agent_rp_valid),              //          .valid
		.sink_data          (dconv_fifo_mem_in_csr_agent_rp_data),               //          .data
		.sink_startofpacket (dconv_fifo_mem_in_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (dconv_fifo_mem_in_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                              //       src.ready
		.src_valid          (router_036_src_valid),                              //          .valid
		.src_data           (router_036_src_data),                               //          .data
		.src_channel        (router_036_src_channel),                            //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_037 (
		.sink_ready         (dconv_fifo_mem_q_in_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (dconv_fifo_mem_q_in_csr_agent_rp_valid),            //          .valid
		.sink_data          (dconv_fifo_mem_q_in_csr_agent_rp_data),             //          .data
		.sink_startofpacket (dconv_fifo_mem_q_in_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (dconv_fifo_mem_q_in_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                              //       src.ready
		.src_valid          (router_037_src_valid),                              //          .valid
		.src_data           (router_037_src_data),                               //          .data
		.src_channel        (router_037_src_channel),                            //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_038 (
		.sink_ready         (nmr_parameters_init_delay_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_init_delay_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_init_delay_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_init_delay_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_init_delay_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_038_src_ready),                                //       src.ready
		.src_valid          (router_038_src_valid),                                //          .valid
		.src_data           (router_038_src_data),                                 //          .data
		.src_channel        (router_038_src_channel),                              //          .channel
		.src_startofpacket  (router_038_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                           //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_039 (
		.sink_ready         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_039_src_ready),                                          //       src.ready
		.src_valid          (router_039_src_valid),                                          //          .valid
		.src_data           (router_039_src_data),                                           //          .data
		.src_channel        (router_039_src_channel),                                        //          .channel
		.src_startofpacket  (router_039_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_040 (
		.sink_ready         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.src_ready          (router_040_src_ready),                                           //       src.ready
		.src_valid          (router_040_src_valid),                                           //          .valid
		.src_data           (router_040_src_data),                                            //          .data
		.src_channel        (router_040_src_channel),                                         //          .channel
		.src_startofpacket  (router_040_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                                      //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_041 router_041 (
		.sink_ready         (dconv_fifo_mem_out_agent_rp_ready),                 //      sink.ready
		.sink_valid         (dconv_fifo_mem_out_agent_rp_valid),                 //          .valid
		.sink_data          (dconv_fifo_mem_out_agent_rp_data),                  //          .data
		.sink_startofpacket (dconv_fifo_mem_out_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (dconv_fifo_mem_out_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_041_src_ready),                              //       src.ready
		.src_valid          (router_041_src_valid),                              //          .valid
		.src_data           (router_041_src_data),                               //          .data
		.src_channel        (router_041_src_channel),                            //          .channel
		.src_startofpacket  (router_041_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_042 router_042 (
		.sink_ready         (dconv_fifo_mem_q_out_agent_rp_ready),               //      sink.ready
		.sink_valid         (dconv_fifo_mem_q_out_agent_rp_valid),               //          .valid
		.sink_data          (dconv_fifo_mem_q_out_agent_rp_data),                //          .data
		.sink_startofpacket (dconv_fifo_mem_q_out_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (dconv_fifo_mem_q_out_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_042_src_ready),                              //       src.ready
		.src_valid          (router_042_src_valid),                              //          .valid
		.src_data           (router_042_src_data),                               //          .data
		.src_channel        (router_042_src_channel),                            //          .channel
		.src_startofpacket  (router_042_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_043 (
		.sink_ready         (nmr_parameters_pulse_180deg_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_pulse_180deg_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_pulse_180deg_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_pulse_180deg_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_pulse_180deg_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_043_src_ready),                                  //       src.ready
		.src_valid          (router_043_src_valid),                                  //          .valid
		.src_data           (router_043_src_data),                                   //          .data
		.src_channel        (router_043_src_channel),                                //          .channel
		.src_startofpacket  (router_043_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_044 (
		.sink_ready         (nmr_parameters_pulse_90deg_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_pulse_90deg_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_pulse_90deg_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_pulse_90deg_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_pulse_90deg_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_044_src_ready),                                 //       src.ready
		.src_valid          (router_044_src_valid),                                 //          .valid
		.src_data           (router_044_src_data),                                  //          .data
		.src_channel        (router_044_src_channel),                               //          .channel
		.src_startofpacket  (router_044_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_045 (
		.sink_ready         (nmr_parameters_pulse_t1_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_pulse_t1_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_pulse_t1_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_pulse_t1_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_pulse_t1_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_045_src_ready),                              //       src.ready
		.src_valid          (router_045_src_valid),                              //          .valid
		.src_data           (router_045_src_data),                               //          .data
		.src_channel        (router_045_src_channel),                            //          .channel
		.src_startofpacket  (router_045_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_046 (
		.sink_ready         (nmr_parameters_rx_delay_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_rx_delay_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_rx_delay_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_rx_delay_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_rx_delay_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_046_src_ready),                              //       src.ready
		.src_valid          (router_046_src_valid),                              //          .valid
		.src_data           (router_046_src_data),                               //          .data
		.src_channel        (router_046_src_channel),                            //          .channel
		.src_startofpacket  (router_046_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_047 (
		.sink_ready         (ctrl_out_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ctrl_out_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ctrl_out_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ctrl_out_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ctrl_out_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_047_src_ready),                       //       src.ready
		.src_valid          (router_047_src_valid),                       //          .valid
		.src_data           (router_047_src_data),                        //          .data
		.src_channel        (router_047_src_channel),                     //          .channel
		.src_startofpacket  (router_047_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_048 (
		.sink_ready         (ctrl_in_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ctrl_in_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ctrl_in_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ctrl_in_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ctrl_in_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_048_src_ready),                       //       src.ready
		.src_valid          (router_048_src_valid),                       //          .valid
		.src_data           (router_048_src_data),                        //          .data
		.src_channel        (router_048_src_channel),                     //          .channel
		.src_startofpacket  (router_048_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_049 (
		.sink_ready         (aux_cnt_out_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (aux_cnt_out_s1_agent_rp_valid),              //          .valid
		.sink_data          (aux_cnt_out_s1_agent_rp_data),               //          .data
		.sink_startofpacket (aux_cnt_out_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (aux_cnt_out_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_049_src_ready),                       //       src.ready
		.src_valid          (router_049_src_valid),                       //          .valid
		.src_data           (router_049_src_data),                        //          .data
		.src_channel        (router_049_src_channel),                     //          .channel
		.src_startofpacket  (router_049_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_050 (
		.sink_ready         (nmr_parameters_samples_per_echo_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (nmr_parameters_samples_per_echo_s1_agent_rp_valid),         //          .valid
		.sink_data          (nmr_parameters_samples_per_echo_s1_agent_rp_data),          //          .data
		.sink_startofpacket (nmr_parameters_samples_per_echo_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nmr_parameters_samples_per_echo_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_050_src_ready),                                      //       src.ready
		.src_valid          (router_050_src_valid),                                      //          .valid
		.src_data           (router_050_src_data),                                       //          .data
		.src_channel        (router_050_src_channel),                                    //          .channel
		.src_startofpacket  (router_050_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                                 //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_051 (
		.sink_ready         (dac_grad_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (dac_grad_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (dac_grad_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (dac_grad_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dac_grad_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_051_src_ready),                             //       src.ready
		.src_valid          (router_051_src_valid),                             //          .valid
		.src_data           (router_051_src_data),                              //          .data
		.src_channel        (router_051_src_channel),                           //          .channel
		.src_startofpacket  (router_051_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_051_src_endofpacket)                        //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_052 (
		.sink_ready         (spi_mtch_ntwrk_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_mtch_ntwrk_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (spi_mtch_ntwrk_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (spi_mtch_ntwrk_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_mtch_ntwrk_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_052_src_ready),                                   //       src.ready
		.src_valid          (router_052_src_valid),                                   //          .valid
		.src_data           (router_052_src_data),                                    //          .data
		.src_channel        (router_052_src_channel),                                 //          .channel
		.src_startofpacket  (router_052_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_052_src_endofpacket)                              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_023 router_053 (
		.sink_ready         (spi_afe_relays_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_afe_relays_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (spi_afe_relays_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (spi_afe_relays_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_afe_relays_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_053_src_ready),                                   //       src.ready
		.src_valid          (router_053_src_valid),                                   //          .valid
		.src_data           (router_053_src_data),                                    //          .data
		.src_channel        (router_053_src_channel),                                 //          .channel
		.src_startofpacket  (router_053_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_053_src_endofpacket)                              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_054 router_054 (
		.sink_ready         (dma_fifo_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_fifo_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_fifo_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_fifo_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_fifo_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_054_src_ready),                               //       src.ready
		.src_valid          (router_054_src_valid),                               //          .valid
		.src_data           (router_054_src_data),                                //          .data
		.src_channel        (router_054_src_channel),                             //          .channel
		.src_startofpacket  (router_054_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_054_src_endofpacket)                          //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_054 router_055 (
		.sink_ready         (dma_dconvi_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_dconvi_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_dconvi_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_dconvi_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvi_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_055_src_ready),                                 //       src.ready
		.src_valid          (router_055_src_valid),                                 //          .valid
		.src_data           (router_055_src_data),                                  //          .data
		.src_channel        (router_055_src_channel),                               //          .channel
		.src_startofpacket  (router_055_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_055_src_endofpacket)                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_054 router_056 (
		.sink_ready         (dma_dconvq_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_dconvq_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_dconvq_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_dconvq_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dconvq_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_056_src_ready),                                 //       src.ready
		.src_valid          (router_056_src_valid),                                 //          .valid
		.src_data           (router_056_src_data),                                  //          .data
		.src_channel        (router_056_src_channel),                               //          .channel
		.src_startofpacket  (router_056_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_056_src_endofpacket)                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_router_054 router_057 (
		.sink_ready         (dma_dummy_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_dummy_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_dummy_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_dummy_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_dummy_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_057_src_ready),                                //       src.ready
		.src_valid          (router_057_src_valid),                                //          .valid
		.src_data           (router_057_src_data),                                 //          .data
		.src_channel        (router_057_src_channel),                              //          .channel
		.src_startofpacket  (router_057_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_057_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_fifo_read_master_limiter (
		.clk                    (clk_0_clk_clk),                                      //       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_006_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_006_src_valid),                               //          .valid
		.cmd_sink_data          (router_006_src_data),                                //          .data
		.cmd_sink_channel       (router_006_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_006_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_006_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (dma_fifo_read_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (dma_fifo_read_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (dma_fifo_read_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (dma_fifo_read_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (dma_fifo_read_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_006_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_006_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_006_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_006_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_006_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_006_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (dma_fifo_read_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (dma_fifo_read_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (dma_fifo_read_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (dma_fifo_read_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (dma_fifo_read_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (dma_fifo_read_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (dma_fifo_read_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                             //          .valid
		.cmd_sink_data          (router_007_src_data),                                              //          .data
		.cmd_sink_channel       (router_007_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_008_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_008_src_valid),                                             //          .valid
		.cmd_sink_data          (router_008_src_data),                                              //          .data
		.cmd_sink_channel       (router_008_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_008_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_008_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_008_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_008_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_008_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_008_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_008_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_008_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.VALID_WIDTH               (45),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) master_non_sec_master_limiter (
		.clk                    (clk_0_clk_clk),                                       //       clk.clk
		.reset                  (dma_fifo_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.cmd_sink_ready         (router_009_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_009_src_valid),                                //          .valid
		.cmd_sink_data          (router_009_src_data),                                 //          .data
		.cmd_sink_channel       (router_009_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (master_non_sec_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (master_non_sec_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (master_non_sec_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (master_non_sec_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (master_non_sec_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_009_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_009_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_009_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_009_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_009_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_009_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (master_non_sec_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (master_non_sec_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (master_non_sec_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (master_non_sec_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (master_non_sec_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (master_non_sec_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (master_non_sec_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy64_in_in_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                      //          .ready
		.source0_valid         (fifo_dummy64_in_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy64_in_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy64_in_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy64_in_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy64_in_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy64_in_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy_in_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                             //          .ready
		.source0_valid         (fifo_dummy_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy64_in_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                      //          .ready
		.source0_valid         (fifo_dummy64_in_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy64_in_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy64_in_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy64_in_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy64_in_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy64_in_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy64_out_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                       //          .ready
		.source0_valid         (fifo_dummy64_out_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy64_out_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy64_out_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy64_out_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy64_out_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy64_out_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                 //          .ready
		.source0_valid         (fifo_dummy_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy64_out_out_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                    //          .ready
		.source0_valid         (fifo_dummy64_out_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy64_out_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy64_out_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy64_out_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy64_out_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy64_out_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_dummy_out_burst_adapter (
		.clk                   (clk_0_clk_clk),                                      //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                              //          .ready
		.source0_valid         (fifo_dummy_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_dummy_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_dummy_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_dummy_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_dummy_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_dummy_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) switches_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                            //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                           //          .ready
		.source0_valid         (switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                         //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                        //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_fifo_mem_out_burst_adapter (
		.clk                   (clk_0_clk_clk),                                        //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                //          .ready
		.source0_valid         (adc_fifo_mem_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_fifo_mem_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_fifo_mem_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_fifo_mem_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_fifo_mem_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_fifo_mem_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_adc_val_sub_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                             //          .ready
		.source0_valid         (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_adc_val_sub_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                           //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fir_avalon_mm_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                         //          .ready
		.source0_valid         (dconv_fir_avalon_mm_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fir_avalon_mm_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fir_avalon_mm_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fir_avalon_mm_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fir_avalon_mm_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fir_avalon_mm_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fir_q_avalon_mm_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                           //          .ready
		.source0_valid         (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fir_q_avalon_mm_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) alt_vip_vfr_vga_avalon_slave_burst_adapter (
		.clk                   (gp_pll_outclk0_clk),                                               //       cr0.clk
		.reset                 (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                            //          .ready
		.source0_valid         (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (alt_vip_vfr_vga_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_int_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                            //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                           //          .ready
		.source0_valid         (i2c_int_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_int_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_int_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_int_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_int_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_int_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) i2c_ext_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                            //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                           //          .ready
		.source0_valid         (i2c_ext_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (i2c_ext_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (i2c_ext_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (i2c_ext_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (i2c_ext_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (i2c_ext_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_delay_nosig_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                             //          .ready
		.source0_valid         (nmr_parameters_delay_nosig_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_delay_nosig_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_delay_nosig_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_delay_nosig_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_delay_nosig_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_delay_nosig_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_delay_sig_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                           //          .ready
		.source0_valid         (nmr_parameters_delay_sig_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_delay_sig_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_delay_sig_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_delay_sig_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_delay_sig_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_delay_sig_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_delay_t1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                          //          .ready
		.source0_valid         (nmr_parameters_delay_t1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_delay_t1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_delay_t1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_delay_t1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_delay_t1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_delay_t1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_echoes_per_scan_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                         //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                                 //          .ready
		.source0_valid         (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_echoes_per_scan_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_fifo_mem_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                                   //          .ready
		.source0_valid         (adc_fifo_mem_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_fifo_mem_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_fifo_mem_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_fifo_mem_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_fifo_mem_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_fifo_mem_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fifo_mem_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                             //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                     //          .ready
		.source0_valid         (dconv_fifo_mem_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fifo_mem_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fifo_mem_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fifo_mem_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fifo_mem_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fifo_mem_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fifo_mem_q_in_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_024_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                                       //          .ready
		.source0_valid         (dconv_fifo_mem_q_in_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fifo_mem_q_in_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fifo_mem_q_in_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fifo_mem_q_in_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fifo_mem_q_in_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fifo_mem_q_in_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_init_delay_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                            //          .ready
		.source0_valid         (nmr_parameters_init_delay_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_init_delay_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_init_delay_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_init_delay_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_init_delay_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_init_delay_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                              //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                                      //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                                       //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                                    //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                                                //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                                      //          .ready
		.source0_valid         (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_sys_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                               //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                                                       //     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                                                        //          .data
		.sink0_channel         (cmd_mux_027_src_channel),                                                     //          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                                                 //          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                                                       //          .ready
		.source0_valid         (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (analyzer_pll_reconfig_mgmt_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fifo_mem_out_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_028_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_028_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_028_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_028_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_028_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_028_src_ready),                                  //          .ready
		.source0_valid         (dconv_fifo_mem_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fifo_mem_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fifo_mem_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fifo_mem_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fifo_mem_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fifo_mem_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dconv_fifo_mem_q_out_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_029_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                                    //          .ready
		.source0_valid         (dconv_fifo_mem_q_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dconv_fifo_mem_q_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (dconv_fifo_mem_q_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dconv_fifo_mem_q_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dconv_fifo_mem_q_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dconv_fifo_mem_q_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_pulse_180deg_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                      //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                         // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                              //          .ready
		.source0_valid         (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_pulse_180deg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_pulse_90deg_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_031_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_031_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_031_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_031_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_031_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_031_src_ready),                                             //          .ready
		.source0_valid         (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_pulse_90deg_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_pulse_t1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_032_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_032_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_032_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_032_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_032_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_032_src_ready),                                          //          .ready
		.source0_valid         (nmr_parameters_pulse_t1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_pulse_t1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_pulse_t1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_pulse_t1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_pulse_t1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_pulse_t1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_rx_delay_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_033_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_033_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_033_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_033_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_033_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_033_src_ready),                                          //          .ready
		.source0_valid         (nmr_parameters_rx_delay_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_rx_delay_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_rx_delay_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_rx_delay_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_rx_delay_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_rx_delay_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ctrl_out_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_034_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_034_src_data),                            //          .data
		.sink0_channel         (cmd_mux_034_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_034_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_034_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_034_src_ready),                           //          .ready
		.source0_valid         (ctrl_out_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ctrl_out_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ctrl_out_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ctrl_out_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ctrl_out_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ctrl_out_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ctrl_in_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                  //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_035_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_035_src_data),                           //          .data
		.sink0_channel         (cmd_mux_035_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_035_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_035_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_035_src_ready),                          //          .ready
		.source0_valid         (ctrl_in_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ctrl_in_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ctrl_in_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ctrl_in_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ctrl_in_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ctrl_in_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) aux_cnt_out_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                      //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_036_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_036_src_data),                               //          .data
		.sink0_channel         (cmd_mux_036_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_036_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_036_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_036_src_ready),                              //          .ready
		.source0_valid         (aux_cnt_out_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (aux_cnt_out_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (aux_cnt_out_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (aux_cnt_out_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (aux_cnt_out_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (aux_cnt_out_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nmr_parameters_samples_per_echo_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                          //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (cmd_mux_037_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_037_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_037_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_037_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_037_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_037_src_ready),                                                  //          .ready
		.source0_valid         (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nmr_parameters_samples_per_echo_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dac_grad_spi_control_port_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                 //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_038_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_038_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_038_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_038_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_038_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_038_src_ready),                                         //          .ready
		.source0_valid         (dac_grad_spi_control_port_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dac_grad_spi_control_port_burst_adapter_source0_data),          //          .data
		.source0_channel       (dac_grad_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dac_grad_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dac_grad_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dac_grad_spi_control_port_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) spi_mtch_ntwrk_spi_control_port_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                       //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_039_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_039_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_039_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_039_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_039_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_039_src_ready),                                               //          .ready
		.source0_valid         (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_data),          //          .data
		.source0_channel       (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (spi_mtch_ntwrk_spi_control_port_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) spi_afe_relays_spi_control_port_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                       //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_040_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_040_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_040_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_040_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_040_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_040_src_ready),                                               //          .ready
		.source0_valid         (spi_afe_relays_spi_control_port_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (spi_afe_relays_spi_control_port_burst_adapter_source0_data),          //          .data
		.source0_channel       (spi_afe_relays_spi_control_port_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (spi_afe_relays_spi_control_port_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (spi_afe_relays_spi_control_port_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (spi_afe_relays_spi_control_port_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_fifo_control_port_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_041_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_041_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_041_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_041_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_041_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_041_src_ready),                                           //          .ready
		.source0_valid         (dma_fifo_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_fifo_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_fifo_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_fifo_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_fifo_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_fifo_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_dconvi_control_port_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_042_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_042_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_042_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_042_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_042_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_042_src_ready),                                             //          .ready
		.source0_valid         (dma_dconvi_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_dconvi_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_dconvi_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_dconvi_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_dconvi_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_dconvi_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_dconvq_control_port_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                        // cr0_reset.reset
		.sink0_valid           (cmd_mux_043_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_043_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_043_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_043_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_043_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_043_src_ready),                                             //          .ready
		.source0_valid         (dma_dconvq_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_dconvq_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_dconvq_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_dconvq_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_dconvq_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_dconvq_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (45),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_dummy_control_port_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (dma_fifo_reset_reset_bridge_in_reset_reset),                       // cr0_reset.reset
		.sink0_valid           (cmd_mux_044_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_044_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_044_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_044_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_044_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_044_src_ready),                                            //          .ready
		.source0_valid         (dma_dummy_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_dummy_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_dummy_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_dummy_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_dummy_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_dummy_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_v5_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //           .valid
		.src2_data          (cmd_demux_src2_data),                                              //           .data
		.src2_channel       (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                             //           .valid
		.src3_data          (cmd_demux_src3_data),                                              //           .data
		.src3_channel       (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                       //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                             //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                             //           .valid
		.src4_data          (cmd_demux_src4_data),                                              //           .data
		.src4_channel       (cmd_demux_src4_channel),                                           //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                     //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                       //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                             //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                             //           .valid
		.src5_data          (cmd_demux_src5_data),                                              //           .data
		.src5_channel       (cmd_demux_src5_channel),                                           //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                     //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                       //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                             //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                             //           .valid
		.src6_data          (cmd_demux_src6_data),                                              //           .data
		.src6_channel       (cmd_demux_src6_channel),                                           //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                     //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                       //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                             //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                             //           .valid
		.src7_data          (cmd_demux_src7_data),                                              //           .data
		.src7_channel       (cmd_demux_src7_channel),                                           //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                                     //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                                       //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                                             //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                                             //           .valid
		.src8_data          (cmd_demux_src8_data),                                              //           .data
		.src8_channel       (cmd_demux_src8_channel),                                           //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                                     //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                                        //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                   //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                         //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                         //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                          //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                       //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                   //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                         //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                         //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                          //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                       //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                   //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                         //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                         //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                          //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                       //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                   //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                         //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                         //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                          //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                       //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                                   //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                                         //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                                         //           .valid
		.src7_data          (cmd_demux_001_src7_data),                                          //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                                       //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                                   //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                                         //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                                         //           .valid
		.src8_data          (cmd_demux_001_src8_data),                                          //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                                       //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                                    //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                       //      sink.ready
		.sink_channel       (router_002_src_channel),                     //          .channel
		.sink_data          (router_002_src_data),                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_004_src0_data),                    //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_005 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_005_src0_data),                    //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_006 cmd_demux_006 (
		.clk                (clk_0_clk_clk),                                      //        clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (dma_fifo_read_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (dma_fifo_read_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (dma_fifo_read_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (dma_fifo_read_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (dma_fifo_read_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (dma_fifo_read_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_006_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_006_src0_data),                            //           .data
		.src0_channel       (cmd_demux_006_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_006_src1_data),                            //           .data
		.src1_channel       (cmd_demux_006_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket)                      //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_007 cmd_demux_007 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_007_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_007_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_007_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_007_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_007_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_007_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_007_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_007_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_007_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_007_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_007_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_007_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_007_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_007_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_007_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_007_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_007_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_007_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_007_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_007_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_007_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_007_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_007_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_007_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_007_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_007_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_007_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_007_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_007_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_007_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_007_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_007_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_007_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_007_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_007_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_007_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_007_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_007_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_007_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_007_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_007_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_007_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_007_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_007_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_007_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_007_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_007_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_007_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_007_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_007_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_007_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_007_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_007_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_007_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_007_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_007_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_007_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_007_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_007_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_007_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_007_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_007_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_007_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_007_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_007_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_007_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_007_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_007_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_007_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_007_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_007_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_007_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_007_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_007_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_007_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_007_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_007_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_007_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_007_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_007_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_007_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_007_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_007_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_007_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_007_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_007_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_007_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_007_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_007_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_007_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_007_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_007_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_007_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_007_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_007_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_007_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_007_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_007_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_007_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_007_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_007_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_007_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_007_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_007_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_007_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_007_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_007_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_007_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_007_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_007_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_007_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_007_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_007_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_007_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_007_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_007_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_007_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_007_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_007_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_007_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_007_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_007_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_007_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_007_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_007_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_007_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_007_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_007_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_007_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_007_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_007_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_007_src21_endofpacket),                                  //           .endofpacket
		.src22_ready         (cmd_demux_007_src22_ready),                                        //      src22.ready
		.src22_valid         (cmd_demux_007_src22_valid),                                        //           .valid
		.src22_data          (cmd_demux_007_src22_data),                                         //           .data
		.src22_channel       (cmd_demux_007_src22_channel),                                      //           .channel
		.src22_startofpacket (cmd_demux_007_src22_startofpacket),                                //           .startofpacket
		.src22_endofpacket   (cmd_demux_007_src22_endofpacket),                                  //           .endofpacket
		.src23_ready         (cmd_demux_007_src23_ready),                                        //      src23.ready
		.src23_valid         (cmd_demux_007_src23_valid),                                        //           .valid
		.src23_data          (cmd_demux_007_src23_data),                                         //           .data
		.src23_channel       (cmd_demux_007_src23_channel),                                      //           .channel
		.src23_startofpacket (cmd_demux_007_src23_startofpacket),                                //           .startofpacket
		.src23_endofpacket   (cmd_demux_007_src23_endofpacket),                                  //           .endofpacket
		.src24_ready         (cmd_demux_007_src24_ready),                                        //      src24.ready
		.src24_valid         (cmd_demux_007_src24_valid),                                        //           .valid
		.src24_data          (cmd_demux_007_src24_data),                                         //           .data
		.src24_channel       (cmd_demux_007_src24_channel),                                      //           .channel
		.src24_startofpacket (cmd_demux_007_src24_startofpacket),                                //           .startofpacket
		.src24_endofpacket   (cmd_demux_007_src24_endofpacket),                                  //           .endofpacket
		.src25_ready         (cmd_demux_007_src25_ready),                                        //      src25.ready
		.src25_valid         (cmd_demux_007_src25_valid),                                        //           .valid
		.src25_data          (cmd_demux_007_src25_data),                                         //           .data
		.src25_channel       (cmd_demux_007_src25_channel),                                      //           .channel
		.src25_startofpacket (cmd_demux_007_src25_startofpacket),                                //           .startofpacket
		.src25_endofpacket   (cmd_demux_007_src25_endofpacket),                                  //           .endofpacket
		.src26_ready         (cmd_demux_007_src26_ready),                                        //      src26.ready
		.src26_valid         (cmd_demux_007_src26_valid),                                        //           .valid
		.src26_data          (cmd_demux_007_src26_data),                                         //           .data
		.src26_channel       (cmd_demux_007_src26_channel),                                      //           .channel
		.src26_startofpacket (cmd_demux_007_src26_startofpacket),                                //           .startofpacket
		.src26_endofpacket   (cmd_demux_007_src26_endofpacket),                                  //           .endofpacket
		.src27_ready         (cmd_demux_007_src27_ready),                                        //      src27.ready
		.src27_valid         (cmd_demux_007_src27_valid),                                        //           .valid
		.src27_data          (cmd_demux_007_src27_data),                                         //           .data
		.src27_channel       (cmd_demux_007_src27_channel),                                      //           .channel
		.src27_startofpacket (cmd_demux_007_src27_startofpacket),                                //           .startofpacket
		.src27_endofpacket   (cmd_demux_007_src27_endofpacket),                                  //           .endofpacket
		.src28_ready         (cmd_demux_007_src28_ready),                                        //      src28.ready
		.src28_valid         (cmd_demux_007_src28_valid),                                        //           .valid
		.src28_data          (cmd_demux_007_src28_data),                                         //           .data
		.src28_channel       (cmd_demux_007_src28_channel),                                      //           .channel
		.src28_startofpacket (cmd_demux_007_src28_startofpacket),                                //           .startofpacket
		.src28_endofpacket   (cmd_demux_007_src28_endofpacket),                                  //           .endofpacket
		.src29_ready         (cmd_demux_007_src29_ready),                                        //      src29.ready
		.src29_valid         (cmd_demux_007_src29_valid),                                        //           .valid
		.src29_data          (cmd_demux_007_src29_data),                                         //           .data
		.src29_channel       (cmd_demux_007_src29_channel),                                      //           .channel
		.src29_startofpacket (cmd_demux_007_src29_startofpacket),                                //           .startofpacket
		.src29_endofpacket   (cmd_demux_007_src29_endofpacket),                                  //           .endofpacket
		.src30_ready         (cmd_demux_007_src30_ready),                                        //      src30.ready
		.src30_valid         (cmd_demux_007_src30_valid),                                        //           .valid
		.src30_data          (cmd_demux_007_src30_data),                                         //           .data
		.src30_channel       (cmd_demux_007_src30_channel),                                      //           .channel
		.src30_startofpacket (cmd_demux_007_src30_startofpacket),                                //           .startofpacket
		.src30_endofpacket   (cmd_demux_007_src30_endofpacket),                                  //           .endofpacket
		.src31_ready         (cmd_demux_007_src31_ready),                                        //      src31.ready
		.src31_valid         (cmd_demux_007_src31_valid),                                        //           .valid
		.src31_data          (cmd_demux_007_src31_data),                                         //           .data
		.src31_channel       (cmd_demux_007_src31_channel),                                      //           .channel
		.src31_startofpacket (cmd_demux_007_src31_startofpacket),                                //           .startofpacket
		.src31_endofpacket   (cmd_demux_007_src31_endofpacket),                                  //           .endofpacket
		.src32_ready         (cmd_demux_007_src32_ready),                                        //      src32.ready
		.src32_valid         (cmd_demux_007_src32_valid),                                        //           .valid
		.src32_data          (cmd_demux_007_src32_data),                                         //           .data
		.src32_channel       (cmd_demux_007_src32_channel),                                      //           .channel
		.src32_startofpacket (cmd_demux_007_src32_startofpacket),                                //           .startofpacket
		.src32_endofpacket   (cmd_demux_007_src32_endofpacket),                                  //           .endofpacket
		.src33_ready         (cmd_demux_007_src33_ready),                                        //      src33.ready
		.src33_valid         (cmd_demux_007_src33_valid),                                        //           .valid
		.src33_data          (cmd_demux_007_src33_data),                                         //           .data
		.src33_channel       (cmd_demux_007_src33_channel),                                      //           .channel
		.src33_startofpacket (cmd_demux_007_src33_startofpacket),                                //           .startofpacket
		.src33_endofpacket   (cmd_demux_007_src33_endofpacket),                                  //           .endofpacket
		.src34_ready         (cmd_demux_007_src34_ready),                                        //      src34.ready
		.src34_valid         (cmd_demux_007_src34_valid),                                        //           .valid
		.src34_data          (cmd_demux_007_src34_data),                                         //           .data
		.src34_channel       (cmd_demux_007_src34_channel),                                      //           .channel
		.src34_startofpacket (cmd_demux_007_src34_startofpacket),                                //           .startofpacket
		.src34_endofpacket   (cmd_demux_007_src34_endofpacket),                                  //           .endofpacket
		.src35_ready         (cmd_demux_007_src35_ready),                                        //      src35.ready
		.src35_valid         (cmd_demux_007_src35_valid),                                        //           .valid
		.src35_data          (cmd_demux_007_src35_data),                                         //           .data
		.src35_channel       (cmd_demux_007_src35_channel),                                      //           .channel
		.src35_startofpacket (cmd_demux_007_src35_startofpacket),                                //           .startofpacket
		.src35_endofpacket   (cmd_demux_007_src35_endofpacket)                                   //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_007 cmd_demux_008 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_008_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_008_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_008_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_008_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_008_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_008_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_008_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_008_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_008_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_008_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_008_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_008_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_008_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_008_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_008_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_008_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_008_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_008_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_008_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_008_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_008_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_008_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_008_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_008_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_008_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_008_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_008_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_008_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_008_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_008_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_008_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_008_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_008_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_008_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_008_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_008_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_008_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_008_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_008_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_008_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_008_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_008_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_008_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_008_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_008_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_008_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_008_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_008_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_008_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_008_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_008_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_008_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_008_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_008_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_008_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_008_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_008_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_008_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_008_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_008_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_008_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_008_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_008_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_008_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_008_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_008_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_008_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_008_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_008_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_008_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_008_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_008_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_008_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_008_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_008_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_008_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_008_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_008_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_008_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_008_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_008_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_008_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_008_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_008_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_008_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_008_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_008_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_008_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_008_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_008_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_008_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_008_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_008_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_008_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_008_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_008_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_008_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_008_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_008_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_008_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_008_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_008_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_008_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_008_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_008_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_008_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_008_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_008_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_008_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_008_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_008_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_008_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_008_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_008_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_008_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_008_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_008_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_008_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_008_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_008_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_008_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_008_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_008_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_008_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_008_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_008_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_008_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_008_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_008_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_008_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_008_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_008_src21_endofpacket),                                  //           .endofpacket
		.src22_ready         (cmd_demux_008_src22_ready),                                        //      src22.ready
		.src22_valid         (cmd_demux_008_src22_valid),                                        //           .valid
		.src22_data          (cmd_demux_008_src22_data),                                         //           .data
		.src22_channel       (cmd_demux_008_src22_channel),                                      //           .channel
		.src22_startofpacket (cmd_demux_008_src22_startofpacket),                                //           .startofpacket
		.src22_endofpacket   (cmd_demux_008_src22_endofpacket),                                  //           .endofpacket
		.src23_ready         (cmd_demux_008_src23_ready),                                        //      src23.ready
		.src23_valid         (cmd_demux_008_src23_valid),                                        //           .valid
		.src23_data          (cmd_demux_008_src23_data),                                         //           .data
		.src23_channel       (cmd_demux_008_src23_channel),                                      //           .channel
		.src23_startofpacket (cmd_demux_008_src23_startofpacket),                                //           .startofpacket
		.src23_endofpacket   (cmd_demux_008_src23_endofpacket),                                  //           .endofpacket
		.src24_ready         (cmd_demux_008_src24_ready),                                        //      src24.ready
		.src24_valid         (cmd_demux_008_src24_valid),                                        //           .valid
		.src24_data          (cmd_demux_008_src24_data),                                         //           .data
		.src24_channel       (cmd_demux_008_src24_channel),                                      //           .channel
		.src24_startofpacket (cmd_demux_008_src24_startofpacket),                                //           .startofpacket
		.src24_endofpacket   (cmd_demux_008_src24_endofpacket),                                  //           .endofpacket
		.src25_ready         (cmd_demux_008_src25_ready),                                        //      src25.ready
		.src25_valid         (cmd_demux_008_src25_valid),                                        //           .valid
		.src25_data          (cmd_demux_008_src25_data),                                         //           .data
		.src25_channel       (cmd_demux_008_src25_channel),                                      //           .channel
		.src25_startofpacket (cmd_demux_008_src25_startofpacket),                                //           .startofpacket
		.src25_endofpacket   (cmd_demux_008_src25_endofpacket),                                  //           .endofpacket
		.src26_ready         (cmd_demux_008_src26_ready),                                        //      src26.ready
		.src26_valid         (cmd_demux_008_src26_valid),                                        //           .valid
		.src26_data          (cmd_demux_008_src26_data),                                         //           .data
		.src26_channel       (cmd_demux_008_src26_channel),                                      //           .channel
		.src26_startofpacket (cmd_demux_008_src26_startofpacket),                                //           .startofpacket
		.src26_endofpacket   (cmd_demux_008_src26_endofpacket),                                  //           .endofpacket
		.src27_ready         (cmd_demux_008_src27_ready),                                        //      src27.ready
		.src27_valid         (cmd_demux_008_src27_valid),                                        //           .valid
		.src27_data          (cmd_demux_008_src27_data),                                         //           .data
		.src27_channel       (cmd_demux_008_src27_channel),                                      //           .channel
		.src27_startofpacket (cmd_demux_008_src27_startofpacket),                                //           .startofpacket
		.src27_endofpacket   (cmd_demux_008_src27_endofpacket),                                  //           .endofpacket
		.src28_ready         (cmd_demux_008_src28_ready),                                        //      src28.ready
		.src28_valid         (cmd_demux_008_src28_valid),                                        //           .valid
		.src28_data          (cmd_demux_008_src28_data),                                         //           .data
		.src28_channel       (cmd_demux_008_src28_channel),                                      //           .channel
		.src28_startofpacket (cmd_demux_008_src28_startofpacket),                                //           .startofpacket
		.src28_endofpacket   (cmd_demux_008_src28_endofpacket),                                  //           .endofpacket
		.src29_ready         (cmd_demux_008_src29_ready),                                        //      src29.ready
		.src29_valid         (cmd_demux_008_src29_valid),                                        //           .valid
		.src29_data          (cmd_demux_008_src29_data),                                         //           .data
		.src29_channel       (cmd_demux_008_src29_channel),                                      //           .channel
		.src29_startofpacket (cmd_demux_008_src29_startofpacket),                                //           .startofpacket
		.src29_endofpacket   (cmd_demux_008_src29_endofpacket),                                  //           .endofpacket
		.src30_ready         (cmd_demux_008_src30_ready),                                        //      src30.ready
		.src30_valid         (cmd_demux_008_src30_valid),                                        //           .valid
		.src30_data          (cmd_demux_008_src30_data),                                         //           .data
		.src30_channel       (cmd_demux_008_src30_channel),                                      //           .channel
		.src30_startofpacket (cmd_demux_008_src30_startofpacket),                                //           .startofpacket
		.src30_endofpacket   (cmd_demux_008_src30_endofpacket),                                  //           .endofpacket
		.src31_ready         (cmd_demux_008_src31_ready),                                        //      src31.ready
		.src31_valid         (cmd_demux_008_src31_valid),                                        //           .valid
		.src31_data          (cmd_demux_008_src31_data),                                         //           .data
		.src31_channel       (cmd_demux_008_src31_channel),                                      //           .channel
		.src31_startofpacket (cmd_demux_008_src31_startofpacket),                                //           .startofpacket
		.src31_endofpacket   (cmd_demux_008_src31_endofpacket),                                  //           .endofpacket
		.src32_ready         (cmd_demux_008_src32_ready),                                        //      src32.ready
		.src32_valid         (cmd_demux_008_src32_valid),                                        //           .valid
		.src32_data          (cmd_demux_008_src32_data),                                         //           .data
		.src32_channel       (cmd_demux_008_src32_channel),                                      //           .channel
		.src32_startofpacket (cmd_demux_008_src32_startofpacket),                                //           .startofpacket
		.src32_endofpacket   (cmd_demux_008_src32_endofpacket),                                  //           .endofpacket
		.src33_ready         (cmd_demux_008_src33_ready),                                        //      src33.ready
		.src33_valid         (cmd_demux_008_src33_valid),                                        //           .valid
		.src33_data          (cmd_demux_008_src33_data),                                         //           .data
		.src33_channel       (cmd_demux_008_src33_channel),                                      //           .channel
		.src33_startofpacket (cmd_demux_008_src33_startofpacket),                                //           .startofpacket
		.src33_endofpacket   (cmd_demux_008_src33_endofpacket),                                  //           .endofpacket
		.src34_ready         (cmd_demux_008_src34_ready),                                        //      src34.ready
		.src34_valid         (cmd_demux_008_src34_valid),                                        //           .valid
		.src34_data          (cmd_demux_008_src34_data),                                         //           .data
		.src34_channel       (cmd_demux_008_src34_channel),                                      //           .channel
		.src34_startofpacket (cmd_demux_008_src34_startofpacket),                                //           .startofpacket
		.src34_endofpacket   (cmd_demux_008_src34_endofpacket),                                  //           .endofpacket
		.src35_ready         (cmd_demux_008_src35_ready),                                        //      src35.ready
		.src35_valid         (cmd_demux_008_src35_valid),                                        //           .valid
		.src35_data          (cmd_demux_008_src35_data),                                         //           .data
		.src35_channel       (cmd_demux_008_src35_channel),                                      //           .channel
		.src35_startofpacket (cmd_demux_008_src35_startofpacket),                                //           .startofpacket
		.src35_endofpacket   (cmd_demux_008_src35_endofpacket)                                   //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_009 cmd_demux_009 (
		.clk                 (clk_0_clk_clk),                                       //        clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),          //  clk_reset.reset
		.sink_ready          (master_non_sec_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (master_non_sec_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (master_non_sec_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (master_non_sec_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (master_non_sec_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (master_non_sec_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_009_src0_ready),                            //       src0.ready
		.src0_valid          (cmd_demux_009_src0_valid),                            //           .valid
		.src0_data           (cmd_demux_009_src0_data),                             //           .data
		.src0_channel        (cmd_demux_009_src0_channel),                          //           .channel
		.src0_startofpacket  (cmd_demux_009_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_009_src0_endofpacket),                      //           .endofpacket
		.src1_ready          (cmd_demux_009_src1_ready),                            //       src1.ready
		.src1_valid          (cmd_demux_009_src1_valid),                            //           .valid
		.src1_data           (cmd_demux_009_src1_data),                             //           .data
		.src1_channel        (cmd_demux_009_src1_channel),                          //           .channel
		.src1_startofpacket  (cmd_demux_009_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_009_src1_endofpacket),                      //           .endofpacket
		.src2_ready          (cmd_demux_009_src2_ready),                            //       src2.ready
		.src2_valid          (cmd_demux_009_src2_valid),                            //           .valid
		.src2_data           (cmd_demux_009_src2_data),                             //           .data
		.src2_channel        (cmd_demux_009_src2_channel),                          //           .channel
		.src2_startofpacket  (cmd_demux_009_src2_startofpacket),                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_009_src2_endofpacket),                      //           .endofpacket
		.src3_ready          (cmd_demux_009_src3_ready),                            //       src3.ready
		.src3_valid          (cmd_demux_009_src3_valid),                            //           .valid
		.src3_data           (cmd_demux_009_src3_data),                             //           .data
		.src3_channel        (cmd_demux_009_src3_channel),                          //           .channel
		.src3_startofpacket  (cmd_demux_009_src3_startofpacket),                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_009_src3_endofpacket),                      //           .endofpacket
		.src4_ready          (cmd_demux_009_src4_ready),                            //       src4.ready
		.src4_valid          (cmd_demux_009_src4_valid),                            //           .valid
		.src4_data           (cmd_demux_009_src4_data),                             //           .data
		.src4_channel        (cmd_demux_009_src4_channel),                          //           .channel
		.src4_startofpacket  (cmd_demux_009_src4_startofpacket),                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_009_src4_endofpacket),                      //           .endofpacket
		.src5_ready          (cmd_demux_009_src5_ready),                            //       src5.ready
		.src5_valid          (cmd_demux_009_src5_valid),                            //           .valid
		.src5_data           (cmd_demux_009_src5_data),                             //           .data
		.src5_channel        (cmd_demux_009_src5_channel),                          //           .channel
		.src5_startofpacket  (cmd_demux_009_src5_startofpacket),                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_009_src5_endofpacket),                      //           .endofpacket
		.src6_ready          (cmd_demux_009_src6_ready),                            //       src6.ready
		.src6_valid          (cmd_demux_009_src6_valid),                            //           .valid
		.src6_data           (cmd_demux_009_src6_data),                             //           .data
		.src6_channel        (cmd_demux_009_src6_channel),                          //           .channel
		.src6_startofpacket  (cmd_demux_009_src6_startofpacket),                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_009_src6_endofpacket),                      //           .endofpacket
		.src7_ready          (cmd_demux_009_src7_ready),                            //       src7.ready
		.src7_valid          (cmd_demux_009_src7_valid),                            //           .valid
		.src7_data           (cmd_demux_009_src7_data),                             //           .data
		.src7_channel        (cmd_demux_009_src7_channel),                          //           .channel
		.src7_startofpacket  (cmd_demux_009_src7_startofpacket),                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_009_src7_endofpacket),                      //           .endofpacket
		.src8_ready          (cmd_demux_009_src8_ready),                            //       src8.ready
		.src8_valid          (cmd_demux_009_src8_valid),                            //           .valid
		.src8_data           (cmd_demux_009_src8_data),                             //           .data
		.src8_channel        (cmd_demux_009_src8_channel),                          //           .channel
		.src8_startofpacket  (cmd_demux_009_src8_startofpacket),                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_009_src8_endofpacket),                      //           .endofpacket
		.src9_ready          (cmd_demux_009_src9_ready),                            //       src9.ready
		.src9_valid          (cmd_demux_009_src9_valid),                            //           .valid
		.src9_data           (cmd_demux_009_src9_data),                             //           .data
		.src9_channel        (cmd_demux_009_src9_channel),                          //           .channel
		.src9_startofpacket  (cmd_demux_009_src9_startofpacket),                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_009_src9_endofpacket),                      //           .endofpacket
		.src10_ready         (cmd_demux_009_src10_ready),                           //      src10.ready
		.src10_valid         (cmd_demux_009_src10_valid),                           //           .valid
		.src10_data          (cmd_demux_009_src10_data),                            //           .data
		.src10_channel       (cmd_demux_009_src10_channel),                         //           .channel
		.src10_startofpacket (cmd_demux_009_src10_startofpacket),                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_009_src10_endofpacket),                     //           .endofpacket
		.src11_ready         (cmd_demux_009_src11_ready),                           //      src11.ready
		.src11_valid         (cmd_demux_009_src11_valid),                           //           .valid
		.src11_data          (cmd_demux_009_src11_data),                            //           .data
		.src11_channel       (cmd_demux_009_src11_channel),                         //           .channel
		.src11_startofpacket (cmd_demux_009_src11_startofpacket),                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_009_src11_endofpacket),                     //           .endofpacket
		.src12_ready         (cmd_demux_009_src12_ready),                           //      src12.ready
		.src12_valid         (cmd_demux_009_src12_valid),                           //           .valid
		.src12_data          (cmd_demux_009_src12_data),                            //           .data
		.src12_channel       (cmd_demux_009_src12_channel),                         //           .channel
		.src12_startofpacket (cmd_demux_009_src12_startofpacket),                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_009_src12_endofpacket),                     //           .endofpacket
		.src13_ready         (cmd_demux_009_src13_ready),                           //      src13.ready
		.src13_valid         (cmd_demux_009_src13_valid),                           //           .valid
		.src13_data          (cmd_demux_009_src13_data),                            //           .data
		.src13_channel       (cmd_demux_009_src13_channel),                         //           .channel
		.src13_startofpacket (cmd_demux_009_src13_startofpacket),                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_009_src13_endofpacket),                     //           .endofpacket
		.src14_ready         (cmd_demux_009_src14_ready),                           //      src14.ready
		.src14_valid         (cmd_demux_009_src14_valid),                           //           .valid
		.src14_data          (cmd_demux_009_src14_data),                            //           .data
		.src14_channel       (cmd_demux_009_src14_channel),                         //           .channel
		.src14_startofpacket (cmd_demux_009_src14_startofpacket),                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_009_src14_endofpacket),                     //           .endofpacket
		.src15_ready         (cmd_demux_009_src15_ready),                           //      src15.ready
		.src15_valid         (cmd_demux_009_src15_valid),                           //           .valid
		.src15_data          (cmd_demux_009_src15_data),                            //           .data
		.src15_channel       (cmd_demux_009_src15_channel),                         //           .channel
		.src15_startofpacket (cmd_demux_009_src15_startofpacket),                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_009_src15_endofpacket),                     //           .endofpacket
		.src16_ready         (cmd_demux_009_src16_ready),                           //      src16.ready
		.src16_valid         (cmd_demux_009_src16_valid),                           //           .valid
		.src16_data          (cmd_demux_009_src16_data),                            //           .data
		.src16_channel       (cmd_demux_009_src16_channel),                         //           .channel
		.src16_startofpacket (cmd_demux_009_src16_startofpacket),                   //           .startofpacket
		.src16_endofpacket   (cmd_demux_009_src16_endofpacket),                     //           .endofpacket
		.src17_ready         (cmd_demux_009_src17_ready),                           //      src17.ready
		.src17_valid         (cmd_demux_009_src17_valid),                           //           .valid
		.src17_data          (cmd_demux_009_src17_data),                            //           .data
		.src17_channel       (cmd_demux_009_src17_channel),                         //           .channel
		.src17_startofpacket (cmd_demux_009_src17_startofpacket),                   //           .startofpacket
		.src17_endofpacket   (cmd_demux_009_src17_endofpacket),                     //           .endofpacket
		.src18_ready         (cmd_demux_009_src18_ready),                           //      src18.ready
		.src18_valid         (cmd_demux_009_src18_valid),                           //           .valid
		.src18_data          (cmd_demux_009_src18_data),                            //           .data
		.src18_channel       (cmd_demux_009_src18_channel),                         //           .channel
		.src18_startofpacket (cmd_demux_009_src18_startofpacket),                   //           .startofpacket
		.src18_endofpacket   (cmd_demux_009_src18_endofpacket),                     //           .endofpacket
		.src19_ready         (cmd_demux_009_src19_ready),                           //      src19.ready
		.src19_valid         (cmd_demux_009_src19_valid),                           //           .valid
		.src19_data          (cmd_demux_009_src19_data),                            //           .data
		.src19_channel       (cmd_demux_009_src19_channel),                         //           .channel
		.src19_startofpacket (cmd_demux_009_src19_startofpacket),                   //           .startofpacket
		.src19_endofpacket   (cmd_demux_009_src19_endofpacket),                     //           .endofpacket
		.src20_ready         (cmd_demux_009_src20_ready),                           //      src20.ready
		.src20_valid         (cmd_demux_009_src20_valid),                           //           .valid
		.src20_data          (cmd_demux_009_src20_data),                            //           .data
		.src20_channel       (cmd_demux_009_src20_channel),                         //           .channel
		.src20_startofpacket (cmd_demux_009_src20_startofpacket),                   //           .startofpacket
		.src20_endofpacket   (cmd_demux_009_src20_endofpacket),                     //           .endofpacket
		.src21_ready         (cmd_demux_009_src21_ready),                           //      src21.ready
		.src21_valid         (cmd_demux_009_src21_valid),                           //           .valid
		.src21_data          (cmd_demux_009_src21_data),                            //           .data
		.src21_channel       (cmd_demux_009_src21_channel),                         //           .channel
		.src21_startofpacket (cmd_demux_009_src21_startofpacket),                   //           .startofpacket
		.src21_endofpacket   (cmd_demux_009_src21_endofpacket),                     //           .endofpacket
		.src22_ready         (cmd_demux_009_src22_ready),                           //      src22.ready
		.src22_valid         (cmd_demux_009_src22_valid),                           //           .valid
		.src22_data          (cmd_demux_009_src22_data),                            //           .data
		.src22_channel       (cmd_demux_009_src22_channel),                         //           .channel
		.src22_startofpacket (cmd_demux_009_src22_startofpacket),                   //           .startofpacket
		.src22_endofpacket   (cmd_demux_009_src22_endofpacket),                     //           .endofpacket
		.src23_ready         (cmd_demux_009_src23_ready),                           //      src23.ready
		.src23_valid         (cmd_demux_009_src23_valid),                           //           .valid
		.src23_data          (cmd_demux_009_src23_data),                            //           .data
		.src23_channel       (cmd_demux_009_src23_channel),                         //           .channel
		.src23_startofpacket (cmd_demux_009_src23_startofpacket),                   //           .startofpacket
		.src23_endofpacket   (cmd_demux_009_src23_endofpacket),                     //           .endofpacket
		.src24_ready         (cmd_demux_009_src24_ready),                           //      src24.ready
		.src24_valid         (cmd_demux_009_src24_valid),                           //           .valid
		.src24_data          (cmd_demux_009_src24_data),                            //           .data
		.src24_channel       (cmd_demux_009_src24_channel),                         //           .channel
		.src24_startofpacket (cmd_demux_009_src24_startofpacket),                   //           .startofpacket
		.src24_endofpacket   (cmd_demux_009_src24_endofpacket),                     //           .endofpacket
		.src25_ready         (cmd_demux_009_src25_ready),                           //      src25.ready
		.src25_valid         (cmd_demux_009_src25_valid),                           //           .valid
		.src25_data          (cmd_demux_009_src25_data),                            //           .data
		.src25_channel       (cmd_demux_009_src25_channel),                         //           .channel
		.src25_startofpacket (cmd_demux_009_src25_startofpacket),                   //           .startofpacket
		.src25_endofpacket   (cmd_demux_009_src25_endofpacket),                     //           .endofpacket
		.src26_ready         (cmd_demux_009_src26_ready),                           //      src26.ready
		.src26_valid         (cmd_demux_009_src26_valid),                           //           .valid
		.src26_data          (cmd_demux_009_src26_data),                            //           .data
		.src26_channel       (cmd_demux_009_src26_channel),                         //           .channel
		.src26_startofpacket (cmd_demux_009_src26_startofpacket),                   //           .startofpacket
		.src26_endofpacket   (cmd_demux_009_src26_endofpacket),                     //           .endofpacket
		.src27_ready         (cmd_demux_009_src27_ready),                           //      src27.ready
		.src27_valid         (cmd_demux_009_src27_valid),                           //           .valid
		.src27_data          (cmd_demux_009_src27_data),                            //           .data
		.src27_channel       (cmd_demux_009_src27_channel),                         //           .channel
		.src27_startofpacket (cmd_demux_009_src27_startofpacket),                   //           .startofpacket
		.src27_endofpacket   (cmd_demux_009_src27_endofpacket),                     //           .endofpacket
		.src28_ready         (cmd_demux_009_src28_ready),                           //      src28.ready
		.src28_valid         (cmd_demux_009_src28_valid),                           //           .valid
		.src28_data          (cmd_demux_009_src28_data),                            //           .data
		.src28_channel       (cmd_demux_009_src28_channel),                         //           .channel
		.src28_startofpacket (cmd_demux_009_src28_startofpacket),                   //           .startofpacket
		.src28_endofpacket   (cmd_demux_009_src28_endofpacket),                     //           .endofpacket
		.src29_ready         (cmd_demux_009_src29_ready),                           //      src29.ready
		.src29_valid         (cmd_demux_009_src29_valid),                           //           .valid
		.src29_data          (cmd_demux_009_src29_data),                            //           .data
		.src29_channel       (cmd_demux_009_src29_channel),                         //           .channel
		.src29_startofpacket (cmd_demux_009_src29_startofpacket),                   //           .startofpacket
		.src29_endofpacket   (cmd_demux_009_src29_endofpacket),                     //           .endofpacket
		.src30_ready         (cmd_demux_009_src30_ready),                           //      src30.ready
		.src30_valid         (cmd_demux_009_src30_valid),                           //           .valid
		.src30_data          (cmd_demux_009_src30_data),                            //           .data
		.src30_channel       (cmd_demux_009_src30_channel),                         //           .channel
		.src30_startofpacket (cmd_demux_009_src30_startofpacket),                   //           .startofpacket
		.src30_endofpacket   (cmd_demux_009_src30_endofpacket),                     //           .endofpacket
		.src31_ready         (cmd_demux_009_src31_ready),                           //      src31.ready
		.src31_valid         (cmd_demux_009_src31_valid),                           //           .valid
		.src31_data          (cmd_demux_009_src31_data),                            //           .data
		.src31_channel       (cmd_demux_009_src31_channel),                         //           .channel
		.src31_startofpacket (cmd_demux_009_src31_startofpacket),                   //           .startofpacket
		.src31_endofpacket   (cmd_demux_009_src31_endofpacket)                      //           .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_010 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                       //      sink.ready
		.sink_channel       (router_010_src_channel),                     //          .channel
		.sink_data          (router_010_src_data),                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_010_src0_data),                    //          .data
		.src0_channel       (cmd_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_011 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_011_src0_data),                    //          .data
		.src0_channel       (cmd_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_demux_002 cmd_demux_012 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                       //      sink.ready
		.sink_channel       (router_012_src_channel),                     //          .channel
		.sink_data          (router_012_src_data),                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_012_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_012_src0_data),                    //          .data
		.src0_channel       (cmd_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_012_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                     //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                        //          .valid
		.src_data            (cmd_mux_001_src_data),                                                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                                          //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                  //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                    //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                            //          .valid
		.src_data            (cmd_mux_004_src_data),                                                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                      //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                                                       //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                                                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_012_src0_ready),                                                            //     sink2.ready
		.sink2_valid         (cmd_demux_012_src0_valid),                                                            //          .valid
		.sink2_channel       (cmd_demux_012_src0_channel),                                                          //          .channel
		.sink2_data          (cmd_demux_012_src0_data),                                                             //          .data
		.sink2_startofpacket (cmd_demux_012_src0_startofpacket),                                                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_012_src0_endofpacket)                                                       //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                                                 //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                         //          .valid
		.src_data            (cmd_mux_006_src_data),                                                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                                                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                      //          .valid
		.src_data            (cmd_mux_007_src_data),                                                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                                                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                                //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_006_src0_ready),                                                   //     sink2.ready
		.sink2_valid         (cmd_demux_006_src0_valid),                                                   //          .valid
		.sink2_channel       (cmd_demux_006_src0_channel),                                                 //          .channel
		.sink2_data          (cmd_demux_006_src0_data),                                                    //          .data
		.sink2_startofpacket (cmd_demux_006_src0_startofpacket),                                           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_006_src0_endofpacket)                                              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_008 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                           //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_008_src_data),                                                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_valid),           //          .valid
		.sink2_channel       (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_channel),         //          .channel
		.sink2_data          (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_data),            //          .data
		.sink2_startofpacket (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid         (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink4_channel       (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink4_data          (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink4_startofpacket (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket   (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink5_ready         (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_ready),          //     sink5.ready
		.sink5_valid         (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_valid),          //          .valid
		.sink5_channel       (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_channel),        //          .channel
		.sink5_data          (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_data),           //          .data
		.sink5_startofpacket (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink5_endofpacket   (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket)     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_009 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_006_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_006_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_006_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_006_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_006_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_006_src1_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_007_src0_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_007_src0_valid),                          //          .valid
		.sink1_channel       (cmd_demux_007_src0_channel),                        //          .channel
		.sink1_data          (cmd_demux_007_src0_data),                           //          .data
		.sink1_startofpacket (cmd_demux_007_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_007_src0_endofpacket),                    //          .endofpacket
		.sink2_ready         (cmd_demux_008_src0_ready),                          //     sink2.ready
		.sink2_valid         (cmd_demux_008_src0_valid),                          //          .valid
		.sink2_channel       (cmd_demux_008_src0_channel),                        //          .channel
		.sink2_data          (cmd_demux_008_src0_data),                           //          .data
		.sink2_startofpacket (cmd_demux_008_src0_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (cmd_demux_008_src0_endofpacket),                    //          .endofpacket
		.sink3_ready         (cmd_demux_009_src0_ready),                          //     sink3.ready
		.sink3_valid         (cmd_demux_009_src0_valid),                          //          .valid
		.sink3_channel       (cmd_demux_009_src0_channel),                        //          .channel
		.sink3_data          (cmd_demux_009_src0_data),                           //          .data
		.sink3_startofpacket (cmd_demux_009_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (cmd_demux_009_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                      //          .valid
		.src_data            (cmd_mux_010_src_data),                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src1_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src1_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src1_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src1_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src1_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src1_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src1_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src1_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src1_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src1_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src1_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src1_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src1_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src1_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                      //          .valid
		.src_data            (cmd_mux_011_src_data),                       //          .data
		.src_channel         (cmd_mux_011_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src2_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src2_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src2_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src2_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src2_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src2_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src2_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src2_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src2_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src2_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src2_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src2_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src2_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src2_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src2_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src2_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_012 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                                                               //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                                       //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                                       //          .valid
		.src_data            (cmd_mux_012_src_data),                                                                        //          .data
		.src_channel         (cmd_mux_012_src_channel),                                                                     //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                                               //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                                                 //          .endofpacket
		.sink0_ready         (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),              //     sink2.ready
		.sink2_valid         (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),              //          .valid
		.sink2_channel       (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),            //          .channel
		.sink2_data          (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),               //          .data
		.sink2_startofpacket (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket)         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_012 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                                                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                                                         //          .valid
		.src_data            (cmd_mux_013_src_data),                                                                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                                                                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                                                   //          .endofpacket
		.sink0_ready         (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),              //     sink2.ready
		.sink2_valid         (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),              //          .valid
		.sink2_channel       (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),            //          .channel
		.sink2_data          (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),               //          .data
		.sink2_startofpacket (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket)         //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_014 (
		.clk                 (gp_pll_outclk0_clk),                                            //       clk.clk
		.reset               (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                         //          .valid
		.src_data            (cmd_mux_014_src_data),                                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                             //          .valid
		.sink0_channel       (crosser_out_channel),                                           //          .channel
		.sink0_data          (crosser_out_data),                                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                       //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                         //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                         //          .valid
		.sink1_channel       (crosser_001_out_channel),                                       //          .channel
		.sink1_data          (crosser_001_out_data),                                          //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                                   //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                         //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                         //          .valid
		.sink2_channel       (crosser_002_out_channel),                                       //          .channel
		.sink2_data          (crosser_002_out_data),                                          //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                      //          .valid
		.src_data            (cmd_mux_015_src_data),                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src6_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src6_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src6_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src6_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src6_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src6_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src6_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src6_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src6_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src6_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src6_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src6_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src6_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src6_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src6_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src6_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src6_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src6_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                      //          .valid
		.src_data            (cmd_mux_016_src_data),                       //          .data
		.src_channel         (cmd_mux_016_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src7_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src7_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src7_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src7_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src7_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src7_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src7_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src7_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src7_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src7_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src7_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src7_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src7_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src7_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src7_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src7_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src7_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src7_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                      //          .valid
		.src_data            (cmd_mux_017_src_data),                       //          .data
		.src_channel         (cmd_mux_017_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src8_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src8_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src8_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src8_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src8_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src8_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src8_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src8_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src8_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src8_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src8_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src8_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src8_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src8_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src8_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src8_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src8_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src8_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                      //          .valid
		.src_data            (cmd_mux_018_src_data),                       //          .data
		.src_channel         (cmd_mux_018_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src9_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_007_src9_valid),                   //          .valid
		.sink0_channel       (cmd_demux_007_src9_channel),                 //          .channel
		.sink0_data          (cmd_demux_007_src9_data),                    //          .data
		.sink0_startofpacket (cmd_demux_007_src9_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src9_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_008_src9_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_008_src9_valid),                   //          .valid
		.sink1_channel       (cmd_demux_008_src9_channel),                 //          .channel
		.sink1_data          (cmd_demux_008_src9_data),                    //          .data
		.sink1_startofpacket (cmd_demux_008_src9_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src9_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_009_src9_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_009_src9_valid),                   //          .valid
		.sink2_channel       (cmd_demux_009_src9_channel),                 //          .channel
		.sink2_data          (cmd_demux_009_src9_data),                    //          .data
		.sink2_startofpacket (cmd_demux_009_src9_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src9_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                      //          .valid
		.src_data            (cmd_mux_019_src_data),                       //          .data
		.src_channel         (cmd_mux_019_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src10_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src10_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src10_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src10_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src10_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src10_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src10_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src10_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src10_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src10_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src10_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src10_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src10_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src10_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src10_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src10_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src10_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src10_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                      //          .valid
		.src_data            (cmd_mux_020_src_data),                       //          .data
		.src_channel         (cmd_mux_020_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src11_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src11_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src11_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src11_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src11_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src11_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src11_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src11_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src11_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src11_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src11_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src11_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src11_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src11_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src11_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src11_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src11_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src11_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                      //          .valid
		.src_data            (cmd_mux_021_src_data),                       //          .data
		.src_channel         (cmd_mux_021_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src12_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src12_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src12_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src12_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src12_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src12_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src12_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src12_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src12_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src12_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src12_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src12_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src12_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src12_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src12_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src12_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src12_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src12_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                             //          .valid
		.src_data            (cmd_mux_022_src_data),                              //          .data
		.src_channel         (cmd_mux_022_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_007_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_007_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_007_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_007_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_007_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_008_src13_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_008_src13_valid),                         //          .valid
		.sink1_channel       (cmd_demux_008_src13_channel),                       //          .channel
		.sink1_data          (cmd_demux_008_src13_data),                          //          .data
		.sink1_startofpacket (cmd_demux_008_src13_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src13_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_009_src13_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_009_src13_valid),                         //          .valid
		.sink2_channel       (cmd_demux_009_src13_channel),                       //          .channel
		.sink2_data          (cmd_demux_009_src13_data),                          //          .data
		.sink2_startofpacket (cmd_demux_009_src13_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src13_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                             //          .valid
		.src_data            (cmd_mux_023_src_data),                              //          .data
		.src_channel         (cmd_mux_023_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_007_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_007_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_007_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_007_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_007_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src14_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_008_src14_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_008_src14_valid),                         //          .valid
		.sink1_channel       (cmd_demux_008_src14_channel),                       //          .channel
		.sink1_data          (cmd_demux_008_src14_data),                          //          .data
		.sink1_startofpacket (cmd_demux_008_src14_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src14_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_009_src14_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_009_src14_valid),                         //          .valid
		.sink2_channel       (cmd_demux_009_src14_channel),                       //          .channel
		.sink2_data          (cmd_demux_009_src14_data),                          //          .data
		.sink2_startofpacket (cmd_demux_009_src14_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src14_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                             //          .valid
		.src_data            (cmd_mux_024_src_data),                              //          .data
		.src_channel         (cmd_mux_024_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_007_src15_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_007_src15_valid),                         //          .valid
		.sink0_channel       (cmd_demux_007_src15_channel),                       //          .channel
		.sink0_data          (cmd_demux_007_src15_data),                          //          .data
		.sink0_startofpacket (cmd_demux_007_src15_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src15_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_008_src15_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_008_src15_valid),                         //          .valid
		.sink1_channel       (cmd_demux_008_src15_channel),                       //          .channel
		.sink1_data          (cmd_demux_008_src15_data),                          //          .data
		.sink1_startofpacket (cmd_demux_008_src15_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src15_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_009_src15_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_009_src15_valid),                         //          .valid
		.sink2_channel       (cmd_demux_009_src15_channel),                       //          .channel
		.sink2_data          (cmd_demux_009_src15_data),                          //          .data
		.sink2_startofpacket (cmd_demux_009_src15_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src15_endofpacket)                    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                      //          .valid
		.src_data            (cmd_mux_025_src_data),                       //          .data
		.src_channel         (cmd_mux_025_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src16_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src16_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src16_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src16_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src16_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src16_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src16_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src16_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src16_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src16_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src16_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src16_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src16_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src16_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src16_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src16_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src16_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src16_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                      //          .valid
		.src_data            (cmd_mux_026_src_data),                       //          .data
		.src_channel         (cmd_mux_026_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src17_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src17_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src17_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src17_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src17_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src17_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src17_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src17_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src17_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src17_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src17_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src17_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src17_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src17_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src17_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src17_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src17_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src17_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                      //          .valid
		.src_data            (cmd_mux_027_src_data),                       //          .data
		.src_channel         (cmd_mux_027_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src18_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src18_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src18_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src18_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src18_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src18_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src18_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src18_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src18_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src18_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src18_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src18_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src18_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src18_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src18_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src18_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src18_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src18_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_009 cmd_mux_028 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                             //          .valid
		.src_data            (cmd_mux_028_src_data),                              //          .data
		.src_channel         (cmd_mux_028_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_007_src19_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_007_src19_valid),                         //          .valid
		.sink0_channel       (cmd_demux_007_src19_channel),                       //          .channel
		.sink0_data          (cmd_demux_007_src19_data),                          //          .data
		.sink0_startofpacket (cmd_demux_007_src19_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src19_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_008_src19_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_008_src19_valid),                         //          .valid
		.sink1_channel       (cmd_demux_008_src19_channel),                       //          .channel
		.sink1_data          (cmd_demux_008_src19_data),                          //          .data
		.sink1_startofpacket (cmd_demux_008_src19_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src19_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_009_src19_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_009_src19_valid),                         //          .valid
		.sink2_channel       (cmd_demux_009_src19_channel),                       //          .channel
		.sink2_data          (cmd_demux_009_src19_data),                          //          .data
		.sink2_startofpacket (cmd_demux_009_src19_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src19_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_011_src0_ready),                          //     sink3.ready
		.sink3_valid         (cmd_demux_011_src0_valid),                          //          .valid
		.sink3_channel       (cmd_demux_011_src0_channel),                        //          .channel
		.sink3_data          (cmd_demux_011_src0_data),                           //          .data
		.sink3_startofpacket (cmd_demux_011_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (cmd_demux_011_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_009 cmd_mux_029 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                             //          .valid
		.src_data            (cmd_mux_029_src_data),                              //          .data
		.src_channel         (cmd_mux_029_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_007_src20_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_007_src20_valid),                         //          .valid
		.sink0_channel       (cmd_demux_007_src20_channel),                       //          .channel
		.sink0_data          (cmd_demux_007_src20_data),                          //          .data
		.sink0_startofpacket (cmd_demux_007_src20_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src20_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_008_src20_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_008_src20_valid),                         //          .valid
		.sink1_channel       (cmd_demux_008_src20_channel),                       //          .channel
		.sink1_data          (cmd_demux_008_src20_data),                          //          .data
		.sink1_startofpacket (cmd_demux_008_src20_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src20_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_009_src20_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_009_src20_valid),                         //          .valid
		.sink2_channel       (cmd_demux_009_src20_channel),                       //          .channel
		.sink2_data          (cmd_demux_009_src20_data),                          //          .data
		.sink2_startofpacket (cmd_demux_009_src20_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src20_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_010_src0_ready),                          //     sink3.ready
		.sink3_valid         (cmd_demux_010_src0_valid),                          //          .valid
		.sink3_channel       (cmd_demux_010_src0_channel),                        //          .channel
		.sink3_data          (cmd_demux_010_src0_data),                           //          .data
		.sink3_startofpacket (cmd_demux_010_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (cmd_demux_010_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_030 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                      //          .valid
		.src_data            (cmd_mux_030_src_data),                       //          .data
		.src_channel         (cmd_mux_030_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src21_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src21_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src21_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src21_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src21_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src21_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src21_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src21_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src21_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src21_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src21_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src21_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src21_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src21_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src21_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src21_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src21_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src21_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_031 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                      //          .valid
		.src_data            (cmd_mux_031_src_data),                       //          .data
		.src_channel         (cmd_mux_031_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src22_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src22_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src22_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src22_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src22_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src22_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src22_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src22_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src22_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src22_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src22_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src22_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src22_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src22_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src22_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src22_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src22_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src22_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_032 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                      //          .valid
		.src_data            (cmd_mux_032_src_data),                       //          .data
		.src_channel         (cmd_mux_032_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src23_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src23_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src23_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src23_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src23_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src23_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src23_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src23_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src23_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src23_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src23_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src23_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src23_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src23_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src23_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src23_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src23_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src23_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_033 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                      //          .valid
		.src_data            (cmd_mux_033_src_data),                       //          .data
		.src_channel         (cmd_mux_033_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src24_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src24_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src24_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src24_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src24_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src24_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src24_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src24_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src24_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src24_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src24_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src24_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src24_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src24_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src24_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src24_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src24_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src24_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_034 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                      //          .valid
		.src_data            (cmd_mux_034_src_data),                       //          .data
		.src_channel         (cmd_mux_034_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src25_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src25_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src25_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src25_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src25_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src25_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src25_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src25_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src25_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src25_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src25_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src25_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src25_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src25_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src25_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src25_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src25_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src25_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_035 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                      //          .valid
		.src_data            (cmd_mux_035_src_data),                       //          .data
		.src_channel         (cmd_mux_035_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src26_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src26_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src26_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src26_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src26_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src26_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src26_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src26_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src26_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src26_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src26_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src26_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src26_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src26_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src26_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src26_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src26_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src26_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_036 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                      //          .valid
		.src_data            (cmd_mux_036_src_data),                       //          .data
		.src_channel         (cmd_mux_036_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src27_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src27_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src27_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src27_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src27_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src27_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src27_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src27_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src27_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src27_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src27_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src27_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src27_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src27_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src27_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src27_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src27_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src27_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_037 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_037_src_valid),                      //          .valid
		.src_data            (cmd_mux_037_src_data),                       //          .data
		.src_channel         (cmd_mux_037_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src28_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src28_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src28_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src28_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src28_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src28_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src28_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src28_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src28_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src28_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src28_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src28_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src28_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src28_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src28_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src28_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src28_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src28_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_038 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_038_src_valid),                      //          .valid
		.src_data            (cmd_mux_038_src_data),                       //          .data
		.src_channel         (cmd_mux_038_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src29_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src29_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src29_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src29_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src29_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src29_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src29_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src29_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src29_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src29_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src29_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src29_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src29_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src29_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src29_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src29_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src29_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src29_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_039 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_039_src_valid),                      //          .valid
		.src_data            (cmd_mux_039_src_data),                       //          .data
		.src_channel         (cmd_mux_039_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src30_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src30_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src30_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src30_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src30_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src30_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src30_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src30_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src30_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src30_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src30_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src30_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src30_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src30_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src30_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src30_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src30_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src30_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux_005 cmd_mux_040 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_040_src_valid),                      //          .valid
		.src_data            (cmd_mux_040_src_data),                       //          .data
		.src_channel         (cmd_mux_040_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src31_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src31_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src31_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src31_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src31_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src31_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src31_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src31_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src31_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src31_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src31_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src31_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_009_src31_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_009_src31_valid),                  //          .valid
		.sink2_channel       (cmd_demux_009_src31_channel),                //          .channel
		.sink2_data          (cmd_demux_009_src31_data),                   //          .data
		.sink2_startofpacket (cmd_demux_009_src31_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_009_src31_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_041 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_041_src_valid),                      //          .valid
		.src_data            (cmd_mux_041_src_data),                       //          .data
		.src_channel         (cmd_mux_041_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src32_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src32_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src32_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src32_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src32_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src32_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src32_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src32_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src32_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src32_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src32_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src32_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_042 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_042_src_valid),                      //          .valid
		.src_data            (cmd_mux_042_src_data),                       //          .data
		.src_channel         (cmd_mux_042_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src33_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src33_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src33_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src33_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src33_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src33_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src33_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src33_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src33_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src33_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src33_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src33_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_043 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_043_src_valid),                      //          .valid
		.src_data            (cmd_mux_043_src_data),                       //          .data
		.src_channel         (cmd_mux_043_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src34_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src34_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src34_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src34_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src34_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src34_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src34_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src34_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src34_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src34_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src34_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src34_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_cmd_mux cmd_mux_044 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_044_src_valid),                      //          .valid
		.src_data            (cmd_mux_044_src_data),                       //          .data
		.src_channel         (cmd_mux_044_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_007_src35_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_007_src35_valid),                  //          .valid
		.sink0_channel       (cmd_demux_007_src35_channel),                //          .channel
		.sink0_data          (cmd_demux_007_src35_data),                   //          .data
		.sink0_startofpacket (cmd_demux_007_src35_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_007_src35_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_008_src35_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_008_src35_valid),                  //          .valid
		.sink1_channel       (cmd_demux_008_src35_channel),                //          .channel
		.sink1_data          (cmd_demux_008_src35_data),                   //          .data
		.sink1_startofpacket (cmd_demux_008_src35_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_008_src35_endofpacket)             //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_src0_data),                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_src1_data),                        //          .data
		.src1_channel       (rsp_demux_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                  //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_001_src1_data),                    //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_002_src1_data),                    //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_003_src1_data),                    //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_004_src1_data),                    //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                       //      sink.ready
		.sink_channel       (router_018_src_channel),                     //          .channel
		.sink_data          (router_018_src_data),                        //          .data
		.sink_startofpacket (router_018_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_018_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_005_src1_data),                    //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_005_src2_data),                    //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                       //      sink.ready
		.sink_channel       (router_019_src_channel),                     //          .channel
		.sink_data          (router_019_src_data),                        //          .data
		.sink_startofpacket (router_019_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_019_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_006_src1_data),                    //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                       //      sink.ready
		.sink_channel       (router_020_src_channel),                     //          .channel
		.sink_data          (router_020_src_data),                        //          .data
		.sink_startofpacket (router_020_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_020_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_007_src1_data),                    //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_007_src2_data),                    //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_008 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                       //      sink.ready
		.sink_channel       (router_021_src_channel),                     //          .channel
		.sink_data          (router_021_src_data),                        //          .data
		.sink_startofpacket (router_021_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_021_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_008_src1_data),                    //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_008_src2_data),                    //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),             //          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),                   //      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),                   //          .valid
		.src3_data          (rsp_demux_008_src3_data),                    //          .data
		.src3_channel       (rsp_demux_008_src3_channel),                 //          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket),             //          .endofpacket
		.src4_ready         (rsp_demux_008_src4_ready),                   //      src4.ready
		.src4_valid         (rsp_demux_008_src4_valid),                   //          .valid
		.src4_data          (rsp_demux_008_src4_data),                    //          .data
		.src4_channel       (rsp_demux_008_src4_channel),                 //          .channel
		.src4_startofpacket (rsp_demux_008_src4_startofpacket),           //          .startofpacket
		.src4_endofpacket   (rsp_demux_008_src4_endofpacket),             //          .endofpacket
		.src5_ready         (rsp_demux_008_src5_ready),                   //      src5.ready
		.src5_valid         (rsp_demux_008_src5_valid),                   //          .valid
		.src5_data          (rsp_demux_008_src5_data),                    //          .data
		.src5_channel       (rsp_demux_008_src5_channel),                 //          .channel
		.src5_startofpacket (rsp_demux_008_src5_startofpacket),           //          .startofpacket
		.src5_endofpacket   (rsp_demux_008_src5_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_009 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                              //      sink.ready
		.sink_channel       (router_022_src_channel),                            //          .channel
		.sink_data          (router_022_src_data),                               //          .data
		.sink_startofpacket (router_022_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_022_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_009_src0_data),                           //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_009_src1_data),                           //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_009_src2_data),                           //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (rsp_demux_009_src3_ready),                          //      src3.ready
		.src3_valid         (rsp_demux_009_src3_valid),                          //          .valid
		.src3_data          (rsp_demux_009_src3_data),                           //          .data
		.src3_channel       (rsp_demux_009_src3_channel),                        //          .channel
		.src3_startofpacket (rsp_demux_009_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (rsp_demux_009_src3_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                       //      sink.ready
		.sink_channel       (router_023_src_channel),                     //          .channel
		.sink_data          (router_023_src_data),                        //          .data
		.sink_startofpacket (router_023_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_023_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_010_src1_data),                    //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_010_src2_data),                    //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                       //      sink.ready
		.sink_channel       (router_024_src_channel),                     //          .channel
		.sink_data          (router_024_src_data),                        //          .data
		.sink_startofpacket (router_024_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_024_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_011_src1_data),                    //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_011_src2_data),                    //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_012 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                       //      sink.ready
		.sink_channel       (router_025_src_channel),                     //          .channel
		.sink_data          (router_025_src_data),                        //          .data
		.sink_startofpacket (router_025_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_025_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_012_src0_data),                    //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_012_src1_data),                    //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_012_src2_data),                    //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_012 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                       //      sink.ready
		.sink_channel       (router_026_src_channel),                     //          .channel
		.sink_data          (router_026_src_data),                        //          .data
		.sink_startofpacket (router_026_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_026_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_013_src1_data),                    //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_013_src2_data),                    //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_014 rsp_demux_014 (
		.clk                (gp_pll_outclk0_clk),                                            //       clk.clk
		.reset              (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                          //      sink.ready
		.sink_channel       (router_027_src_channel),                                        //          .channel
		.sink_data          (router_027_src_data),                                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                                //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                                      //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                                      //          .valid
		.src2_data          (rsp_demux_014_src2_data),                                       //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                                    //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),                              //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket)                                 //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                       //      sink.ready
		.sink_channel       (router_028_src_channel),                     //          .channel
		.sink_data          (router_028_src_data),                        //          .data
		.sink_startofpacket (router_028_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_028_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_015_src1_data),                    //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_015_src2_data),                    //          .data
		.src2_channel       (rsp_demux_015_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                       //      sink.ready
		.sink_channel       (router_029_src_channel),                     //          .channel
		.sink_data          (router_029_src_data),                        //          .data
		.sink_startofpacket (router_029_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_029_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_016_src0_data),                    //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_016_src1_data),                    //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_016_src2_data),                    //          .data
		.src2_channel       (rsp_demux_016_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                       //      sink.ready
		.sink_channel       (router_030_src_channel),                     //          .channel
		.sink_data          (router_030_src_data),                        //          .data
		.sink_startofpacket (router_030_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_030_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_017_src0_data),                    //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_017_src1_data),                    //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_017_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_017_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_017_src2_data),                    //          .data
		.src2_channel       (rsp_demux_017_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_017_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_017_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                       //      sink.ready
		.sink_channel       (router_031_src_channel),                     //          .channel
		.sink_data          (router_031_src_data),                        //          .data
		.sink_startofpacket (router_031_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_031_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_018_src0_data),                    //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_018_src1_data),                    //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_018_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_018_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_018_src2_data),                    //          .data
		.src2_channel       (rsp_demux_018_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_018_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_018_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_019 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                       //      sink.ready
		.sink_channel       (router_032_src_channel),                     //          .channel
		.sink_data          (router_032_src_data),                        //          .data
		.sink_startofpacket (router_032_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_032_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_019_src0_data),                    //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_019_src1_data),                    //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_019_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_019_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_019_src2_data),                    //          .data
		.src2_channel       (rsp_demux_019_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_019_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_019_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_020 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                       //      sink.ready
		.sink_channel       (router_033_src_channel),                     //          .channel
		.sink_data          (router_033_src_data),                        //          .data
		.sink_startofpacket (router_033_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_033_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_020_src0_data),                    //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_020_src1_data),                    //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_020_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_020_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_020_src2_data),                    //          .data
		.src2_channel       (rsp_demux_020_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_020_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_020_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_021 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                       //      sink.ready
		.sink_channel       (router_034_src_channel),                     //          .channel
		.sink_data          (router_034_src_data),                        //          .data
		.sink_startofpacket (router_034_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_034_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_021_src0_data),                    //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_021_src1_data),                    //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_021_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_021_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_021_src2_data),                    //          .data
		.src2_channel       (rsp_demux_021_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_021_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_021_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                              //      sink.ready
		.sink_channel       (router_035_src_channel),                            //          .channel
		.sink_data          (router_035_src_data),                               //          .data
		.sink_startofpacket (router_035_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_035_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_022_src0_data),                           //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_022_src1_data),                           //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_022_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_022_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_022_src2_data),                           //          .data
		.src2_channel       (rsp_demux_022_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_022_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_022_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                              //      sink.ready
		.sink_channel       (router_036_src_channel),                            //          .channel
		.sink_data          (router_036_src_data),                               //          .data
		.sink_startofpacket (router_036_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_036_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_023_src0_data),                           //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_023_src1_data),                           //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_023_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_023_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_023_src2_data),                           //          .data
		.src2_channel       (rsp_demux_023_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_023_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_023_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                              //      sink.ready
		.sink_channel       (router_037_src_channel),                            //          .channel
		.sink_data          (router_037_src_data),                               //          .data
		.sink_startofpacket (router_037_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_037_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_024_src0_data),                           //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_024_src1_data),                           //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_024_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_024_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_024_src2_data),                           //          .data
		.src2_channel       (rsp_demux_024_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_024_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_024_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_025 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                       //      sink.ready
		.sink_channel       (router_038_src_channel),                     //          .channel
		.sink_data          (router_038_src_data),                        //          .data
		.sink_startofpacket (router_038_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_038_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_025_src0_data),                    //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_025_src1_data),                    //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_025_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_025_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_025_src2_data),                    //          .data
		.src2_channel       (rsp_demux_025_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_025_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_025_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_026 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                       //      sink.ready
		.sink_channel       (router_039_src_channel),                     //          .channel
		.sink_data          (router_039_src_data),                        //          .data
		.sink_startofpacket (router_039_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_039_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_026_src0_data),                    //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_026_src1_data),                    //          .data
		.src1_channel       (rsp_demux_026_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_026_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_026_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_026_src2_data),                    //          .data
		.src2_channel       (rsp_demux_026_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_026_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_026_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_027 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_040_src_ready),                       //      sink.ready
		.sink_channel       (router_040_src_channel),                     //          .channel
		.sink_data          (router_040_src_data),                        //          .data
		.sink_startofpacket (router_040_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_040_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_027_src0_data),                    //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_027_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_027_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_027_src1_data),                    //          .data
		.src1_channel       (rsp_demux_027_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_027_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_027_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_027_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_027_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_027_src2_data),                    //          .data
		.src2_channel       (rsp_demux_027_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_027_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_027_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_009 rsp_demux_028 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_041_src_ready),                              //      sink.ready
		.sink_channel       (router_041_src_channel),                            //          .channel
		.sink_data          (router_041_src_data),                               //          .data
		.sink_startofpacket (router_041_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_041_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_028_src0_data),                           //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_028_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_028_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_028_src1_data),                           //          .data
		.src1_channel       (rsp_demux_028_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_028_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_028_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_028_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_028_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_028_src2_data),                           //          .data
		.src2_channel       (rsp_demux_028_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_028_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_028_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (rsp_demux_028_src3_ready),                          //      src3.ready
		.src3_valid         (rsp_demux_028_src3_valid),                          //          .valid
		.src3_data          (rsp_demux_028_src3_data),                           //          .data
		.src3_channel       (rsp_demux_028_src3_channel),                        //          .channel
		.src3_startofpacket (rsp_demux_028_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (rsp_demux_028_src3_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_009 rsp_demux_029 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_042_src_ready),                              //      sink.ready
		.sink_channel       (router_042_src_channel),                            //          .channel
		.sink_data          (router_042_src_data),                               //          .data
		.sink_startofpacket (router_042_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_042_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_029_src0_data),                           //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_029_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_029_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_029_src1_data),                           //          .data
		.src1_channel       (rsp_demux_029_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_029_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_029_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_029_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_029_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_029_src2_data),                           //          .data
		.src2_channel       (rsp_demux_029_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_029_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_029_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (rsp_demux_029_src3_ready),                          //      src3.ready
		.src3_valid         (rsp_demux_029_src3_valid),                          //          .valid
		.src3_data          (rsp_demux_029_src3_data),                           //          .data
		.src3_channel       (rsp_demux_029_src3_channel),                        //          .channel
		.src3_startofpacket (rsp_demux_029_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (rsp_demux_029_src3_endofpacket)                     //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_030 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_043_src_ready),                       //      sink.ready
		.sink_channel       (router_043_src_channel),                     //          .channel
		.sink_data          (router_043_src_data),                        //          .data
		.sink_startofpacket (router_043_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_043_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_030_src0_data),                    //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_030_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_030_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_030_src1_data),                    //          .data
		.src1_channel       (rsp_demux_030_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_030_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_030_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_030_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_030_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_030_src2_data),                    //          .data
		.src2_channel       (rsp_demux_030_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_030_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_030_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_031 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_044_src_ready),                       //      sink.ready
		.sink_channel       (router_044_src_channel),                     //          .channel
		.sink_data          (router_044_src_data),                        //          .data
		.sink_startofpacket (router_044_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_044_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_031_src0_data),                    //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_031_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_031_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_031_src1_data),                    //          .data
		.src1_channel       (rsp_demux_031_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_031_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_031_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_031_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_031_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_031_src2_data),                    //          .data
		.src2_channel       (rsp_demux_031_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_031_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_031_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_032 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_045_src_ready),                       //      sink.ready
		.sink_channel       (router_045_src_channel),                     //          .channel
		.sink_data          (router_045_src_data),                        //          .data
		.sink_startofpacket (router_045_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_045_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_032_src0_data),                    //          .data
		.src0_channel       (rsp_demux_032_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_032_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_032_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_032_src1_data),                    //          .data
		.src1_channel       (rsp_demux_032_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_032_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_032_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_032_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_032_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_032_src2_data),                    //          .data
		.src2_channel       (rsp_demux_032_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_032_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_032_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_033 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_046_src_ready),                       //      sink.ready
		.sink_channel       (router_046_src_channel),                     //          .channel
		.sink_data          (router_046_src_data),                        //          .data
		.sink_startofpacket (router_046_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_046_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_033_src0_data),                    //          .data
		.src0_channel       (rsp_demux_033_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_033_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_033_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_033_src1_data),                    //          .data
		.src1_channel       (rsp_demux_033_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_033_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_033_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_033_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_033_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_033_src2_data),                    //          .data
		.src2_channel       (rsp_demux_033_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_033_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_033_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_034 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                       //      sink.ready
		.sink_channel       (router_047_src_channel),                     //          .channel
		.sink_data          (router_047_src_data),                        //          .data
		.sink_startofpacket (router_047_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_047_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_034_src0_data),                    //          .data
		.src0_channel       (rsp_demux_034_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_034_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_034_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_034_src1_data),                    //          .data
		.src1_channel       (rsp_demux_034_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_034_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_034_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_034_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_034_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_034_src2_data),                    //          .data
		.src2_channel       (rsp_demux_034_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_034_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_034_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_035 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                       //      sink.ready
		.sink_channel       (router_048_src_channel),                     //          .channel
		.sink_data          (router_048_src_data),                        //          .data
		.sink_startofpacket (router_048_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_048_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_035_src0_data),                    //          .data
		.src0_channel       (rsp_demux_035_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_035_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_035_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_035_src1_data),                    //          .data
		.src1_channel       (rsp_demux_035_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_035_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_035_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_035_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_035_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_035_src2_data),                    //          .data
		.src2_channel       (rsp_demux_035_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_035_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_035_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_036 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_049_src_ready),                       //      sink.ready
		.sink_channel       (router_049_src_channel),                     //          .channel
		.sink_data          (router_049_src_data),                        //          .data
		.sink_startofpacket (router_049_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_049_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_036_src0_data),                    //          .data
		.src0_channel       (rsp_demux_036_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_036_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_036_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_036_src1_data),                    //          .data
		.src1_channel       (rsp_demux_036_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_036_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_036_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_036_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_036_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_036_src2_data),                    //          .data
		.src2_channel       (rsp_demux_036_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_036_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_036_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_037 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_050_src_ready),                       //      sink.ready
		.sink_channel       (router_050_src_channel),                     //          .channel
		.sink_data          (router_050_src_data),                        //          .data
		.sink_startofpacket (router_050_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_050_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_037_src0_data),                    //          .data
		.src0_channel       (rsp_demux_037_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_037_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_037_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_037_src1_data),                    //          .data
		.src1_channel       (rsp_demux_037_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_037_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_037_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_037_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_037_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_037_src2_data),                    //          .data
		.src2_channel       (rsp_demux_037_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_037_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_037_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_038 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_051_src_ready),                       //      sink.ready
		.sink_channel       (router_051_src_channel),                     //          .channel
		.sink_data          (router_051_src_data),                        //          .data
		.sink_startofpacket (router_051_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_051_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_051_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_038_src0_data),                    //          .data
		.src0_channel       (rsp_demux_038_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_038_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_038_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_038_src1_data),                    //          .data
		.src1_channel       (rsp_demux_038_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_038_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_038_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_038_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_038_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_038_src2_data),                    //          .data
		.src2_channel       (rsp_demux_038_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_038_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_038_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_039 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_052_src_ready),                       //      sink.ready
		.sink_channel       (router_052_src_channel),                     //          .channel
		.sink_data          (router_052_src_data),                        //          .data
		.sink_startofpacket (router_052_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_052_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_052_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_039_src0_data),                    //          .data
		.src0_channel       (rsp_demux_039_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_039_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_039_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_039_src1_data),                    //          .data
		.src1_channel       (rsp_demux_039_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_039_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_039_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_039_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_039_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_039_src2_data),                    //          .data
		.src2_channel       (rsp_demux_039_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_039_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_039_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux_005 rsp_demux_040 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_053_src_ready),                       //      sink.ready
		.sink_channel       (router_053_src_channel),                     //          .channel
		.sink_data          (router_053_src_data),                        //          .data
		.sink_startofpacket (router_053_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_053_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_053_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_040_src0_data),                    //          .data
		.src0_channel       (rsp_demux_040_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_040_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_040_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_040_src1_data),                    //          .data
		.src1_channel       (rsp_demux_040_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_040_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_040_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_040_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_040_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_040_src2_data),                    //          .data
		.src2_channel       (rsp_demux_040_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_040_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_040_src2_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_041 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_054_src_ready),                       //      sink.ready
		.sink_channel       (router_054_src_channel),                     //          .channel
		.sink_data          (router_054_src_data),                        //          .data
		.sink_startofpacket (router_054_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_054_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_054_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_041_src0_data),                    //          .data
		.src0_channel       (rsp_demux_041_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_041_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_041_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_041_src1_data),                    //          .data
		.src1_channel       (rsp_demux_041_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_041_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_041_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_042 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_055_src_ready),                       //      sink.ready
		.sink_channel       (router_055_src_channel),                     //          .channel
		.sink_data          (router_055_src_data),                        //          .data
		.sink_startofpacket (router_055_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_055_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_055_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_042_src0_data),                    //          .data
		.src0_channel       (rsp_demux_042_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_042_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_042_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_042_src1_data),                    //          .data
		.src1_channel       (rsp_demux_042_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_042_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_042_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_043 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_056_src_ready),                       //      sink.ready
		.sink_channel       (router_056_src_channel),                     //          .channel
		.sink_data          (router_056_src_data),                        //          .data
		.sink_startofpacket (router_056_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_056_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_056_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_043_src0_data),                    //          .data
		.src0_channel       (rsp_demux_043_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_043_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_043_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_043_src1_data),                    //          .data
		.src1_channel       (rsp_demux_043_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_043_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_043_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_demux rsp_demux_044 (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_057_src_ready),                       //      sink.ready
		.sink_channel       (router_057_src_channel),                     //          .channel
		.sink_data          (router_057_src_data),                        //          .data
		.sink_startofpacket (router_057_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_057_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_057_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_044_src0_data),                    //          .data
		.src0_channel       (rsp_demux_044_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_044_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_044_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_044_src1_data),                    //          .data
		.src1_channel       (rsp_demux_044_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_044_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_044_src1_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                                          //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                      //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                      //          .valid
		.src_data            (rsp_mux_src_data),                                                                       //          .data
		.src_channel         (rsp_mux_src_channel),                                                                    //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                              //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                //          .endofpacket
		.sink0_ready         (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),              //     sink0.ready
		.sink0_valid         (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),              //          .valid
		.sink0_channel       (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),            //          .channel
		.sink0_data          (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),               //          .data
		.sink0_startofpacket (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink1_ready         (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),                   //     sink1.ready
		.sink1_valid         (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),                   //          .valid
		.sink1_channel       (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),                 //          .channel
		.sink1_data          (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                    //          .data
		.sink1_startofpacket (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),             //          .endofpacket
		.sink2_ready         (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),          //          .valid
		.sink2_channel       (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),        //          .channel
		.sink2_data          (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),           //          .data
		.sink2_startofpacket (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink3_ready         (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel       (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data          (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),               //     sink4.ready
		.sink4_valid         (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),               //          .valid
		.sink4_channel       (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),             //          .channel
		.sink4_data          (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                //          .data
		.sink4_startofpacket (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink4_endofpacket   (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),         //          .endofpacket
		.sink5_ready         (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),            //     sink5.ready
		.sink5_valid         (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),            //          .valid
		.sink5_channel       (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),          //          .channel
		.sink5_data          (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),             //          .data
		.sink5_startofpacket (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink5_endofpacket   (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink6_ready         (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),                  //     sink6.ready
		.sink6_valid         (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),                  //          .valid
		.sink6_channel       (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),                //          .channel
		.sink6_data          (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                   //          .data
		.sink6_startofpacket (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink6_endofpacket   (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink7_ready         (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),                     //     sink7.ready
		.sink7_valid         (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),                     //          .valid
		.sink7_channel       (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),                   //          .channel
		.sink7_data          (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                      //          .data
		.sink7_startofpacket (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),             //          .startofpacket
		.sink7_endofpacket   (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),               //          .endofpacket
		.sink8_ready         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),                        //     sink8.ready
		.sink8_valid         (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),                        //          .valid
		.sink8_channel       (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),                      //          .channel
		.sink8_data          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                         //          .data
		.sink8_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.sink8_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)                   //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                          //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                  //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                  //          .valid
		.src_data            (rsp_mux_001_src_data),                                                                   //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),              //     sink0.ready
		.sink0_valid         (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),              //          .valid
		.sink0_channel       (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),            //          .channel
		.sink0_data          (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),               //          .data
		.sink0_startofpacket (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink1_ready         (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),                   //     sink1.ready
		.sink1_valid         (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),                   //          .valid
		.sink1_channel       (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),                 //          .channel
		.sink1_data          (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                    //          .data
		.sink1_startofpacket (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),             //          .endofpacket
		.sink2_ready         (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),          //     sink2.ready
		.sink2_valid         (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),          //          .valid
		.sink2_channel       (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),        //          .channel
		.sink2_data          (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),           //          .data
		.sink2_startofpacket (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink3_ready         (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel       (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data          (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),               //     sink4.ready
		.sink4_valid         (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),               //          .valid
		.sink4_channel       (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),             //          .channel
		.sink4_data          (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                //          .data
		.sink4_startofpacket (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink4_endofpacket   (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),         //          .endofpacket
		.sink5_ready         (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),            //     sink5.ready
		.sink5_valid         (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),            //          .valid
		.sink5_channel       (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),          //          .channel
		.sink5_data          (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),             //          .data
		.sink5_startofpacket (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),    //          .startofpacket
		.sink5_endofpacket   (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),      //          .endofpacket
		.sink6_ready         (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),                  //     sink6.ready
		.sink6_valid         (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),                  //          .valid
		.sink6_channel       (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),                //          .channel
		.sink6_data          (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                   //          .data
		.sink6_startofpacket (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink6_endofpacket   (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink7_ready         (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),                     //     sink7.ready
		.sink7_valid         (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),                     //          .valid
		.sink7_channel       (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),                   //          .channel
		.sink7_data          (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                      //          .data
		.sink7_startofpacket (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),             //          .startofpacket
		.sink7_endofpacket   (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),               //          .endofpacket
		.sink8_ready         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),                        //     sink8.ready
		.sink8_valid         (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),                        //          .valid
		.sink8_channel       (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),                      //          .channel
		.sink8_data          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                         //          .data
		.sink8_startofpacket (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.sink8_endofpacket   (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)                   //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_002_src_data),                                                  //          .data
		.src_channel         (rsp_mux_002_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                                           //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_003_src_data),                                                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                                           //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_004_src_data),                                                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_005 (
		.clk                 (clk_0_clk_clk),                                                          //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                                  //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                                  //          .valid
		.src_data            (rsp_mux_005_src_data),                                                   //          .data
		.src_channel         (rsp_mux_005_src_channel),                                                //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_006 rsp_mux_006 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                      //          .valid
		.src_data            (rsp_mux_006_src_data),                       //          .data
		.src_channel         (rsp_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_007_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_007_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_007_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_007_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_007_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_007_src2_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_009_src0_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_009_src0_valid),                   //          .valid
		.sink1_channel       (rsp_demux_009_src0_channel),                 //          .channel
		.sink1_data          (rsp_demux_009_src0_data),                    //          .data
		.sink1_startofpacket (rsp_demux_009_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_009_src0_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_007 rsp_mux_007 (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready            (rsp_mux_007_src_ready),                                                                         //       src.ready
		.src_valid            (rsp_mux_007_src_valid),                                                                         //          .valid
		.src_data             (rsp_mux_007_src_data),                                                                          //          .data
		.src_channel          (rsp_mux_007_src_channel),                                                                       //          .channel
		.src_startofpacket    (rsp_mux_007_src_startofpacket),                                                                 //          .startofpacket
		.src_endofpacket      (rsp_mux_007_src_endofpacket),                                                                   //          .endofpacket
		.sink0_ready          (rsp_demux_009_src1_ready),                                                                      //     sink0.ready
		.sink0_valid          (rsp_demux_009_src1_valid),                                                                      //          .valid
		.sink0_channel        (rsp_demux_009_src1_channel),                                                                    //          .channel
		.sink0_data           (rsp_demux_009_src1_data),                                                                       //          .data
		.sink0_startofpacket  (rsp_demux_009_src1_startofpacket),                                                              //          .startofpacket
		.sink0_endofpacket    (rsp_demux_009_src1_endofpacket),                                                                //          .endofpacket
		.sink1_ready          (rsp_demux_010_src0_ready),                                                                      //     sink1.ready
		.sink1_valid          (rsp_demux_010_src0_valid),                                                                      //          .valid
		.sink1_channel        (rsp_demux_010_src0_channel),                                                                    //          .channel
		.sink1_data           (rsp_demux_010_src0_data),                                                                       //          .data
		.sink1_startofpacket  (rsp_demux_010_src0_startofpacket),                                                              //          .startofpacket
		.sink1_endofpacket    (rsp_demux_010_src0_endofpacket),                                                                //          .endofpacket
		.sink2_ready          (rsp_demux_011_src0_ready),                                                                      //     sink2.ready
		.sink2_valid          (rsp_demux_011_src0_valid),                                                                      //          .valid
		.sink2_channel        (rsp_demux_011_src0_channel),                                                                    //          .channel
		.sink2_data           (rsp_demux_011_src0_data),                                                                       //          .data
		.sink2_startofpacket  (rsp_demux_011_src0_startofpacket),                                                              //          .startofpacket
		.sink2_endofpacket    (rsp_demux_011_src0_endofpacket),                                                                //          .endofpacket
		.sink3_ready          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),           //     sink3.ready
		.sink3_valid          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),           //          .valid
		.sink3_channel        (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),         //          .channel
		.sink3_data           (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),            //          .data
		.sink3_startofpacket  (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink3_endofpacket    (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink4_ready          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink4_channel        (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink4_data           (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink4_startofpacket  (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket    (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink5_ready          (crosser_003_out_ready),                                                                         //     sink5.ready
		.sink5_valid          (crosser_003_out_valid),                                                                         //          .valid
		.sink5_channel        (crosser_003_out_channel),                                                                       //          .channel
		.sink5_data           (crosser_003_out_data),                                                                          //          .data
		.sink5_startofpacket  (crosser_003_out_startofpacket),                                                                 //          .startofpacket
		.sink5_endofpacket    (crosser_003_out_endofpacket),                                                                   //          .endofpacket
		.sink6_ready          (rsp_demux_015_src0_ready),                                                                      //     sink6.ready
		.sink6_valid          (rsp_demux_015_src0_valid),                                                                      //          .valid
		.sink6_channel        (rsp_demux_015_src0_channel),                                                                    //          .channel
		.sink6_data           (rsp_demux_015_src0_data),                                                                       //          .data
		.sink6_startofpacket  (rsp_demux_015_src0_startofpacket),                                                              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_015_src0_endofpacket),                                                                //          .endofpacket
		.sink7_ready          (rsp_demux_016_src0_ready),                                                                      //     sink7.ready
		.sink7_valid          (rsp_demux_016_src0_valid),                                                                      //          .valid
		.sink7_channel        (rsp_demux_016_src0_channel),                                                                    //          .channel
		.sink7_data           (rsp_demux_016_src0_data),                                                                       //          .data
		.sink7_startofpacket  (rsp_demux_016_src0_startofpacket),                                                              //          .startofpacket
		.sink7_endofpacket    (rsp_demux_016_src0_endofpacket),                                                                //          .endofpacket
		.sink8_ready          (rsp_demux_017_src0_ready),                                                                      //     sink8.ready
		.sink8_valid          (rsp_demux_017_src0_valid),                                                                      //          .valid
		.sink8_channel        (rsp_demux_017_src0_channel),                                                                    //          .channel
		.sink8_data           (rsp_demux_017_src0_data),                                                                       //          .data
		.sink8_startofpacket  (rsp_demux_017_src0_startofpacket),                                                              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_017_src0_endofpacket),                                                                //          .endofpacket
		.sink9_ready          (rsp_demux_018_src0_ready),                                                                      //     sink9.ready
		.sink9_valid          (rsp_demux_018_src0_valid),                                                                      //          .valid
		.sink9_channel        (rsp_demux_018_src0_channel),                                                                    //          .channel
		.sink9_data           (rsp_demux_018_src0_data),                                                                       //          .data
		.sink9_startofpacket  (rsp_demux_018_src0_startofpacket),                                                              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_018_src0_endofpacket),                                                                //          .endofpacket
		.sink10_ready         (rsp_demux_019_src0_ready),                                                                      //    sink10.ready
		.sink10_valid         (rsp_demux_019_src0_valid),                                                                      //          .valid
		.sink10_channel       (rsp_demux_019_src0_channel),                                                                    //          .channel
		.sink10_data          (rsp_demux_019_src0_data),                                                                       //          .data
		.sink10_startofpacket (rsp_demux_019_src0_startofpacket),                                                              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_019_src0_endofpacket),                                                                //          .endofpacket
		.sink11_ready         (rsp_demux_020_src0_ready),                                                                      //    sink11.ready
		.sink11_valid         (rsp_demux_020_src0_valid),                                                                      //          .valid
		.sink11_channel       (rsp_demux_020_src0_channel),                                                                    //          .channel
		.sink11_data          (rsp_demux_020_src0_data),                                                                       //          .data
		.sink11_startofpacket (rsp_demux_020_src0_startofpacket),                                                              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_020_src0_endofpacket),                                                                //          .endofpacket
		.sink12_ready         (rsp_demux_021_src0_ready),                                                                      //    sink12.ready
		.sink12_valid         (rsp_demux_021_src0_valid),                                                                      //          .valid
		.sink12_channel       (rsp_demux_021_src0_channel),                                                                    //          .channel
		.sink12_data          (rsp_demux_021_src0_data),                                                                       //          .data
		.sink12_startofpacket (rsp_demux_021_src0_startofpacket),                                                              //          .startofpacket
		.sink12_endofpacket   (rsp_demux_021_src0_endofpacket),                                                                //          .endofpacket
		.sink13_ready         (rsp_demux_022_src0_ready),                                                                      //    sink13.ready
		.sink13_valid         (rsp_demux_022_src0_valid),                                                                      //          .valid
		.sink13_channel       (rsp_demux_022_src0_channel),                                                                    //          .channel
		.sink13_data          (rsp_demux_022_src0_data),                                                                       //          .data
		.sink13_startofpacket (rsp_demux_022_src0_startofpacket),                                                              //          .startofpacket
		.sink13_endofpacket   (rsp_demux_022_src0_endofpacket),                                                                //          .endofpacket
		.sink14_ready         (rsp_demux_023_src0_ready),                                                                      //    sink14.ready
		.sink14_valid         (rsp_demux_023_src0_valid),                                                                      //          .valid
		.sink14_channel       (rsp_demux_023_src0_channel),                                                                    //          .channel
		.sink14_data          (rsp_demux_023_src0_data),                                                                       //          .data
		.sink14_startofpacket (rsp_demux_023_src0_startofpacket),                                                              //          .startofpacket
		.sink14_endofpacket   (rsp_demux_023_src0_endofpacket),                                                                //          .endofpacket
		.sink15_ready         (rsp_demux_024_src0_ready),                                                                      //    sink15.ready
		.sink15_valid         (rsp_demux_024_src0_valid),                                                                      //          .valid
		.sink15_channel       (rsp_demux_024_src0_channel),                                                                    //          .channel
		.sink15_data          (rsp_demux_024_src0_data),                                                                       //          .data
		.sink15_startofpacket (rsp_demux_024_src0_startofpacket),                                                              //          .startofpacket
		.sink15_endofpacket   (rsp_demux_024_src0_endofpacket),                                                                //          .endofpacket
		.sink16_ready         (rsp_demux_025_src0_ready),                                                                      //    sink16.ready
		.sink16_valid         (rsp_demux_025_src0_valid),                                                                      //          .valid
		.sink16_channel       (rsp_demux_025_src0_channel),                                                                    //          .channel
		.sink16_data          (rsp_demux_025_src0_data),                                                                       //          .data
		.sink16_startofpacket (rsp_demux_025_src0_startofpacket),                                                              //          .startofpacket
		.sink16_endofpacket   (rsp_demux_025_src0_endofpacket),                                                                //          .endofpacket
		.sink17_ready         (rsp_demux_026_src0_ready),                                                                      //    sink17.ready
		.sink17_valid         (rsp_demux_026_src0_valid),                                                                      //          .valid
		.sink17_channel       (rsp_demux_026_src0_channel),                                                                    //          .channel
		.sink17_data          (rsp_demux_026_src0_data),                                                                       //          .data
		.sink17_startofpacket (rsp_demux_026_src0_startofpacket),                                                              //          .startofpacket
		.sink17_endofpacket   (rsp_demux_026_src0_endofpacket),                                                                //          .endofpacket
		.sink18_ready         (rsp_demux_027_src0_ready),                                                                      //    sink18.ready
		.sink18_valid         (rsp_demux_027_src0_valid),                                                                      //          .valid
		.sink18_channel       (rsp_demux_027_src0_channel),                                                                    //          .channel
		.sink18_data          (rsp_demux_027_src0_data),                                                                       //          .data
		.sink18_startofpacket (rsp_demux_027_src0_startofpacket),                                                              //          .startofpacket
		.sink18_endofpacket   (rsp_demux_027_src0_endofpacket),                                                                //          .endofpacket
		.sink19_ready         (rsp_demux_028_src0_ready),                                                                      //    sink19.ready
		.sink19_valid         (rsp_demux_028_src0_valid),                                                                      //          .valid
		.sink19_channel       (rsp_demux_028_src0_channel),                                                                    //          .channel
		.sink19_data          (rsp_demux_028_src0_data),                                                                       //          .data
		.sink19_startofpacket (rsp_demux_028_src0_startofpacket),                                                              //          .startofpacket
		.sink19_endofpacket   (rsp_demux_028_src0_endofpacket),                                                                //          .endofpacket
		.sink20_ready         (rsp_demux_029_src0_ready),                                                                      //    sink20.ready
		.sink20_valid         (rsp_demux_029_src0_valid),                                                                      //          .valid
		.sink20_channel       (rsp_demux_029_src0_channel),                                                                    //          .channel
		.sink20_data          (rsp_demux_029_src0_data),                                                                       //          .data
		.sink20_startofpacket (rsp_demux_029_src0_startofpacket),                                                              //          .startofpacket
		.sink20_endofpacket   (rsp_demux_029_src0_endofpacket),                                                                //          .endofpacket
		.sink21_ready         (rsp_demux_030_src0_ready),                                                                      //    sink21.ready
		.sink21_valid         (rsp_demux_030_src0_valid),                                                                      //          .valid
		.sink21_channel       (rsp_demux_030_src0_channel),                                                                    //          .channel
		.sink21_data          (rsp_demux_030_src0_data),                                                                       //          .data
		.sink21_startofpacket (rsp_demux_030_src0_startofpacket),                                                              //          .startofpacket
		.sink21_endofpacket   (rsp_demux_030_src0_endofpacket),                                                                //          .endofpacket
		.sink22_ready         (rsp_demux_031_src0_ready),                                                                      //    sink22.ready
		.sink22_valid         (rsp_demux_031_src0_valid),                                                                      //          .valid
		.sink22_channel       (rsp_demux_031_src0_channel),                                                                    //          .channel
		.sink22_data          (rsp_demux_031_src0_data),                                                                       //          .data
		.sink22_startofpacket (rsp_demux_031_src0_startofpacket),                                                              //          .startofpacket
		.sink22_endofpacket   (rsp_demux_031_src0_endofpacket),                                                                //          .endofpacket
		.sink23_ready         (rsp_demux_032_src0_ready),                                                                      //    sink23.ready
		.sink23_valid         (rsp_demux_032_src0_valid),                                                                      //          .valid
		.sink23_channel       (rsp_demux_032_src0_channel),                                                                    //          .channel
		.sink23_data          (rsp_demux_032_src0_data),                                                                       //          .data
		.sink23_startofpacket (rsp_demux_032_src0_startofpacket),                                                              //          .startofpacket
		.sink23_endofpacket   (rsp_demux_032_src0_endofpacket),                                                                //          .endofpacket
		.sink24_ready         (rsp_demux_033_src0_ready),                                                                      //    sink24.ready
		.sink24_valid         (rsp_demux_033_src0_valid),                                                                      //          .valid
		.sink24_channel       (rsp_demux_033_src0_channel),                                                                    //          .channel
		.sink24_data          (rsp_demux_033_src0_data),                                                                       //          .data
		.sink24_startofpacket (rsp_demux_033_src0_startofpacket),                                                              //          .startofpacket
		.sink24_endofpacket   (rsp_demux_033_src0_endofpacket),                                                                //          .endofpacket
		.sink25_ready         (rsp_demux_034_src0_ready),                                                                      //    sink25.ready
		.sink25_valid         (rsp_demux_034_src0_valid),                                                                      //          .valid
		.sink25_channel       (rsp_demux_034_src0_channel),                                                                    //          .channel
		.sink25_data          (rsp_demux_034_src0_data),                                                                       //          .data
		.sink25_startofpacket (rsp_demux_034_src0_startofpacket),                                                              //          .startofpacket
		.sink25_endofpacket   (rsp_demux_034_src0_endofpacket),                                                                //          .endofpacket
		.sink26_ready         (rsp_demux_035_src0_ready),                                                                      //    sink26.ready
		.sink26_valid         (rsp_demux_035_src0_valid),                                                                      //          .valid
		.sink26_channel       (rsp_demux_035_src0_channel),                                                                    //          .channel
		.sink26_data          (rsp_demux_035_src0_data),                                                                       //          .data
		.sink26_startofpacket (rsp_demux_035_src0_startofpacket),                                                              //          .startofpacket
		.sink26_endofpacket   (rsp_demux_035_src0_endofpacket),                                                                //          .endofpacket
		.sink27_ready         (rsp_demux_036_src0_ready),                                                                      //    sink27.ready
		.sink27_valid         (rsp_demux_036_src0_valid),                                                                      //          .valid
		.sink27_channel       (rsp_demux_036_src0_channel),                                                                    //          .channel
		.sink27_data          (rsp_demux_036_src0_data),                                                                       //          .data
		.sink27_startofpacket (rsp_demux_036_src0_startofpacket),                                                              //          .startofpacket
		.sink27_endofpacket   (rsp_demux_036_src0_endofpacket),                                                                //          .endofpacket
		.sink28_ready         (rsp_demux_037_src0_ready),                                                                      //    sink28.ready
		.sink28_valid         (rsp_demux_037_src0_valid),                                                                      //          .valid
		.sink28_channel       (rsp_demux_037_src0_channel),                                                                    //          .channel
		.sink28_data          (rsp_demux_037_src0_data),                                                                       //          .data
		.sink28_startofpacket (rsp_demux_037_src0_startofpacket),                                                              //          .startofpacket
		.sink28_endofpacket   (rsp_demux_037_src0_endofpacket),                                                                //          .endofpacket
		.sink29_ready         (rsp_demux_038_src0_ready),                                                                      //    sink29.ready
		.sink29_valid         (rsp_demux_038_src0_valid),                                                                      //          .valid
		.sink29_channel       (rsp_demux_038_src0_channel),                                                                    //          .channel
		.sink29_data          (rsp_demux_038_src0_data),                                                                       //          .data
		.sink29_startofpacket (rsp_demux_038_src0_startofpacket),                                                              //          .startofpacket
		.sink29_endofpacket   (rsp_demux_038_src0_endofpacket),                                                                //          .endofpacket
		.sink30_ready         (rsp_demux_039_src0_ready),                                                                      //    sink30.ready
		.sink30_valid         (rsp_demux_039_src0_valid),                                                                      //          .valid
		.sink30_channel       (rsp_demux_039_src0_channel),                                                                    //          .channel
		.sink30_data          (rsp_demux_039_src0_data),                                                                       //          .data
		.sink30_startofpacket (rsp_demux_039_src0_startofpacket),                                                              //          .startofpacket
		.sink30_endofpacket   (rsp_demux_039_src0_endofpacket),                                                                //          .endofpacket
		.sink31_ready         (rsp_demux_040_src0_ready),                                                                      //    sink31.ready
		.sink31_valid         (rsp_demux_040_src0_valid),                                                                      //          .valid
		.sink31_channel       (rsp_demux_040_src0_channel),                                                                    //          .channel
		.sink31_data          (rsp_demux_040_src0_data),                                                                       //          .data
		.sink31_startofpacket (rsp_demux_040_src0_startofpacket),                                                              //          .startofpacket
		.sink31_endofpacket   (rsp_demux_040_src0_endofpacket),                                                                //          .endofpacket
		.sink32_ready         (rsp_demux_041_src0_ready),                                                                      //    sink32.ready
		.sink32_valid         (rsp_demux_041_src0_valid),                                                                      //          .valid
		.sink32_channel       (rsp_demux_041_src0_channel),                                                                    //          .channel
		.sink32_data          (rsp_demux_041_src0_data),                                                                       //          .data
		.sink32_startofpacket (rsp_demux_041_src0_startofpacket),                                                              //          .startofpacket
		.sink32_endofpacket   (rsp_demux_041_src0_endofpacket),                                                                //          .endofpacket
		.sink33_ready         (rsp_demux_042_src0_ready),                                                                      //    sink33.ready
		.sink33_valid         (rsp_demux_042_src0_valid),                                                                      //          .valid
		.sink33_channel       (rsp_demux_042_src0_channel),                                                                    //          .channel
		.sink33_data          (rsp_demux_042_src0_data),                                                                       //          .data
		.sink33_startofpacket (rsp_demux_042_src0_startofpacket),                                                              //          .startofpacket
		.sink33_endofpacket   (rsp_demux_042_src0_endofpacket),                                                                //          .endofpacket
		.sink34_ready         (rsp_demux_043_src0_ready),                                                                      //    sink34.ready
		.sink34_valid         (rsp_demux_043_src0_valid),                                                                      //          .valid
		.sink34_channel       (rsp_demux_043_src0_channel),                                                                    //          .channel
		.sink34_data          (rsp_demux_043_src0_data),                                                                       //          .data
		.sink34_startofpacket (rsp_demux_043_src0_startofpacket),                                                              //          .startofpacket
		.sink34_endofpacket   (rsp_demux_043_src0_endofpacket),                                                                //          .endofpacket
		.sink35_ready         (rsp_demux_044_src0_ready),                                                                      //    sink35.ready
		.sink35_valid         (rsp_demux_044_src0_valid),                                                                      //          .valid
		.sink35_channel       (rsp_demux_044_src0_channel),                                                                    //          .channel
		.sink35_data          (rsp_demux_044_src0_data),                                                                       //          .data
		.sink35_startofpacket (rsp_demux_044_src0_startofpacket),                                                              //          .startofpacket
		.sink35_endofpacket   (rsp_demux_044_src0_endofpacket)                                                                 //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_007 rsp_mux_008 (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready            (rsp_mux_008_src_ready),                                                                         //       src.ready
		.src_valid            (rsp_mux_008_src_valid),                                                                         //          .valid
		.src_data             (rsp_mux_008_src_data),                                                                          //          .data
		.src_channel          (rsp_mux_008_src_channel),                                                                       //          .channel
		.src_startofpacket    (rsp_mux_008_src_startofpacket),                                                                 //          .startofpacket
		.src_endofpacket      (rsp_mux_008_src_endofpacket),                                                                   //          .endofpacket
		.sink0_ready          (rsp_demux_009_src2_ready),                                                                      //     sink0.ready
		.sink0_valid          (rsp_demux_009_src2_valid),                                                                      //          .valid
		.sink0_channel        (rsp_demux_009_src2_channel),                                                                    //          .channel
		.sink0_data           (rsp_demux_009_src2_data),                                                                       //          .data
		.sink0_startofpacket  (rsp_demux_009_src2_startofpacket),                                                              //          .startofpacket
		.sink0_endofpacket    (rsp_demux_009_src2_endofpacket),                                                                //          .endofpacket
		.sink1_ready          (rsp_demux_010_src1_ready),                                                                      //     sink1.ready
		.sink1_valid          (rsp_demux_010_src1_valid),                                                                      //          .valid
		.sink1_channel        (rsp_demux_010_src1_channel),                                                                    //          .channel
		.sink1_data           (rsp_demux_010_src1_data),                                                                       //          .data
		.sink1_startofpacket  (rsp_demux_010_src1_startofpacket),                                                              //          .startofpacket
		.sink1_endofpacket    (rsp_demux_010_src1_endofpacket),                                                                //          .endofpacket
		.sink2_ready          (rsp_demux_011_src1_ready),                                                                      //     sink2.ready
		.sink2_valid          (rsp_demux_011_src1_valid),                                                                      //          .valid
		.sink2_channel        (rsp_demux_011_src1_channel),                                                                    //          .channel
		.sink2_data           (rsp_demux_011_src1_data),                                                                       //          .data
		.sink2_startofpacket  (rsp_demux_011_src1_startofpacket),                                                              //          .startofpacket
		.sink2_endofpacket    (rsp_demux_011_src1_endofpacket),                                                                //          .endofpacket
		.sink3_ready          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),           //     sink3.ready
		.sink3_valid          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),           //          .valid
		.sink3_channel        (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),         //          .channel
		.sink3_data           (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),            //          .data
		.sink3_startofpacket  (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink3_endofpacket    (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink4_ready          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink4_channel        (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink4_data           (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink4_startofpacket  (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket    (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink5_ready          (crosser_004_out_ready),                                                                         //     sink5.ready
		.sink5_valid          (crosser_004_out_valid),                                                                         //          .valid
		.sink5_channel        (crosser_004_out_channel),                                                                       //          .channel
		.sink5_data           (crosser_004_out_data),                                                                          //          .data
		.sink5_startofpacket  (crosser_004_out_startofpacket),                                                                 //          .startofpacket
		.sink5_endofpacket    (crosser_004_out_endofpacket),                                                                   //          .endofpacket
		.sink6_ready          (rsp_demux_015_src1_ready),                                                                      //     sink6.ready
		.sink6_valid          (rsp_demux_015_src1_valid),                                                                      //          .valid
		.sink6_channel        (rsp_demux_015_src1_channel),                                                                    //          .channel
		.sink6_data           (rsp_demux_015_src1_data),                                                                       //          .data
		.sink6_startofpacket  (rsp_demux_015_src1_startofpacket),                                                              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_015_src1_endofpacket),                                                                //          .endofpacket
		.sink7_ready          (rsp_demux_016_src1_ready),                                                                      //     sink7.ready
		.sink7_valid          (rsp_demux_016_src1_valid),                                                                      //          .valid
		.sink7_channel        (rsp_demux_016_src1_channel),                                                                    //          .channel
		.sink7_data           (rsp_demux_016_src1_data),                                                                       //          .data
		.sink7_startofpacket  (rsp_demux_016_src1_startofpacket),                                                              //          .startofpacket
		.sink7_endofpacket    (rsp_demux_016_src1_endofpacket),                                                                //          .endofpacket
		.sink8_ready          (rsp_demux_017_src1_ready),                                                                      //     sink8.ready
		.sink8_valid          (rsp_demux_017_src1_valid),                                                                      //          .valid
		.sink8_channel        (rsp_demux_017_src1_channel),                                                                    //          .channel
		.sink8_data           (rsp_demux_017_src1_data),                                                                       //          .data
		.sink8_startofpacket  (rsp_demux_017_src1_startofpacket),                                                              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_017_src1_endofpacket),                                                                //          .endofpacket
		.sink9_ready          (rsp_demux_018_src1_ready),                                                                      //     sink9.ready
		.sink9_valid          (rsp_demux_018_src1_valid),                                                                      //          .valid
		.sink9_channel        (rsp_demux_018_src1_channel),                                                                    //          .channel
		.sink9_data           (rsp_demux_018_src1_data),                                                                       //          .data
		.sink9_startofpacket  (rsp_demux_018_src1_startofpacket),                                                              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_018_src1_endofpacket),                                                                //          .endofpacket
		.sink10_ready         (rsp_demux_019_src1_ready),                                                                      //    sink10.ready
		.sink10_valid         (rsp_demux_019_src1_valid),                                                                      //          .valid
		.sink10_channel       (rsp_demux_019_src1_channel),                                                                    //          .channel
		.sink10_data          (rsp_demux_019_src1_data),                                                                       //          .data
		.sink10_startofpacket (rsp_demux_019_src1_startofpacket),                                                              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_019_src1_endofpacket),                                                                //          .endofpacket
		.sink11_ready         (rsp_demux_020_src1_ready),                                                                      //    sink11.ready
		.sink11_valid         (rsp_demux_020_src1_valid),                                                                      //          .valid
		.sink11_channel       (rsp_demux_020_src1_channel),                                                                    //          .channel
		.sink11_data          (rsp_demux_020_src1_data),                                                                       //          .data
		.sink11_startofpacket (rsp_demux_020_src1_startofpacket),                                                              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_020_src1_endofpacket),                                                                //          .endofpacket
		.sink12_ready         (rsp_demux_021_src1_ready),                                                                      //    sink12.ready
		.sink12_valid         (rsp_demux_021_src1_valid),                                                                      //          .valid
		.sink12_channel       (rsp_demux_021_src1_channel),                                                                    //          .channel
		.sink12_data          (rsp_demux_021_src1_data),                                                                       //          .data
		.sink12_startofpacket (rsp_demux_021_src1_startofpacket),                                                              //          .startofpacket
		.sink12_endofpacket   (rsp_demux_021_src1_endofpacket),                                                                //          .endofpacket
		.sink13_ready         (rsp_demux_022_src1_ready),                                                                      //    sink13.ready
		.sink13_valid         (rsp_demux_022_src1_valid),                                                                      //          .valid
		.sink13_channel       (rsp_demux_022_src1_channel),                                                                    //          .channel
		.sink13_data          (rsp_demux_022_src1_data),                                                                       //          .data
		.sink13_startofpacket (rsp_demux_022_src1_startofpacket),                                                              //          .startofpacket
		.sink13_endofpacket   (rsp_demux_022_src1_endofpacket),                                                                //          .endofpacket
		.sink14_ready         (rsp_demux_023_src1_ready),                                                                      //    sink14.ready
		.sink14_valid         (rsp_demux_023_src1_valid),                                                                      //          .valid
		.sink14_channel       (rsp_demux_023_src1_channel),                                                                    //          .channel
		.sink14_data          (rsp_demux_023_src1_data),                                                                       //          .data
		.sink14_startofpacket (rsp_demux_023_src1_startofpacket),                                                              //          .startofpacket
		.sink14_endofpacket   (rsp_demux_023_src1_endofpacket),                                                                //          .endofpacket
		.sink15_ready         (rsp_demux_024_src1_ready),                                                                      //    sink15.ready
		.sink15_valid         (rsp_demux_024_src1_valid),                                                                      //          .valid
		.sink15_channel       (rsp_demux_024_src1_channel),                                                                    //          .channel
		.sink15_data          (rsp_demux_024_src1_data),                                                                       //          .data
		.sink15_startofpacket (rsp_demux_024_src1_startofpacket),                                                              //          .startofpacket
		.sink15_endofpacket   (rsp_demux_024_src1_endofpacket),                                                                //          .endofpacket
		.sink16_ready         (rsp_demux_025_src1_ready),                                                                      //    sink16.ready
		.sink16_valid         (rsp_demux_025_src1_valid),                                                                      //          .valid
		.sink16_channel       (rsp_demux_025_src1_channel),                                                                    //          .channel
		.sink16_data          (rsp_demux_025_src1_data),                                                                       //          .data
		.sink16_startofpacket (rsp_demux_025_src1_startofpacket),                                                              //          .startofpacket
		.sink16_endofpacket   (rsp_demux_025_src1_endofpacket),                                                                //          .endofpacket
		.sink17_ready         (rsp_demux_026_src1_ready),                                                                      //    sink17.ready
		.sink17_valid         (rsp_demux_026_src1_valid),                                                                      //          .valid
		.sink17_channel       (rsp_demux_026_src1_channel),                                                                    //          .channel
		.sink17_data          (rsp_demux_026_src1_data),                                                                       //          .data
		.sink17_startofpacket (rsp_demux_026_src1_startofpacket),                                                              //          .startofpacket
		.sink17_endofpacket   (rsp_demux_026_src1_endofpacket),                                                                //          .endofpacket
		.sink18_ready         (rsp_demux_027_src1_ready),                                                                      //    sink18.ready
		.sink18_valid         (rsp_demux_027_src1_valid),                                                                      //          .valid
		.sink18_channel       (rsp_demux_027_src1_channel),                                                                    //          .channel
		.sink18_data          (rsp_demux_027_src1_data),                                                                       //          .data
		.sink18_startofpacket (rsp_demux_027_src1_startofpacket),                                                              //          .startofpacket
		.sink18_endofpacket   (rsp_demux_027_src1_endofpacket),                                                                //          .endofpacket
		.sink19_ready         (rsp_demux_028_src1_ready),                                                                      //    sink19.ready
		.sink19_valid         (rsp_demux_028_src1_valid),                                                                      //          .valid
		.sink19_channel       (rsp_demux_028_src1_channel),                                                                    //          .channel
		.sink19_data          (rsp_demux_028_src1_data),                                                                       //          .data
		.sink19_startofpacket (rsp_demux_028_src1_startofpacket),                                                              //          .startofpacket
		.sink19_endofpacket   (rsp_demux_028_src1_endofpacket),                                                                //          .endofpacket
		.sink20_ready         (rsp_demux_029_src1_ready),                                                                      //    sink20.ready
		.sink20_valid         (rsp_demux_029_src1_valid),                                                                      //          .valid
		.sink20_channel       (rsp_demux_029_src1_channel),                                                                    //          .channel
		.sink20_data          (rsp_demux_029_src1_data),                                                                       //          .data
		.sink20_startofpacket (rsp_demux_029_src1_startofpacket),                                                              //          .startofpacket
		.sink20_endofpacket   (rsp_demux_029_src1_endofpacket),                                                                //          .endofpacket
		.sink21_ready         (rsp_demux_030_src1_ready),                                                                      //    sink21.ready
		.sink21_valid         (rsp_demux_030_src1_valid),                                                                      //          .valid
		.sink21_channel       (rsp_demux_030_src1_channel),                                                                    //          .channel
		.sink21_data          (rsp_demux_030_src1_data),                                                                       //          .data
		.sink21_startofpacket (rsp_demux_030_src1_startofpacket),                                                              //          .startofpacket
		.sink21_endofpacket   (rsp_demux_030_src1_endofpacket),                                                                //          .endofpacket
		.sink22_ready         (rsp_demux_031_src1_ready),                                                                      //    sink22.ready
		.sink22_valid         (rsp_demux_031_src1_valid),                                                                      //          .valid
		.sink22_channel       (rsp_demux_031_src1_channel),                                                                    //          .channel
		.sink22_data          (rsp_demux_031_src1_data),                                                                       //          .data
		.sink22_startofpacket (rsp_demux_031_src1_startofpacket),                                                              //          .startofpacket
		.sink22_endofpacket   (rsp_demux_031_src1_endofpacket),                                                                //          .endofpacket
		.sink23_ready         (rsp_demux_032_src1_ready),                                                                      //    sink23.ready
		.sink23_valid         (rsp_demux_032_src1_valid),                                                                      //          .valid
		.sink23_channel       (rsp_demux_032_src1_channel),                                                                    //          .channel
		.sink23_data          (rsp_demux_032_src1_data),                                                                       //          .data
		.sink23_startofpacket (rsp_demux_032_src1_startofpacket),                                                              //          .startofpacket
		.sink23_endofpacket   (rsp_demux_032_src1_endofpacket),                                                                //          .endofpacket
		.sink24_ready         (rsp_demux_033_src1_ready),                                                                      //    sink24.ready
		.sink24_valid         (rsp_demux_033_src1_valid),                                                                      //          .valid
		.sink24_channel       (rsp_demux_033_src1_channel),                                                                    //          .channel
		.sink24_data          (rsp_demux_033_src1_data),                                                                       //          .data
		.sink24_startofpacket (rsp_demux_033_src1_startofpacket),                                                              //          .startofpacket
		.sink24_endofpacket   (rsp_demux_033_src1_endofpacket),                                                                //          .endofpacket
		.sink25_ready         (rsp_demux_034_src1_ready),                                                                      //    sink25.ready
		.sink25_valid         (rsp_demux_034_src1_valid),                                                                      //          .valid
		.sink25_channel       (rsp_demux_034_src1_channel),                                                                    //          .channel
		.sink25_data          (rsp_demux_034_src1_data),                                                                       //          .data
		.sink25_startofpacket (rsp_demux_034_src1_startofpacket),                                                              //          .startofpacket
		.sink25_endofpacket   (rsp_demux_034_src1_endofpacket),                                                                //          .endofpacket
		.sink26_ready         (rsp_demux_035_src1_ready),                                                                      //    sink26.ready
		.sink26_valid         (rsp_demux_035_src1_valid),                                                                      //          .valid
		.sink26_channel       (rsp_demux_035_src1_channel),                                                                    //          .channel
		.sink26_data          (rsp_demux_035_src1_data),                                                                       //          .data
		.sink26_startofpacket (rsp_demux_035_src1_startofpacket),                                                              //          .startofpacket
		.sink26_endofpacket   (rsp_demux_035_src1_endofpacket),                                                                //          .endofpacket
		.sink27_ready         (rsp_demux_036_src1_ready),                                                                      //    sink27.ready
		.sink27_valid         (rsp_demux_036_src1_valid),                                                                      //          .valid
		.sink27_channel       (rsp_demux_036_src1_channel),                                                                    //          .channel
		.sink27_data          (rsp_demux_036_src1_data),                                                                       //          .data
		.sink27_startofpacket (rsp_demux_036_src1_startofpacket),                                                              //          .startofpacket
		.sink27_endofpacket   (rsp_demux_036_src1_endofpacket),                                                                //          .endofpacket
		.sink28_ready         (rsp_demux_037_src1_ready),                                                                      //    sink28.ready
		.sink28_valid         (rsp_demux_037_src1_valid),                                                                      //          .valid
		.sink28_channel       (rsp_demux_037_src1_channel),                                                                    //          .channel
		.sink28_data          (rsp_demux_037_src1_data),                                                                       //          .data
		.sink28_startofpacket (rsp_demux_037_src1_startofpacket),                                                              //          .startofpacket
		.sink28_endofpacket   (rsp_demux_037_src1_endofpacket),                                                                //          .endofpacket
		.sink29_ready         (rsp_demux_038_src1_ready),                                                                      //    sink29.ready
		.sink29_valid         (rsp_demux_038_src1_valid),                                                                      //          .valid
		.sink29_channel       (rsp_demux_038_src1_channel),                                                                    //          .channel
		.sink29_data          (rsp_demux_038_src1_data),                                                                       //          .data
		.sink29_startofpacket (rsp_demux_038_src1_startofpacket),                                                              //          .startofpacket
		.sink29_endofpacket   (rsp_demux_038_src1_endofpacket),                                                                //          .endofpacket
		.sink30_ready         (rsp_demux_039_src1_ready),                                                                      //    sink30.ready
		.sink30_valid         (rsp_demux_039_src1_valid),                                                                      //          .valid
		.sink30_channel       (rsp_demux_039_src1_channel),                                                                    //          .channel
		.sink30_data          (rsp_demux_039_src1_data),                                                                       //          .data
		.sink30_startofpacket (rsp_demux_039_src1_startofpacket),                                                              //          .startofpacket
		.sink30_endofpacket   (rsp_demux_039_src1_endofpacket),                                                                //          .endofpacket
		.sink31_ready         (rsp_demux_040_src1_ready),                                                                      //    sink31.ready
		.sink31_valid         (rsp_demux_040_src1_valid),                                                                      //          .valid
		.sink31_channel       (rsp_demux_040_src1_channel),                                                                    //          .channel
		.sink31_data          (rsp_demux_040_src1_data),                                                                       //          .data
		.sink31_startofpacket (rsp_demux_040_src1_startofpacket),                                                              //          .startofpacket
		.sink31_endofpacket   (rsp_demux_040_src1_endofpacket),                                                                //          .endofpacket
		.sink32_ready         (rsp_demux_041_src1_ready),                                                                      //    sink32.ready
		.sink32_valid         (rsp_demux_041_src1_valid),                                                                      //          .valid
		.sink32_channel       (rsp_demux_041_src1_channel),                                                                    //          .channel
		.sink32_data          (rsp_demux_041_src1_data),                                                                       //          .data
		.sink32_startofpacket (rsp_demux_041_src1_startofpacket),                                                              //          .startofpacket
		.sink32_endofpacket   (rsp_demux_041_src1_endofpacket),                                                                //          .endofpacket
		.sink33_ready         (rsp_demux_042_src1_ready),                                                                      //    sink33.ready
		.sink33_valid         (rsp_demux_042_src1_valid),                                                                      //          .valid
		.sink33_channel       (rsp_demux_042_src1_channel),                                                                    //          .channel
		.sink33_data          (rsp_demux_042_src1_data),                                                                       //          .data
		.sink33_startofpacket (rsp_demux_042_src1_startofpacket),                                                              //          .startofpacket
		.sink33_endofpacket   (rsp_demux_042_src1_endofpacket),                                                                //          .endofpacket
		.sink34_ready         (rsp_demux_043_src1_ready),                                                                      //    sink34.ready
		.sink34_valid         (rsp_demux_043_src1_valid),                                                                      //          .valid
		.sink34_channel       (rsp_demux_043_src1_channel),                                                                    //          .channel
		.sink34_data          (rsp_demux_043_src1_data),                                                                       //          .data
		.sink34_startofpacket (rsp_demux_043_src1_startofpacket),                                                              //          .startofpacket
		.sink34_endofpacket   (rsp_demux_043_src1_endofpacket),                                                                //          .endofpacket
		.sink35_ready         (rsp_demux_044_src1_ready),                                                                      //    sink35.ready
		.sink35_valid         (rsp_demux_044_src1_valid),                                                                      //          .valid
		.sink35_channel       (rsp_demux_044_src1_channel),                                                                    //          .channel
		.sink35_data          (rsp_demux_044_src1_data),                                                                       //          .data
		.sink35_startofpacket (rsp_demux_044_src1_startofpacket),                                                              //          .startofpacket
		.sink35_endofpacket   (rsp_demux_044_src1_endofpacket)                                                                 //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_009 rsp_mux_009 (
		.clk                  (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.src_ready            (rsp_mux_009_src_ready),                                                                    //       src.ready
		.src_valid            (rsp_mux_009_src_valid),                                                                    //          .valid
		.src_data             (rsp_mux_009_src_data),                                                                     //          .data
		.src_channel          (rsp_mux_009_src_channel),                                                                  //          .channel
		.src_startofpacket    (rsp_mux_009_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_009_src_endofpacket),                                                              //          .endofpacket
		.sink0_ready          (rsp_demux_009_src3_ready),                                                                 //     sink0.ready
		.sink0_valid          (rsp_demux_009_src3_valid),                                                                 //          .valid
		.sink0_channel        (rsp_demux_009_src3_channel),                                                               //          .channel
		.sink0_data           (rsp_demux_009_src3_data),                                                                  //          .data
		.sink0_startofpacket  (rsp_demux_009_src3_startofpacket),                                                         //          .startofpacket
		.sink0_endofpacket    (rsp_demux_009_src3_endofpacket),                                                           //          .endofpacket
		.sink1_ready          (rsp_demux_010_src2_ready),                                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_010_src2_valid),                                                                 //          .valid
		.sink1_channel        (rsp_demux_010_src2_channel),                                                               //          .channel
		.sink1_data           (rsp_demux_010_src2_data),                                                                  //          .data
		.sink1_startofpacket  (rsp_demux_010_src2_startofpacket),                                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_010_src2_endofpacket),                                                           //          .endofpacket
		.sink2_ready          (rsp_demux_011_src2_ready),                                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_011_src2_valid),                                                                 //          .valid
		.sink2_channel        (rsp_demux_011_src2_channel),                                                               //          .channel
		.sink2_data           (rsp_demux_011_src2_data),                                                                  //          .data
		.sink2_startofpacket  (rsp_demux_011_src2_startofpacket),                                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_011_src2_endofpacket),                                                           //          .endofpacket
		.sink3_ready          (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready),           //     sink3.ready
		.sink3_valid          (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid),           //          .valid
		.sink3_channel        (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel),         //          .channel
		.sink3_data           (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data),            //          .data
		.sink3_startofpacket  (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink3_endofpacket    (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink4_ready          (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid          (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid),         //          .valid
		.sink4_channel        (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel),       //          .channel
		.sink4_data           (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data),          //          .data
		.sink4_startofpacket  (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket    (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink5_ready          (crosser_005_out_ready),                                                                    //     sink5.ready
		.sink5_valid          (crosser_005_out_valid),                                                                    //          .valid
		.sink5_channel        (crosser_005_out_channel),                                                                  //          .channel
		.sink5_data           (crosser_005_out_data),                                                                     //          .data
		.sink5_startofpacket  (crosser_005_out_startofpacket),                                                            //          .startofpacket
		.sink5_endofpacket    (crosser_005_out_endofpacket),                                                              //          .endofpacket
		.sink6_ready          (rsp_demux_015_src2_ready),                                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_015_src2_valid),                                                                 //          .valid
		.sink6_channel        (rsp_demux_015_src2_channel),                                                               //          .channel
		.sink6_data           (rsp_demux_015_src2_data),                                                                  //          .data
		.sink6_startofpacket  (rsp_demux_015_src2_startofpacket),                                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_015_src2_endofpacket),                                                           //          .endofpacket
		.sink7_ready          (rsp_demux_016_src2_ready),                                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_016_src2_valid),                                                                 //          .valid
		.sink7_channel        (rsp_demux_016_src2_channel),                                                               //          .channel
		.sink7_data           (rsp_demux_016_src2_data),                                                                  //          .data
		.sink7_startofpacket  (rsp_demux_016_src2_startofpacket),                                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_016_src2_endofpacket),                                                           //          .endofpacket
		.sink8_ready          (rsp_demux_017_src2_ready),                                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_017_src2_valid),                                                                 //          .valid
		.sink8_channel        (rsp_demux_017_src2_channel),                                                               //          .channel
		.sink8_data           (rsp_demux_017_src2_data),                                                                  //          .data
		.sink8_startofpacket  (rsp_demux_017_src2_startofpacket),                                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_017_src2_endofpacket),                                                           //          .endofpacket
		.sink9_ready          (rsp_demux_018_src2_ready),                                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_018_src2_valid),                                                                 //          .valid
		.sink9_channel        (rsp_demux_018_src2_channel),                                                               //          .channel
		.sink9_data           (rsp_demux_018_src2_data),                                                                  //          .data
		.sink9_startofpacket  (rsp_demux_018_src2_startofpacket),                                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_018_src2_endofpacket),                                                           //          .endofpacket
		.sink10_ready         (rsp_demux_019_src2_ready),                                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_019_src2_valid),                                                                 //          .valid
		.sink10_channel       (rsp_demux_019_src2_channel),                                                               //          .channel
		.sink10_data          (rsp_demux_019_src2_data),                                                                  //          .data
		.sink10_startofpacket (rsp_demux_019_src2_startofpacket),                                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_019_src2_endofpacket),                                                           //          .endofpacket
		.sink11_ready         (rsp_demux_020_src2_ready),                                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_020_src2_valid),                                                                 //          .valid
		.sink11_channel       (rsp_demux_020_src2_channel),                                                               //          .channel
		.sink11_data          (rsp_demux_020_src2_data),                                                                  //          .data
		.sink11_startofpacket (rsp_demux_020_src2_startofpacket),                                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_020_src2_endofpacket),                                                           //          .endofpacket
		.sink12_ready         (rsp_demux_021_src2_ready),                                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_021_src2_valid),                                                                 //          .valid
		.sink12_channel       (rsp_demux_021_src2_channel),                                                               //          .channel
		.sink12_data          (rsp_demux_021_src2_data),                                                                  //          .data
		.sink12_startofpacket (rsp_demux_021_src2_startofpacket),                                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_021_src2_endofpacket),                                                           //          .endofpacket
		.sink13_ready         (rsp_demux_022_src2_ready),                                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_022_src2_valid),                                                                 //          .valid
		.sink13_channel       (rsp_demux_022_src2_channel),                                                               //          .channel
		.sink13_data          (rsp_demux_022_src2_data),                                                                  //          .data
		.sink13_startofpacket (rsp_demux_022_src2_startofpacket),                                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_022_src2_endofpacket),                                                           //          .endofpacket
		.sink14_ready         (rsp_demux_023_src2_ready),                                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_023_src2_valid),                                                                 //          .valid
		.sink14_channel       (rsp_demux_023_src2_channel),                                                               //          .channel
		.sink14_data          (rsp_demux_023_src2_data),                                                                  //          .data
		.sink14_startofpacket (rsp_demux_023_src2_startofpacket),                                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_023_src2_endofpacket),                                                           //          .endofpacket
		.sink15_ready         (rsp_demux_024_src2_ready),                                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_024_src2_valid),                                                                 //          .valid
		.sink15_channel       (rsp_demux_024_src2_channel),                                                               //          .channel
		.sink15_data          (rsp_demux_024_src2_data),                                                                  //          .data
		.sink15_startofpacket (rsp_demux_024_src2_startofpacket),                                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_024_src2_endofpacket),                                                           //          .endofpacket
		.sink16_ready         (rsp_demux_025_src2_ready),                                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_025_src2_valid),                                                                 //          .valid
		.sink16_channel       (rsp_demux_025_src2_channel),                                                               //          .channel
		.sink16_data          (rsp_demux_025_src2_data),                                                                  //          .data
		.sink16_startofpacket (rsp_demux_025_src2_startofpacket),                                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_025_src2_endofpacket),                                                           //          .endofpacket
		.sink17_ready         (rsp_demux_026_src2_ready),                                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_026_src2_valid),                                                                 //          .valid
		.sink17_channel       (rsp_demux_026_src2_channel),                                                               //          .channel
		.sink17_data          (rsp_demux_026_src2_data),                                                                  //          .data
		.sink17_startofpacket (rsp_demux_026_src2_startofpacket),                                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_026_src2_endofpacket),                                                           //          .endofpacket
		.sink18_ready         (rsp_demux_027_src2_ready),                                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_027_src2_valid),                                                                 //          .valid
		.sink18_channel       (rsp_demux_027_src2_channel),                                                               //          .channel
		.sink18_data          (rsp_demux_027_src2_data),                                                                  //          .data
		.sink18_startofpacket (rsp_demux_027_src2_startofpacket),                                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_027_src2_endofpacket),                                                           //          .endofpacket
		.sink19_ready         (rsp_demux_028_src2_ready),                                                                 //    sink19.ready
		.sink19_valid         (rsp_demux_028_src2_valid),                                                                 //          .valid
		.sink19_channel       (rsp_demux_028_src2_channel),                                                               //          .channel
		.sink19_data          (rsp_demux_028_src2_data),                                                                  //          .data
		.sink19_startofpacket (rsp_demux_028_src2_startofpacket),                                                         //          .startofpacket
		.sink19_endofpacket   (rsp_demux_028_src2_endofpacket),                                                           //          .endofpacket
		.sink20_ready         (rsp_demux_029_src2_ready),                                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_029_src2_valid),                                                                 //          .valid
		.sink20_channel       (rsp_demux_029_src2_channel),                                                               //          .channel
		.sink20_data          (rsp_demux_029_src2_data),                                                                  //          .data
		.sink20_startofpacket (rsp_demux_029_src2_startofpacket),                                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_029_src2_endofpacket),                                                           //          .endofpacket
		.sink21_ready         (rsp_demux_030_src2_ready),                                                                 //    sink21.ready
		.sink21_valid         (rsp_demux_030_src2_valid),                                                                 //          .valid
		.sink21_channel       (rsp_demux_030_src2_channel),                                                               //          .channel
		.sink21_data          (rsp_demux_030_src2_data),                                                                  //          .data
		.sink21_startofpacket (rsp_demux_030_src2_startofpacket),                                                         //          .startofpacket
		.sink21_endofpacket   (rsp_demux_030_src2_endofpacket),                                                           //          .endofpacket
		.sink22_ready         (rsp_demux_031_src2_ready),                                                                 //    sink22.ready
		.sink22_valid         (rsp_demux_031_src2_valid),                                                                 //          .valid
		.sink22_channel       (rsp_demux_031_src2_channel),                                                               //          .channel
		.sink22_data          (rsp_demux_031_src2_data),                                                                  //          .data
		.sink22_startofpacket (rsp_demux_031_src2_startofpacket),                                                         //          .startofpacket
		.sink22_endofpacket   (rsp_demux_031_src2_endofpacket),                                                           //          .endofpacket
		.sink23_ready         (rsp_demux_032_src2_ready),                                                                 //    sink23.ready
		.sink23_valid         (rsp_demux_032_src2_valid),                                                                 //          .valid
		.sink23_channel       (rsp_demux_032_src2_channel),                                                               //          .channel
		.sink23_data          (rsp_demux_032_src2_data),                                                                  //          .data
		.sink23_startofpacket (rsp_demux_032_src2_startofpacket),                                                         //          .startofpacket
		.sink23_endofpacket   (rsp_demux_032_src2_endofpacket),                                                           //          .endofpacket
		.sink24_ready         (rsp_demux_033_src2_ready),                                                                 //    sink24.ready
		.sink24_valid         (rsp_demux_033_src2_valid),                                                                 //          .valid
		.sink24_channel       (rsp_demux_033_src2_channel),                                                               //          .channel
		.sink24_data          (rsp_demux_033_src2_data),                                                                  //          .data
		.sink24_startofpacket (rsp_demux_033_src2_startofpacket),                                                         //          .startofpacket
		.sink24_endofpacket   (rsp_demux_033_src2_endofpacket),                                                           //          .endofpacket
		.sink25_ready         (rsp_demux_034_src2_ready),                                                                 //    sink25.ready
		.sink25_valid         (rsp_demux_034_src2_valid),                                                                 //          .valid
		.sink25_channel       (rsp_demux_034_src2_channel),                                                               //          .channel
		.sink25_data          (rsp_demux_034_src2_data),                                                                  //          .data
		.sink25_startofpacket (rsp_demux_034_src2_startofpacket),                                                         //          .startofpacket
		.sink25_endofpacket   (rsp_demux_034_src2_endofpacket),                                                           //          .endofpacket
		.sink26_ready         (rsp_demux_035_src2_ready),                                                                 //    sink26.ready
		.sink26_valid         (rsp_demux_035_src2_valid),                                                                 //          .valid
		.sink26_channel       (rsp_demux_035_src2_channel),                                                               //          .channel
		.sink26_data          (rsp_demux_035_src2_data),                                                                  //          .data
		.sink26_startofpacket (rsp_demux_035_src2_startofpacket),                                                         //          .startofpacket
		.sink26_endofpacket   (rsp_demux_035_src2_endofpacket),                                                           //          .endofpacket
		.sink27_ready         (rsp_demux_036_src2_ready),                                                                 //    sink27.ready
		.sink27_valid         (rsp_demux_036_src2_valid),                                                                 //          .valid
		.sink27_channel       (rsp_demux_036_src2_channel),                                                               //          .channel
		.sink27_data          (rsp_demux_036_src2_data),                                                                  //          .data
		.sink27_startofpacket (rsp_demux_036_src2_startofpacket),                                                         //          .startofpacket
		.sink27_endofpacket   (rsp_demux_036_src2_endofpacket),                                                           //          .endofpacket
		.sink28_ready         (rsp_demux_037_src2_ready),                                                                 //    sink28.ready
		.sink28_valid         (rsp_demux_037_src2_valid),                                                                 //          .valid
		.sink28_channel       (rsp_demux_037_src2_channel),                                                               //          .channel
		.sink28_data          (rsp_demux_037_src2_data),                                                                  //          .data
		.sink28_startofpacket (rsp_demux_037_src2_startofpacket),                                                         //          .startofpacket
		.sink28_endofpacket   (rsp_demux_037_src2_endofpacket),                                                           //          .endofpacket
		.sink29_ready         (rsp_demux_038_src2_ready),                                                                 //    sink29.ready
		.sink29_valid         (rsp_demux_038_src2_valid),                                                                 //          .valid
		.sink29_channel       (rsp_demux_038_src2_channel),                                                               //          .channel
		.sink29_data          (rsp_demux_038_src2_data),                                                                  //          .data
		.sink29_startofpacket (rsp_demux_038_src2_startofpacket),                                                         //          .startofpacket
		.sink29_endofpacket   (rsp_demux_038_src2_endofpacket),                                                           //          .endofpacket
		.sink30_ready         (rsp_demux_039_src2_ready),                                                                 //    sink30.ready
		.sink30_valid         (rsp_demux_039_src2_valid),                                                                 //          .valid
		.sink30_channel       (rsp_demux_039_src2_channel),                                                               //          .channel
		.sink30_data          (rsp_demux_039_src2_data),                                                                  //          .data
		.sink30_startofpacket (rsp_demux_039_src2_startofpacket),                                                         //          .startofpacket
		.sink30_endofpacket   (rsp_demux_039_src2_endofpacket),                                                           //          .endofpacket
		.sink31_ready         (rsp_demux_040_src2_ready),                                                                 //    sink31.ready
		.sink31_valid         (rsp_demux_040_src2_valid),                                                                 //          .valid
		.sink31_channel       (rsp_demux_040_src2_channel),                                                               //          .channel
		.sink31_data          (rsp_demux_040_src2_data),                                                                  //          .data
		.sink31_startofpacket (rsp_demux_040_src2_startofpacket),                                                         //          .startofpacket
		.sink31_endofpacket   (rsp_demux_040_src2_endofpacket)                                                            //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_010 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                      //          .valid
		.src_data            (rsp_mux_010_src_data),                       //          .data
		.src_channel         (rsp_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_029_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_029_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_029_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_029_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_029_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_029_src3_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_011 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                      //          .valid
		.src_data            (rsp_mux_011_src_data),                       //          .data
		.src_channel         (rsp_mux_011_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_028_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_028_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_028_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_028_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_028_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_028_src3_endofpacket)              //          .endofpacket
	);

	soc_system_v5_mm_interconnect_1_rsp_mux_002 rsp_mux_012 (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (dma_fifo_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_012_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_012_src_valid),                      //          .valid
		.src_data            (rsp_mux_012_src_data),                       //          .data
		.src_channel         (rsp_mux_012_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_012_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_005_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_005_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_005_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_005_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_005_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src2_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                              //          .ready
		.in_data              (cmd_demux_src0_data),                                                               //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                         //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                       //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                         //          .ready
		.in_data              (cmd_demux_src1_data),                                                          //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                                  //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                                //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                                            //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                                  //          .ready
		.in_data              (cmd_demux_src2_data),                                                                   //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                                   //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                                 //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                                             //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                                   //          .ready
		.in_data              (cmd_demux_src3_data),                                                                    //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                             //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                           //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                             //          .ready
		.in_data              (cmd_demux_src4_data),                                                              //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_src5_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_src5_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_src5_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src5_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_src5_ready),                                                                //          .ready
		.in_data              (cmd_demux_src5_data),                                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_demux_src6_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_src6_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_src6_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src6_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_src6_ready),                                                          //          .ready
		.in_data              (cmd_demux_src6_data),                                                           //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_demux_src7_valid),                                                       //      sink.valid
		.in_channel           (cmd_demux_src7_channel),                                                     //          .channel
		.in_startofpacket     (cmd_demux_src7_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_src7_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_demux_src7_ready),                                                       //          .ready
		.in_data              (cmd_demux_src7_data),                                                        //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_switches_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_src8_valid),                                                    //      sink.valid
		.in_channel           (cmd_demux_src8_channel),                                                  //          .channel
		.in_startofpacket     (cmd_demux_src8_startofpacket),                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_src8_endofpacket),                                              //          .endofpacket
		.in_ready             (cmd_demux_src8_ready),                                                    //          .ready
		.in_data              (cmd_demux_src8_data),                                                     //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                          //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                           //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                     //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                      //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_001_src2_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_001_src2_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_001_src2_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src2_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_001_src2_ready),                                                              //          .ready
		.in_data              (cmd_demux_001_src2_data),                                                               //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy64_in_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_001_src3_valid),                                                               //      sink.valid
		.in_channel           (cmd_demux_001_src3_channel),                                                             //          .channel
		.in_startofpacket     (cmd_demux_001_src3_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src3_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_demux_001_src3_ready),                                                               //          .ready
		.in_data              (cmd_demux_001_src3_data),                                                                //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_demux_001_src4_valid),                                                         //      sink.valid
		.in_channel           (cmd_demux_001_src4_channel),                                                       //          .channel
		.in_startofpacket     (cmd_demux_001_src4_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src4_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_demux_001_src4_ready),                                                         //          .ready
		.in_data              (cmd_demux_001_src4_data),                                                          //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy_in_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_001_src5_valid),                                                            //      sink.valid
		.in_channel           (cmd_demux_001_src5_channel),                                                          //          .channel
		.in_startofpacket     (cmd_demux_001_src5_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src5_endofpacket),                                                      //          .endofpacket
		.in_ready             (cmd_demux_001_src5_ready),                                                            //          .ready
		.in_data              (cmd_demux_001_src5_data),                                                             //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy64_out_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (cmd_demux_001_src6_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_001_src6_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_001_src6_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src6_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_001_src6_ready),                                                      //          .ready
		.in_data              (cmd_demux_001_src6_data),                                                       //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_fifo_dummy_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_demux_001_src7_valid),                                                   //      sink.valid
		.in_channel           (cmd_demux_001_src7_channel),                                                 //          .channel
		.in_startofpacket     (cmd_demux_001_src7_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src7_endofpacket),                                             //          .endofpacket
		.in_ready             (cmd_demux_001_src7_ready),                                                   //          .ready
		.in_data              (cmd_demux_001_src7_data),                                                    //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_switches_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_demux_001_src8_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_001_src8_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_001_src8_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src8_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_001_src8_ready),                                                //          .ready
		.in_data              (cmd_demux_001_src8_data),                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_fifo_write_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                         //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                              //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                            //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                              //          .ready
		.in_data              (cmd_demux_002_src0_data),                                               //          .data
		.out_endofpacket      (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_fifo_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                //          .ready
		.in_data              (cmd_demux_003_src0_data),                                                 //          .data
		.out_endofpacket      (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dconvi_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                              //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                 //          .data
		.out_endofpacket      (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dconvq_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_dummy_write_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (cmd_demux_005_src0_valid),                                               //      sink.valid
		.in_channel           (cmd_demux_005_src0_channel),                                             //          .channel
		.in_startofpacket     (cmd_demux_005_src0_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src0_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_demux_005_src0_ready),                                               //          .ready
		.in_data              (cmd_demux_005_src0_data),                                                //          .data
		.out_endofpacket      (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_dummy_write_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                               //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_007_src3_valid),                                                                    //      sink.valid
		.in_channel           (cmd_demux_007_src3_channel),                                                                  //          .channel
		.in_startofpacket     (cmd_demux_007_src3_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src3_endofpacket),                                                              //          .endofpacket
		.in_ready             (cmd_demux_007_src3_ready),                                                                    //          .ready
		.in_data              (cmd_demux_007_src3_data),                                                                     //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_007_src4_valid),                                                                      //      sink.valid
		.in_channel           (cmd_demux_007_src4_channel),                                                                    //          .channel
		.in_startofpacket     (cmd_demux_007_src4_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src4_endofpacket),                                                                //          .endofpacket
		.in_ready             (cmd_demux_007_src4_ready),                                                                      //          .ready
		.in_data              (cmd_demux_007_src4_data),                                                                       //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_wr_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                               //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_008_src3_valid),                                                                    //      sink.valid
		.in_channel           (cmd_demux_008_src3_channel),                                                                  //          .channel
		.in_startofpacket     (cmd_demux_008_src3_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_008_src3_endofpacket),                                                              //          .endofpacket
		.in_ready             (cmd_demux_008_src3_ready),                                                                    //          .ready
		.in_data              (cmd_demux_008_src3_data),                                                                     //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_008_src4_valid),                                                                      //      sink.valid
		.in_channel           (cmd_demux_008_src4_channel),                                                                    //          .channel
		.in_startofpacket     (cmd_demux_008_src4_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_008_src4_endofpacket),                                                                //          .endofpacket
		.in_ready             (cmd_demux_008_src4_ready),                                                                      //          .ready
		.in_data              (cmd_demux_008_src4_data),                                                                       //          .data
		.out_endofpacket      (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_lw_axi_master_rd_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (cmd_demux_009_src3_valid),                                                               //      sink.valid
		.in_channel           (cmd_demux_009_src3_channel),                                                             //          .channel
		.in_startofpacket     (cmd_demux_009_src3_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_009_src3_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_demux_009_src3_ready),                                                               //          .ready
		.in_data              (cmd_demux_009_src3_data),                                                                //          .data
		.out_endofpacket      (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (master_non_sec_master_to_dconv_fir_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_valid             (cmd_demux_009_src4_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_009_src4_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_009_src4_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_009_src4_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_009_src4_ready),                                                                 //          .ready
		.in_data              (cmd_demux_009_src4_data),                                                                  //          .data
		.out_endofpacket      (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (master_non_sec_master_to_dconv_fir_q_avalon_mm_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_src0_data),                                                               //          .data
		.out_endofpacket      (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                     //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                              //          .ready
		.in_data              (rsp_demux_src1_data),                                                               //          .data
		.out_endofpacket      (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_in_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                     //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                      //          .data
		.out_endofpacket      (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_in_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                     //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                      //          .data
		.out_endofpacket      (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_in_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_002_src0_data),                                                               //          .data
		.out_endofpacket      (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_002_src1_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_002_src1_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_002_src1_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src1_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_002_src1_ready),                                                              //          .ready
		.in_data              (rsp_demux_002_src1_data),                                                               //          .data
		.out_endofpacket      (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_in_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                               //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                                //          .data
		.out_endofpacket      (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_003_src1_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_003_src1_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_003_src1_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src1_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_003_src1_ready),                                                               //          .ready
		.in_data              (rsp_demux_003_src1_data),                                                                //          .data
		.out_endofpacket      (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_out_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                         //          .ready
		.in_data              (rsp_demux_004_src0_data),                                                          //          .data
		.out_endofpacket      (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (rsp_demux_004_src1_valid),                                                         //      sink.valid
		.in_channel           (rsp_demux_004_src1_channel),                                                       //          .channel
		.in_startofpacket     (rsp_demux_004_src1_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src1_endofpacket),                                                   //          .endofpacket
		.in_ready             (rsp_demux_004_src1_ready),                                                         //          .ready
		.in_data              (rsp_demux_004_src1_data),                                                          //          .data
		.out_endofpacket      (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_in_csr_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_valid             (rsp_demux_005_src0_valid),                                                            //      sink.valid
		.in_channel           (rsp_demux_005_src0_channel),                                                          //          .channel
		.in_startofpacket     (rsp_demux_005_src0_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src0_endofpacket),                                                      //          .endofpacket
		.in_ready             (rsp_demux_005_src0_ready),                                                            //          .ready
		.in_data              (rsp_demux_005_src0_data),                                                             //          .data
		.out_endofpacket      (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.in_valid             (rsp_demux_005_src1_valid),                                                            //      sink.valid
		.in_channel           (rsp_demux_005_src1_channel),                                                          //          .channel
		.in_startofpacket     (rsp_demux_005_src1_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src1_endofpacket),                                                      //          .endofpacket
		.in_ready             (rsp_demux_005_src1_ready),                                                            //          .ready
		.in_data              (rsp_demux_005_src1_data),                                                             //          .data
		.out_endofpacket      (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy64_out_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (rsp_demux_006_src0_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_006_src0_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_006_src0_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src0_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_006_src0_ready),                                                      //          .ready
		.in_data              (rsp_demux_006_src0_data),                                                       //          .data
		.out_endofpacket      (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_out_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.in_valid             (rsp_demux_006_src1_valid),                                                      //      sink.valid
		.in_channel           (rsp_demux_006_src1_channel),                                                    //          .channel
		.in_startofpacket     (rsp_demux_006_src1_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_006_src1_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_demux_006_src1_ready),                                                      //          .ready
		.in_data              (rsp_demux_006_src1_data),                                                       //          .data
		.out_endofpacket      (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fifo_dummy_out_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_007_src0_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_007_src0_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_007_src0_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src0_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_007_src0_ready),                                                   //          .ready
		.in_data              (rsp_demux_007_src0_data),                                                    //          .data
		.out_endofpacket      (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (switches_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                              //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_007_src1_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_007_src1_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_007_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_007_src1_ready),                                                   //          .ready
		.in_data              (rsp_demux_007_src1_data),                                                    //          .data
		.out_endofpacket      (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (switches_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                                //          .ready
		.in_data              (rsp_demux_008_src0_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_008_src1_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_008_src1_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_008_src1_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src1_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_008_src1_ready),                                                //          .ready
		.in_data              (rsp_demux_008_src1_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_dma_fifo_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                         //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (rsp_demux_008_src2_valid),                                              //      sink.valid
		.in_channel           (rsp_demux_008_src2_channel),                                            //          .channel
		.in_startofpacket     (rsp_demux_008_src2_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src2_endofpacket),                                        //          .endofpacket
		.in_ready             (rsp_demux_008_src2_ready),                                              //          .ready
		.in_data              (rsp_demux_008_src2_data),                                               //          .data
		.out_endofpacket      (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_fifo_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_008_src3_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_008_src3_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_008_src3_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src3_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_008_src3_ready),                                                //          .ready
		.in_data              (rsp_demux_008_src3_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_dconvi_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                           //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_008_src4_valid),                                                //      sink.valid
		.in_channel           (rsp_demux_008_src4_channel),                                              //          .channel
		.in_startofpacket     (rsp_demux_008_src4_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src4_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_demux_008_src4_ready),                                                //          .ready
		.in_data              (rsp_demux_008_src4_data),                                                 //          .data
		.out_endofpacket      (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_dconvq_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_dma_dummy_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_008_src5_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_008_src5_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_008_src5_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src5_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_008_src5_ready),                                               //          .ready
		.in_data              (rsp_demux_008_src5_data),                                                //          .data
		.out_endofpacket      (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_dma_dummy_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                               //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (rsp_demux_012_src0_valid),                                                                    //      sink.valid
		.in_channel           (rsp_demux_012_src0_channel),                                                                  //          .channel
		.in_startofpacket     (rsp_demux_012_src0_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src0_endofpacket),                                                              //          .endofpacket
		.in_ready             (rsp_demux_012_src0_ready),                                                                    //          .ready
		.in_data              (rsp_demux_012_src0_data),                                                                     //          .data
		.out_endofpacket      (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                               //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (rsp_demux_012_src1_valid),                                                                    //      sink.valid
		.in_channel           (rsp_demux_012_src1_channel),                                                                  //          .channel
		.in_startofpacket     (rsp_demux_012_src1_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src1_endofpacket),                                                              //          .endofpacket
		.in_ready             (rsp_demux_012_src1_ready),                                                                    //          .ready
		.in_data              (rsp_demux_012_src1_data),                                                                     //          .data
		.out_endofpacket      (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_012_src2_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_012_src2_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_012_src2_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_012_src2_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_012_src2_ready),                                                               //          .ready
		.in_data              (rsp_demux_012_src2_data),                                                                //          .data
		.out_endofpacket      (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_valid             (rsp_demux_013_src0_valid),                                                                      //      sink.valid
		.in_channel           (rsp_demux_013_src0_channel),                                                                    //          .channel
		.in_startofpacket     (rsp_demux_013_src0_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_013_src0_endofpacket),                                                                //          .endofpacket
		.in_ready             (rsp_demux_013_src0_ready),                                                                      //          .ready
		.in_data              (rsp_demux_013_src0_data),                                                                       //          .data
		.out_endofpacket      (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_valid             (rsp_demux_013_src1_valid),                                                                      //      sink.valid
		.in_channel           (rsp_demux_013_src1_channel),                                                                    //          .channel
		.in_startofpacket     (rsp_demux_013_src1_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_013_src1_endofpacket),                                                                //          .endofpacket
		.in_ready             (rsp_demux_013_src1_ready),                                                                      //          .ready
		.in_data              (rsp_demux_013_src1_data),                                                                       //          .data
		.out_endofpacket      (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_q_avalon_mm_slave_to_hps_0_h2f_lw_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (45),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                (dma_fifo_reset_reset_bridge_in_reset_reset),                                               // clk_reset.reset
		.in_valid             (rsp_demux_013_src2_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_013_src2_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_013_src2_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_013_src2_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_013_src2_ready),                                                                 //          .ready
		.in_data              (rsp_demux_013_src2_data),                                                                  //          .data
		.out_endofpacket      (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dconv_fir_q_avalon_mm_slave_to_master_non_sec_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (gp_pll_outclk0_clk),                                               //       out_clk.clk
		.out_reset         (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_007_src5_ready),                                         //            in.ready
		.in_valid          (cmd_demux_007_src5_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_007_src5_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_007_src5_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_007_src5_channel),                                       //              .channel
		.in_data           (cmd_demux_007_src5_data),                                          //              .data
		.out_ready         (crosser_out_ready),                                                //           out.ready
		.out_valid         (crosser_out_valid),                                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_out_channel),                                              //              .channel
		.out_data          (crosser_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (gp_pll_outclk0_clk),                                               //       out_clk.clk
		.out_reset         (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (cmd_demux_008_src5_ready),                                         //            in.ready
		.in_valid          (cmd_demux_008_src5_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_008_src5_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_008_src5_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_008_src5_channel),                                       //              .channel
		.in_data           (cmd_demux_008_src5_data),                                          //              .data
		.out_ready         (crosser_001_out_ready),                                            //           out.ready
		.out_valid         (crosser_001_out_valid),                                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                          //              .channel
		.out_data          (crosser_001_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                                 //        in_clk.clk
		.in_reset          (dma_fifo_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (gp_pll_outclk0_clk),                                            //       out_clk.clk
		.out_reset         (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_009_src5_ready),                                      //            in.ready
		.in_valid          (cmd_demux_009_src5_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_009_src5_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_009_src5_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_009_src5_channel),                                    //              .channel
		.in_data           (cmd_demux_009_src5_data),                                       //              .data
		.out_ready         (crosser_002_out_ready),                                         //           out.ready
		.out_valid         (crosser_002_out_valid),                                         //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                       //              .channel
		.out_data          (crosser_002_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (gp_pll_outclk0_clk),                                               //        in_clk.clk
		.in_reset          (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_014_src0_data),                                          //              .data
		.out_ready         (crosser_003_out_ready),                                            //           out.ready
		.out_valid         (crosser_003_out_valid),                                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                          //              .channel
		.out_data          (crosser_003_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (gp_pll_outclk0_clk),                                               //        in_clk.clk
		.in_reset          (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_014_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_014_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_014_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_014_src1_data),                                          //              .data
		.out_ready         (crosser_004_out_ready),                                            //           out.ready
		.out_valid         (crosser_004_out_valid),                                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                          //              .channel
		.out_data          (crosser_004_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (137),
		.BITS_PER_SYMBOL     (137),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (45),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (gp_pll_outclk0_clk),                                            //        in_clk.clk
		.in_reset          (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                 //       out_clk.clk
		.out_reset         (dma_fifo_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src2_ready),                                      //            in.ready
		.in_valid          (rsp_demux_014_src2_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_014_src2_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src2_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_014_src2_channel),                                    //              .channel
		.in_data           (rsp_demux_014_src2_data),                                       //              .data
		.out_ready         (crosser_005_out_ready),                                         //           out.ready
		.out_valid         (crosser_005_out_valid),                                         //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                       //              .channel
		.out_data          (crosser_005_out_data),                                          //              .data
		.in_empty          (1'b0),                                                          //   (terminated)
		.in_error          (1'b0),                                                          //   (terminated)
		.out_empty         (),                                                              //   (terminated)
		.out_error         ()                                                               //   (terminated)
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (fifo_dummy64_in_in_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_dummy64_in_in_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_dummy64_in_in_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_dummy_in_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (fifo_dummy_in_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (fifo_dummy_in_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_dummy64_in_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_dummy64_out_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (fifo_dummy_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_dummy_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_dummy_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)             //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (fifo_dummy64_out_out_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_dummy64_out_out_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_dummy64_out_out_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo_dummy_out_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (fifo_dummy_out_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (fifo_dummy_out_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter_008 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_fifo_mem_out_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (adc_fifo_mem_out_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (adc_fifo_mem_out_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_adc_val_sub_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                         //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                       //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter_008 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dconv_fir_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                     //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter_008 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dconv_fir_q_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                       //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (gp_pll_outclk0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (alt_vip_vfr_vga_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                              //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                    //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_int_csr_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (i2c_int_csr_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (i2c_int_csr_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_ext_csr_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (i2c_ext_csr_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (i2c_ext_csr_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_delay_nosig_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                         //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_delay_sig_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                       //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_delay_t1_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                      //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_echoes_per_scan_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                             //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_fifo_mem_in_csr_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (adc_fifo_mem_in_csr_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (adc_fifo_mem_in_csr_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (dconv_fifo_mem_in_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dconv_fifo_mem_q_in_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                   //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_init_delay_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                        //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                        // in_rst_0.reset
		.in_0_data      (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_sys_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                      // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                         // in_rst_0.reset
		.in_0_data      (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (analyzer_pll_reconfig_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                                   //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dconv_fifo_mem_out_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (dconv_fifo_mem_out_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (dconv_fifo_mem_out_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (adc_fifo_mem_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dconv_fifo_mem_q_out_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (dconv_fifo_mem_q_out_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (dconv_fifo_mem_q_out_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)                  //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_pulse_180deg_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)                          //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_pulse_90deg_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)                         //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_pulse_t1_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                      //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_rx_delay_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                      //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ctrl_out_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ctrl_out_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ctrl_out_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ctrl_in_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (ctrl_in_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (ctrl_in_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (clk_0_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (aux_cnt_out_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (aux_cnt_out_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (aux_cnt_out_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_037 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nmr_parameters_samples_per_echo_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_037_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_037_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_037_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_037_out_0_error)                              //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_038 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (dac_grad_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dac_grad_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dac_grad_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_038_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_038_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_038_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_038_out_0_error)                     //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_039 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (spi_mtch_ntwrk_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_039_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_039_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_039_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_039_out_0_error)                           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_040 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (spi_afe_relays_spi_control_port_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_040_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_040_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_040_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_040_out_0_error)                           //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_041 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (dma_fifo_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_fifo_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_fifo_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_041_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_041_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_041_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_041_out_0_error)                       //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_042 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_dconvi_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_dconvi_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_dconvi_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_042_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_042_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_042_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_042_out_0_error)                         //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_043 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (dma_dconvq_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_dconvq_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_dconvq_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_043_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_043_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_043_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_043_out_0_error)                         //         .error
	);

	soc_system_v5_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_044 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (dma_fifo_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (dma_dummy_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_dummy_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_dummy_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_044_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_044_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_044_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_044_out_0_error)                        //         .error
	);

endmodule
